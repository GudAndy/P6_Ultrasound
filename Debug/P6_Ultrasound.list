
P6_Ultrasound.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008764  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  080088f8  080088f8  000188f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dc4  08008dc4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008dc4  08008dc4  00018dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dcc  08008dcc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dcc  08008dcc  00018dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dd0  08008dd0  00018dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  200001dc  08008fb0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08008fb0  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001340b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002730  00000000  00000000  00033617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00035d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00036d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028355  00000000  00000000  00037c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118fd  00000000  00000000  0005ffc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5912  00000000  00000000  000718c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001671d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005494  00000000  00000000  00167228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080088dc 	.word	0x080088dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080088dc 	.word	0x080088dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea4:	f000 fe00 	bl	8001aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea8:	f000 f83c 	bl	8000f24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eac:	f000 f97c 	bl	80011a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eb0:	f000 f94a 	bl	8001148 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000eb4:	f000 f888 	bl	8000fc8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000eb8:	f000 f8f8 	bl	80010ac <MX_TIM4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  HAL_UART_Receive_IT(&huart2, &ch, 1);
  HAL_TIM_Base_Start(&usTIM);
 8000ebc:	4813      	ldr	r0, [pc, #76]	; (8000f0c <main+0x6c>)
 8000ebe:	f002 fd49 	bl	8003954 <HAL_TIM_Base_Start>



  while (1)
  {
	  if (!post_check) POST();
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <main+0x70>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <main+0x2e>
 8000eca:	f000 f9d7 	bl	800127c <POST>
	  HAL_Delay(10);
 8000ece:	200a      	movs	r0, #10
 8000ed0:	f000 fe66 	bl	8001ba0 <HAL_Delay>
	  if (post_check == 1){
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <main+0x70>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d1f2      	bne.n	8000ec2 <main+0x22>
		  distance = read_ultrasound();
 8000edc:	f000 fd54 	bl	8001988 <read_ultrasound>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <main+0x74>)
 8000ee4:	6013      	str	r3, [r2, #0]
		  sprintf((char *) out_buffer, "Distance:\t%ld\n", distance);
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <main+0x74>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	490a      	ldr	r1, [pc, #40]	; (8000f18 <main+0x78>)
 8000eee:	480b      	ldr	r0, [pc, #44]	; (8000f1c <main+0x7c>)
 8000ef0:	f005 faca 	bl	8006488 <siprintf>
		  HAL_UART_Transmit(&huart2, out_buffer, strlen((char *) out_buffer), HAL_MAX_DELAY);
 8000ef4:	4809      	ldr	r0, [pc, #36]	; (8000f1c <main+0x7c>)
 8000ef6:	f7ff f96b 	bl	80001d0 <strlen>
 8000efa:	4603      	mov	r3, r0
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	4906      	ldr	r1, [pc, #24]	; (8000f1c <main+0x7c>)
 8000f04:	4806      	ldr	r0, [pc, #24]	; (8000f20 <main+0x80>)
 8000f06:	f003 fe41 	bl	8004b8c <HAL_UART_Transmit>
	  if (!post_check) POST();
 8000f0a:	e7da      	b.n	8000ec2 <main+0x22>
 8000f0c:	2000021c 	.word	0x2000021c
 8000f10:	200001f8 	.word	0x200001f8
 8000f14:	200001fc 	.word	0x200001fc
 8000f18:	080088f8 	.word	0x080088f8
 8000f1c:	20000268 	.word	0x20000268
 8000f20:	200004b4 	.word	0x200004b4

08000f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b096      	sub	sp, #88	; 0x58
 8000f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	2244      	movs	r2, #68	; 0x44
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f004 fe36 	bl	8005ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f38:	463b      	mov	r3, r7
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f46:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f4a:	f001 f9ad 	bl	80022a8 <HAL_PWREx_ControlVoltageScaling>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f54:	f000 fa90 	bl	8001478 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f58:	2310      	movs	r3, #16
 8000f5a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f64:	2360      	movs	r3, #96	; 0x60
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000f74:	2328      	movs	r3, #40	; 0x28
 8000f76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f78:	2307      	movs	r3, #7
 8000f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f80:	2302      	movs	r3, #2
 8000f82:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 f9e3 	bl	8002354 <HAL_RCC_OscConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f94:	f000 fa70 	bl	8001478 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f98:	230f      	movs	r3, #15
 8000f9a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	2104      	movs	r1, #4
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 fdb5 	bl	8002b20 <HAL_RCC_ClockConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fbc:	f000 fa5c 	bl	8001478 <Error_Handler>
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3758      	adds	r7, #88	; 0x58
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08c      	sub	sp, #48	; 0x30
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ff4:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <MX_TIM3_Init+0xdc>)
 8000ff6:	4a2c      	ldr	r2, [pc, #176]	; (80010a8 <MX_TIM3_Init+0xe0>)
 8000ff8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8000ffa:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <MX_TIM3_Init+0xdc>)
 8000ffc:	224f      	movs	r2, #79	; 0x4f
 8000ffe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001000:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <MX_TIM3_Init+0xdc>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001006:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <MX_TIM3_Init+0xdc>)
 8001008:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800100c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <MX_TIM3_Init+0xdc>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001014:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <MX_TIM3_Init+0xdc>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800101a:	4822      	ldr	r0, [pc, #136]	; (80010a4 <MX_TIM3_Init+0xdc>)
 800101c:	f002 fc42 	bl	80038a4 <HAL_TIM_Base_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8001026:	f000 fa27 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	4619      	mov	r1, r3
 8001036:	481b      	ldr	r0, [pc, #108]	; (80010a4 <MX_TIM3_Init+0xdc>)
 8001038:	f003 f903 	bl	8004242 <HAL_TIM_ConfigClockSource>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001042:	f000 fa19 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001046:	4817      	ldr	r0, [pc, #92]	; (80010a4 <MX_TIM3_Init+0xdc>)
 8001048:	f002 fcec 	bl	8003a24 <HAL_TIM_IC_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001052:	f000 fa11 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	480f      	ldr	r0, [pc, #60]	; (80010a4 <MX_TIM3_Init+0xdc>)
 8001066:	f003 fc9d 	bl	80049a4 <HAL_TIMEx_MasterConfigSynchronization>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001070:	f000 fa02 	bl	8001478 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001074:	230a      	movs	r3, #10
 8001076:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001078:	2301      	movs	r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 4;
 8001080:	2304      	movs	r3, #4
 8001082:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_TIM3_Init+0xdc>)
 800108c:	f003 f845 	bl	800411a <HAL_TIM_IC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8001096:	f000 f9ef 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3730      	adds	r7, #48	; 0x30
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000468 	.word	0x20000468
 80010a8:	40000400 	.word	0x40000400

080010ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_TIM4_Init+0x94>)
 80010cc:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <MX_TIM4_Init+0x98>)
 80010ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_TIM4_Init+0x94>)
 80010d2:	224f      	movs	r2, #79	; 0x4f
 80010d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_TIM4_Init+0x94>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_TIM4_Init+0x94>)
 80010de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_TIM4_Init+0x94>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_TIM4_Init+0x94>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010f0:	4813      	ldr	r0, [pc, #76]	; (8001140 <MX_TIM4_Init+0x94>)
 80010f2:	f002 fbd7 	bl	80038a4 <HAL_TIM_Base_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80010fc:	f000 f9bc 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001104:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <MX_TIM4_Init+0x94>)
 800110e:	f003 f898 	bl	8004242 <HAL_TIM_ConfigClockSource>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001118:	f000 f9ae 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_TIM4_Init+0x94>)
 800112a:	f003 fc3b 	bl	80049a4 <HAL_TIMEx_MasterConfigSynchronization>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001134:	f000 f9a0 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	3720      	adds	r7, #32
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	2000021c 	.word	0x2000021c
 8001144:	40000800 	.word	0x40000800

08001148 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 800114e:	4a15      	ldr	r2, [pc, #84]	; (80011a4 <MX_USART2_UART_Init+0x5c>)
 8001150:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 8001154:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001158:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 800116e:	220c      	movs	r2, #12
 8001170:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 800118c:	f003 fcb0 	bl	8004af0 <HAL_UART_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001196:	f000 f96f 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200004b4 	.word	0x200004b4
 80011a4:	40004400 	.word	0x40004400

080011a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <MX_GPIO_Init+0xc8>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	4a2b      	ldr	r2, [pc, #172]	; (8001270 <MX_GPIO_Init+0xc8>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ca:	4b29      	ldr	r3, [pc, #164]	; (8001270 <MX_GPIO_Init+0xc8>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d6:	4b26      	ldr	r3, [pc, #152]	; (8001270 <MX_GPIO_Init+0xc8>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a25      	ldr	r2, [pc, #148]	; (8001270 <MX_GPIO_Init+0xc8>)
 80011dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <MX_GPIO_Init+0xc8>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <MX_GPIO_Init+0xc8>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <MX_GPIO_Init+0xc8>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <MX_GPIO_Init+0xc8>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MX_GPIO_Init+0xc8>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a19      	ldr	r2, [pc, #100]	; (8001270 <MX_GPIO_Init+0xc8>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_GPIO_Init+0xc8>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TRIG_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001228:	f001 f818 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800122c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_GPIO_Init+0xcc>)
 8001234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <MX_GPIO_Init+0xd0>)
 8001242:	f000 fe61 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin TRIG_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|TRIG_Pin;
 8001246:	f44f 7390 	mov.w	r3, #288	; 0x120
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001262:	f000 fe51 	bl	8001f08 <HAL_GPIO_Init>

}
 8001266:	bf00      	nop
 8001268:	3728      	adds	r7, #40	; 0x28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	10210000 	.word	0x10210000
 8001278:	48000800 	.word	0x48000800

0800127c <POST>:
    HAL_UART_Transmit_IT(huart, &ch, 1);

    HAL_UART_Receive_IT(huart, &ch, 1);
}

void POST(){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
	sprintf((char *) out_buffer, "Would you like to run the POST: ");
 8001282:	496e      	ldr	r1, [pc, #440]	; (800143c <POST+0x1c0>)
 8001284:	486e      	ldr	r0, [pc, #440]	; (8001440 <POST+0x1c4>)
 8001286:	f005 f8ff 	bl	8006488 <siprintf>
	HAL_UART_Transmit(&huart2, out_buffer, strlen((char *) out_buffer), HAL_MAX_DELAY);
 800128a:	486d      	ldr	r0, [pc, #436]	; (8001440 <POST+0x1c4>)
 800128c:	f7fe ffa0 	bl	80001d0 <strlen>
 8001290:	4603      	mov	r3, r0
 8001292:	b29a      	uxth	r2, r3
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	4969      	ldr	r1, [pc, #420]	; (8001440 <POST+0x1c4>)
 800129a:	486a      	ldr	r0, [pc, #424]	; (8001444 <POST+0x1c8>)
 800129c:	f003 fc76 	bl	8004b8c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, in_buffer, 1, HAL_MAX_DELAY);
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	2201      	movs	r2, #1
 80012a6:	4968      	ldr	r1, [pc, #416]	; (8001448 <POST+0x1cc>)
 80012a8:	4866      	ldr	r0, [pc, #408]	; (8001444 <POST+0x1c8>)
 80012aa:	f003 fd03 	bl	8004cb4 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, in_buffer, strlen((char *) in_buffer), HAL_MAX_DELAY);
 80012ae:	4866      	ldr	r0, [pc, #408]	; (8001448 <POST+0x1cc>)
 80012b0:	f7fe ff8e 	bl	80001d0 <strlen>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295
 80012bc:	4962      	ldr	r1, [pc, #392]	; (8001448 <POST+0x1cc>)
 80012be:	4861      	ldr	r0, [pc, #388]	; (8001444 <POST+0x1c8>)
 80012c0:	f003 fc64 	bl	8004b8c <HAL_UART_Transmit>

	if (strncmp((char *) in_buffer, "y", 1) == 0){
 80012c4:	4b60      	ldr	r3, [pc, #384]	; (8001448 <POST+0x1cc>)
 80012c6:	781a      	ldrb	r2, [r3, #0]
 80012c8:	4b60      	ldr	r3, [pc, #384]	; (800144c <POST+0x1d0>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f040 80af 	bne.w	8001432 <POST+0x1b6>
		HAL_UART_Transmit(&huart2, (uint8_t *) "\nPOSTING\n", 9, HAL_MAX_DELAY);
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	2209      	movs	r2, #9
 80012da:	495d      	ldr	r1, [pc, #372]	; (8001450 <POST+0x1d4>)
 80012dc:	4859      	ldr	r0, [pc, #356]	; (8001444 <POST+0x1c8>)
 80012de:	f003 fc55 	bl	8004b8c <HAL_UART_Transmit>
		distance = read_ultrasound();
 80012e2:	f000 fb51 	bl	8001988 <read_ultrasound>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a5a      	ldr	r2, [pc, #360]	; (8001454 <POST+0x1d8>)
 80012ea:	6013      	str	r3, [r2, #0]
		uint32_t true = distance * speed_of_sound;
 80012ec:	4b59      	ldr	r3, [pc, #356]	; (8001454 <POST+0x1d8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012f8:	4b57      	ldr	r3, [pc, #348]	; (8001458 <POST+0x1dc>)
 80012fa:	edd3 7a00 	vldr	s15, [r3]
 80012fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001306:	ee17 3a90 	vmov	r3, s15
 800130a:	607b      	str	r3, [r7, #4]

		// Until success
		while (true < 300 || true > 1000){
 800130c:	e06d      	b.n	80013ea <POST+0x16e>
			memset(out_buffer, '\0',  sizeof(out_buffer));
 800130e:	22ff      	movs	r2, #255	; 0xff
 8001310:	2100      	movs	r1, #0
 8001312:	484b      	ldr	r0, [pc, #300]	; (8001440 <POST+0x1c4>)
 8001314:	f004 fc46 	bl	8005ba4 <memset>
			sprintf((char *) out_buffer, "Object is outside of POST range!\n");
 8001318:	4950      	ldr	r1, [pc, #320]	; (800145c <POST+0x1e0>)
 800131a:	4849      	ldr	r0, [pc, #292]	; (8001440 <POST+0x1c4>)
 800131c:	f005 f8b4 	bl	8006488 <siprintf>
			HAL_UART_Transmit(&huart2, out_buffer, strlen((char *) out_buffer), HAL_MAX_DELAY);
 8001320:	4847      	ldr	r0, [pc, #284]	; (8001440 <POST+0x1c4>)
 8001322:	f7fe ff55 	bl	80001d0 <strlen>
 8001326:	4603      	mov	r3, r0
 8001328:	b29a      	uxth	r2, r3
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	4944      	ldr	r1, [pc, #272]	; (8001440 <POST+0x1c4>)
 8001330:	4844      	ldr	r0, [pc, #272]	; (8001444 <POST+0x1c8>)
 8001332:	f003 fc2b 	bl	8004b8c <HAL_UART_Transmit>

			// Prompt retry
			memset(out_buffer, '\0',  sizeof(out_buffer));
 8001336:	22ff      	movs	r2, #255	; 0xff
 8001338:	2100      	movs	r1, #0
 800133a:	4841      	ldr	r0, [pc, #260]	; (8001440 <POST+0x1c4>)
 800133c:	f004 fc32 	bl	8005ba4 <memset>
			sprintf((char *) out_buffer, "Try Again? ");
 8001340:	4947      	ldr	r1, [pc, #284]	; (8001460 <POST+0x1e4>)
 8001342:	483f      	ldr	r0, [pc, #252]	; (8001440 <POST+0x1c4>)
 8001344:	f005 f8a0 	bl	8006488 <siprintf>
			HAL_UART_Transmit(&huart2, out_buffer, strlen((char *) out_buffer), HAL_MAX_DELAY);
 8001348:	483d      	ldr	r0, [pc, #244]	; (8001440 <POST+0x1c4>)
 800134a:	f7fe ff41 	bl	80001d0 <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	b29a      	uxth	r2, r3
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	493a      	ldr	r1, [pc, #232]	; (8001440 <POST+0x1c4>)
 8001358:	483a      	ldr	r0, [pc, #232]	; (8001444 <POST+0x1c8>)
 800135a:	f003 fc17 	bl	8004b8c <HAL_UART_Transmit>
			HAL_UART_Receive(&huart2, in_buffer, 1, HAL_MAX_DELAY);
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	2201      	movs	r2, #1
 8001364:	4938      	ldr	r1, [pc, #224]	; (8001448 <POST+0x1cc>)
 8001366:	4837      	ldr	r0, [pc, #220]	; (8001444 <POST+0x1c8>)
 8001368:	f003 fca4 	bl	8004cb4 <HAL_UART_Receive>
			HAL_UART_Transmit(&huart2, (uint8_t *) "\n", 1, HAL_MAX_DELAY);
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	2201      	movs	r2, #1
 8001372:	493c      	ldr	r1, [pc, #240]	; (8001464 <POST+0x1e8>)
 8001374:	4833      	ldr	r0, [pc, #204]	; (8001444 <POST+0x1c8>)
 8001376:	f003 fc09 	bl	8004b8c <HAL_UART_Transmit>

			if (strncmp((char *) in_buffer, "n", 1) == 0){	// If don't want to retry
 800137a:	4b33      	ldr	r3, [pc, #204]	; (8001448 <POST+0x1cc>)
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <POST+0x1ec>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d11b      	bne.n	80013c0 <POST+0x144>
				distance = -1;
 8001388:	4b32      	ldr	r3, [pc, #200]	; (8001454 <POST+0x1d8>)
 800138a:	f04f 32ff 	mov.w	r2, #4294967295
 800138e:	601a      	str	r2, [r3, #0]
				memset(out_buffer, '\0',  sizeof(out_buffer));
 8001390:	22ff      	movs	r2, #255	; 0xff
 8001392:	2100      	movs	r1, #0
 8001394:	482a      	ldr	r0, [pc, #168]	; (8001440 <POST+0x1c4>)
 8001396:	f004 fc05 	bl	8005ba4 <memset>
				sprintf((char *) out_buffer, "POST Failed!\n");
 800139a:	4934      	ldr	r1, [pc, #208]	; (800146c <POST+0x1f0>)
 800139c:	4828      	ldr	r0, [pc, #160]	; (8001440 <POST+0x1c4>)
 800139e:	f005 f873 	bl	8006488 <siprintf>
				HAL_UART_Transmit(&huart2, out_buffer, strlen((char *) out_buffer), HAL_MAX_DELAY);
 80013a2:	4827      	ldr	r0, [pc, #156]	; (8001440 <POST+0x1c4>)
 80013a4:	f7fe ff14 	bl	80001d0 <strlen>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	4923      	ldr	r1, [pc, #140]	; (8001440 <POST+0x1c4>)
 80013b2:	4824      	ldr	r0, [pc, #144]	; (8001444 <POST+0x1c8>)
 80013b4:	f003 fbea 	bl	8004b8c <HAL_UART_Transmit>
				post_check = 2;
 80013b8:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <POST+0x1f4>)
 80013ba:	2202      	movs	r2, #2
 80013bc:	701a      	strb	r2, [r3, #0]
				break;
 80013be:	e01c      	b.n	80013fa <POST+0x17e>
			}
			distance = read_ultrasound();
 80013c0:	f000 fae2 	bl	8001988 <read_ultrasound>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a23      	ldr	r2, [pc, #140]	; (8001454 <POST+0x1d8>)
 80013c8:	6013      	str	r3, [r2, #0]
			true = distance * speed_of_sound;
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <POST+0x1d8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	ee07 3a90 	vmov	s15, r3
 80013d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <POST+0x1dc>)
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e4:	ee17 3a90 	vmov	r3, s15
 80013e8:	607b      	str	r3, [r7, #4]
		while (true < 300 || true > 1000){
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80013f0:	d38d      	bcc.n	800130e <POST+0x92>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013f8:	d889      	bhi.n	800130e <POST+0x92>

		}
		if (distance != -1){
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <POST+0x1d8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001402:	d016      	beq.n	8001432 <POST+0x1b6>
			memset(out_buffer, '\0',  sizeof(out_buffer));
 8001404:	22ff      	movs	r2, #255	; 0xff
 8001406:	2100      	movs	r1, #0
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <POST+0x1c4>)
 800140a:	f004 fbcb 	bl	8005ba4 <memset>
			sprintf((char *) out_buffer, "POST Passed!\n");
 800140e:	4919      	ldr	r1, [pc, #100]	; (8001474 <POST+0x1f8>)
 8001410:	480b      	ldr	r0, [pc, #44]	; (8001440 <POST+0x1c4>)
 8001412:	f005 f839 	bl	8006488 <siprintf>
			HAL_UART_Transmit(&huart2, out_buffer, strlen((char *) out_buffer), HAL_MAX_DELAY);
 8001416:	480a      	ldr	r0, [pc, #40]	; (8001440 <POST+0x1c4>)
 8001418:	f7fe feda 	bl	80001d0 <strlen>
 800141c:	4603      	mov	r3, r0
 800141e:	b29a      	uxth	r2, r3
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
 8001424:	4906      	ldr	r1, [pc, #24]	; (8001440 <POST+0x1c4>)
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <POST+0x1c8>)
 8001428:	f003 fbb0 	bl	8004b8c <HAL_UART_Transmit>
			post_check = 1;
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <POST+0x1f4>)
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	08008908 	.word	0x08008908
 8001440:	20000268 	.word	0x20000268
 8001444:	200004b4 	.word	0x200004b4
 8001448:	20000368 	.word	0x20000368
 800144c:	0800892c 	.word	0x0800892c
 8001450:	08008930 	.word	0x08008930
 8001454:	200001fc 	.word	0x200001fc
 8001458:	080089dc 	.word	0x080089dc
 800145c:	0800893c 	.word	0x0800893c
 8001460:	08008960 	.word	0x08008960
 8001464:	0800896c 	.word	0x0800896c
 8001468:	08008970 	.word	0x08008970
 800146c:	08008974 	.word	0x08008974
 8001470:	200001f8 	.word	0x200001f8
 8001474:	08008984 	.word	0x08008984

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	e7fe      	b.n	8001480 <Error_Handler+0x8>
	...

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_MspInit+0x44>)
 800148c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148e:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <HAL_MspInit+0x44>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6613      	str	r3, [r2, #96]	; 0x60
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_MspInit+0x44>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_MspInit+0x44>)
 80014a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a6:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <HAL_MspInit+0x44>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	6593      	str	r3, [r2, #88]	; 0x58
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_MspInit+0x44>)
 80014b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000

080014cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a24      	ldr	r2, [pc, #144]	; (800157c <HAL_TIM_Base_MspInit+0xb0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d131      	bne.n	8001552 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_TIM_Base_MspInit+0xb4>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f2:	4a23      	ldr	r2, [pc, #140]	; (8001580 <HAL_TIM_Base_MspInit+0xb4>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6593      	str	r3, [r2, #88]	; 0x58
 80014fa:	4b21      	ldr	r3, [pc, #132]	; (8001580 <HAL_TIM_Base_MspInit+0xb4>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_TIM_Base_MspInit+0xb4>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <HAL_TIM_Base_MspInit+0xb4>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_TIM_Base_MspInit+0xb4>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 800151e:	2340      	movs	r3, #64	; 0x40
 8001520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800152e:	2302      	movs	r3, #2
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153c:	f000 fce4 	bl	8001f08 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	2100      	movs	r1, #0
 8001544:	201d      	movs	r0, #29
 8001546:	f000 fc2a 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800154a:	201d      	movs	r0, #29
 800154c:	f000 fc43 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001550:	e010      	b.n	8001574 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM4)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <HAL_TIM_Base_MspInit+0xb8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d10b      	bne.n	8001574 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_TIM_Base_MspInit+0xb4>)
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_TIM_Base_MspInit+0xb4>)
 8001562:	f043 0304 	orr.w	r3, r3, #4
 8001566:	6593      	str	r3, [r2, #88]	; 0x58
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_TIM_Base_MspInit+0xb4>)
 800156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
}
 8001574:	bf00      	nop
 8001576:	3728      	adds	r7, #40	; 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40000400 	.word	0x40000400
 8001580:	40021000 	.word	0x40021000
 8001584:	40000800 	.word	0x40000800

08001588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b0ac      	sub	sp, #176	; 0xb0
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2288      	movs	r2, #136	; 0x88
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f004 fafb 	bl	8005ba4 <memset>
  if(huart->Instance==USART2)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a25      	ldr	r2, [pc, #148]	; (8001648 <HAL_UART_MspInit+0xc0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d143      	bne.n	8001640 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015b8:	2302      	movs	r3, #2
 80015ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015bc:	2300      	movs	r3, #0
 80015be:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 fcb1 	bl	8002f2c <HAL_RCCEx_PeriphCLKConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015d0:	f7ff ff52 	bl	8001478 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <HAL_UART_MspInit+0xc4>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	4a1c      	ldr	r2, [pc, #112]	; (800164c <HAL_UART_MspInit+0xc4>)
 80015da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015de:	6593      	str	r3, [r2, #88]	; 0x58
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <HAL_UART_MspInit+0xc4>)
 80015e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <HAL_UART_MspInit+0xc4>)
 80015ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f0:	4a16      	ldr	r2, [pc, #88]	; (800164c <HAL_UART_MspInit+0xc4>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_UART_MspInit+0xc4>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001604:	230c      	movs	r3, #12
 8001606:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800161c:	2307      	movs	r3, #7
 800161e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001626:	4619      	mov	r1, r3
 8001628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162c:	f000 fc6c 	bl	8001f08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001630:	2200      	movs	r2, #0
 8001632:	2100      	movs	r1, #0
 8001634:	2026      	movs	r0, #38	; 0x26
 8001636:	f000 fbb2 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800163a:	2026      	movs	r0, #38	; 0x26
 800163c:	f000 fbcb 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001640:	bf00      	nop
 8001642:	37b0      	adds	r7, #176	; 0xb0
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40004400 	.word	0x40004400
 800164c:	40021000 	.word	0x40021000

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <NMI_Handler+0x4>

08001656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <MemManage_Handler+0x4>

08001662 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <UsageFault_Handler+0x4>

0800166e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169c:	f000 fa60 	bl	8001b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <TIM3_IRQHandler+0x10>)
 80016aa:	f002 fc17 	bl	8003edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000468 	.word	0x20000468

080016b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <USART2_IRQHandler+0x10>)
 80016be:	f003 fbcb 	bl	8004e58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200004b4 	.word	0x200004b4

080016cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
	return 1;
 80016d0:	2301      	movs	r3, #1
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <_kill>:

int _kill(int pid, int sig)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016e6:	f004 fa33 	bl	8005b50 <__errno>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2216      	movs	r2, #22
 80016ee:	601a      	str	r2, [r3, #0]
	return -1;
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_exit>:

void _exit (int status)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ffe7 	bl	80016dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800170e:	e7fe      	b.n	800170e <_exit+0x12>

08001710 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	e00a      	b.n	8001738 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001722:	f3af 8000 	nop.w
 8001726:	4601      	mov	r1, r0
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	60ba      	str	r2, [r7, #8]
 800172e:	b2ca      	uxtb	r2, r1
 8001730:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	429a      	cmp	r2, r3
 800173e:	dbf0      	blt.n	8001722 <_read+0x12>
	}

return len;
 8001740:	687b      	ldr	r3, [r7, #4]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e009      	b.n	8001770 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	60ba      	str	r2, [r7, #8]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	dbf1      	blt.n	800175c <_write+0x12>
	}
	return len;
 8001778:	687b      	ldr	r3, [r7, #4]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_close>:

int _close(int file)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
	return -1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017aa:	605a      	str	r2, [r3, #4]
	return 0;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_isatty>:

int _isatty(int file)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
	return 1;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
	return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f4:	4a14      	ldr	r2, [pc, #80]	; (8001848 <_sbrk+0x5c>)
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <_sbrk+0x60>)
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <_sbrk+0x64>)
 800180a:	4a12      	ldr	r2, [pc, #72]	; (8001854 <_sbrk+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	429a      	cmp	r2, r3
 800181a:	d207      	bcs.n	800182c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800181c:	f004 f998 	bl	8005b50 <__errno>
 8001820:	4603      	mov	r3, r0
 8001822:	220c      	movs	r2, #12
 8001824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	e009      	b.n	8001840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <_sbrk+0x64>)
 800183c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20018000 	.word	0x20018000
 800184c:	00000400 	.word	0x00000400
 8001850:	20000200 	.word	0x20000200
 8001854:	20000550 	.word	0x20000550

08001858 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800185c:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <SystemInit+0x5c>)
 800185e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001862:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <SystemInit+0x5c>)
 8001864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <SystemInit+0x60>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <SystemInit+0x60>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <SystemInit+0x60>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <SystemInit+0x60>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <SystemInit+0x60>)
 8001884:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001888:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800188c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <SystemInit+0x60>)
 8001890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001894:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <SystemInit+0x60>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <SystemInit+0x60>)
 800189c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <SystemInit+0x60>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00
 80018b8:	40021000 	.word	0x40021000

080018bc <usDelay>:
uint32_t edge1 = 0, edge2 = 0;
uint8_t read_done = 0;
const float speed_of_sound = 0.343/2;
uint8_t tst = 0;

void usDelay(uint32_t uSec){
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
    usTIM.Instance->ARR = uSec - 1;
 80018c4:	4b17      	ldr	r3, [pc, #92]	; (8001924 <usDelay+0x68>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	3a01      	subs	r2, #1
 80018cc:	62da      	str	r2, [r3, #44]	; 0x2c
    usTIM.Instance->EGR = 1;
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <usDelay+0x68>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2201      	movs	r2, #1
 80018d4:	615a      	str	r2, [r3, #20]
    usTIM.Instance->SR &= ~TIM_SR_UIF_Msk;
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <usDelay+0x68>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <usDelay+0x68>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0201 	bic.w	r2, r2, #1
 80018e4:	611a      	str	r2, [r3, #16]
    usTIM.Instance->CR1 |= 1;
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <usDelay+0x68>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <usDelay+0x68>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 0201 	orr.w	r2, r2, #1
 80018f4:	601a      	str	r2, [r3, #0]
    while((usTIM.Instance->SR & TIM_SR_UIF_Msk) != 1);
 80018f6:	bf00      	nop
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <usDelay+0x68>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b01      	cmp	r3, #1
 8001904:	d1f8      	bne.n	80018f8 <usDelay+0x3c>
    usTIM.Instance->SR &= ~TIM_SR_UIF_Msk;
 8001906:	4b07      	ldr	r3, [pc, #28]	; (8001924 <usDelay+0x68>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <usDelay+0x68>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0201 	bic.w	r2, r2, #1
 8001914:	611a      	str	r2, [r3, #16]

}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	2000021c 	.word	0x2000021c

08001928 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
    if (echoNum == 0){
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10a      	bne.n	800194e <HAL_TIM_IC_CaptureCallback+0x26>
        edge1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001938:	2100      	movs	r1, #0
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f002 fd48 	bl	80043d0 <HAL_TIM_ReadCapturedValue>
 8001940:	4603      	mov	r3, r0
 8001942:	4a0e      	ldr	r2, [pc, #56]	; (800197c <HAL_TIM_IC_CaptureCallback+0x54>)
 8001944:	6013      	str	r3, [r2, #0]

        echoNum = 1;
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
        edge2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);

        echoNum = 0;
        read_done = 1;
    }
}
 800194c:	e010      	b.n	8001970 <HAL_TIM_IC_CaptureCallback+0x48>
    } else if (echoNum == 1){
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d10c      	bne.n	8001970 <HAL_TIM_IC_CaptureCallback+0x48>
        edge2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001956:	2100      	movs	r1, #0
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f002 fd39 	bl	80043d0 <HAL_TIM_ReadCapturedValue>
 800195e:	4603      	mov	r3, r0
 8001960:	4a07      	ldr	r2, [pc, #28]	; (8001980 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001962:	6013      	str	r3, [r2, #0]
        echoNum = 0;
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
        read_done = 1;
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800196c:	2201      	movs	r2, #1
 800196e:	701a      	strb	r2, [r3, #0]
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000204 	.word	0x20000204
 800197c:	20000208 	.word	0x20000208
 8001980:	2000020c 	.word	0x2000020c
 8001984:	20000210 	.word	0x20000210

08001988 <read_ultrasound>:
/**
  * @brief Function triggers a measurement with the ultrasound
  * @param None
  * @retval Distance in mm
  */
uint32_t read_ultrasound(void){
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800198e:	2200      	movs	r2, #0
 8001990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001998:	f000 fc60 	bl	800225c <HAL_GPIO_WritePin>
	usDelay(3);
 800199c:	2003      	movs	r0, #3
 800199e:	f7ff ff8d 	bl	80018bc <usDelay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 80019a2:	2201      	movs	r2, #1
 80019a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ac:	f000 fc56 	bl	800225c <HAL_GPIO_WritePin>
	usDelay(10);
 80019b0:	200a      	movs	r0, #10
 80019b2:	f7ff ff83 	bl	80018bc <usDelay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c0:	f000 fc4c 	bl	800225c <HAL_GPIO_WritePin>
	HAL_TIM_IC_Start_IT(&echoTIM, TIM_CHANNEL_1);
 80019c4:	2100      	movs	r1, #0
 80019c6:	481e      	ldr	r0, [pc, #120]	; (8001a40 <read_ultrasound+0xb8>)
 80019c8:	f002 f88e 	bl	8003ae8 <HAL_TIM_IC_Start_IT>
	uint32_t start = HAL_GetTick();
 80019cc:	f000 f8dc 	bl	8001b88 <HAL_GetTick>
 80019d0:	6038      	str	r0, [r7, #0]
	do {
		if (read_done == 1) break;
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <read_ultrasound+0xbc>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d007      	beq.n	80019ea <read_ultrasound+0x62>
	} while (HAL_GetTick() - start < 100);
 80019da:	f000 f8d5 	bl	8001b88 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b63      	cmp	r3, #99	; 0x63
 80019e6:	d9f4      	bls.n	80019d2 <read_ultrasound+0x4a>
 80019e8:	e000      	b.n	80019ec <read_ultrasound+0x64>
		if (read_done == 1) break;
 80019ea:	bf00      	nop
	read_done = 0;
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <read_ultrasound+0xbc>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Stop_IT(&echoTIM, TIM_CHANNEL_1);
 80019f2:	2100      	movs	r1, #0
 80019f4:	4812      	ldr	r0, [pc, #72]	; (8001a40 <read_ultrasound+0xb8>)
 80019f6:	f002 f9b9 	bl	8003d6c <HAL_TIM_IC_Stop_IT>
	uint32_t dist = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
	if (edge2 - edge1 < 25000){
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <read_ultrasound+0xc0>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <read_ultrasound+0xc4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d811      	bhi.n	8001a34 <read_ultrasound+0xac>
		dist = (edge2 - edge1) * speed_of_sound;
 8001a10:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <read_ultrasound+0xc0>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <read_ultrasound+0xc4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a22:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001a50 <read_ultrasound+0xc8>
 8001a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a2e:	ee17 3a90 	vmov	r3, s15
 8001a32:	607b      	str	r3, [r7, #4]
	}
	return dist;
 8001a34:	687b      	ldr	r3, [r7, #4]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000468 	.word	0x20000468
 8001a44:	20000210 	.word	0x20000210
 8001a48:	2000020c 	.word	0x2000020c
 8001a4c:	20000208 	.word	0x20000208
 8001a50:	3e2f9db2 	.word	0x3e2f9db2

08001a54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a58:	f7ff fefe 	bl	8001858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a5e:	e003      	b.n	8001a68 <LoopCopyDataInit>

08001a60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a66:	3104      	adds	r1, #4

08001a68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a68:	480a      	ldr	r0, [pc, #40]	; (8001a94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a70:	d3f6      	bcc.n	8001a60 <CopyDataInit>
	ldr	r2, =_sbss
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a74:	e002      	b.n	8001a7c <LoopFillZerobss>

08001a76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a78:	f842 3b04 	str.w	r3, [r2], #4

08001a7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <LoopForever+0x16>)
	cmp	r2, r3
 8001a7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a80:	d3f9      	bcc.n	8001a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a82:	f004 f86b 	bl	8005b5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a86:	f7ff fa0b 	bl	8000ea0 <main>

08001a8a <LoopForever>:

LoopForever:
    b LoopForever
 8001a8a:	e7fe      	b.n	8001a8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a8c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001a90:	08008dd4 	.word	0x08008dd4
	ldr	r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a98:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001a9c:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001aa0:	20000550 	.word	0x20000550

08001aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aa4:	e7fe      	b.n	8001aa4 <ADC1_2_IRQHandler>
	...

08001aa8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_Init+0x3c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <HAL_Init+0x3c>)
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abe:	2003      	movs	r0, #3
 8001ac0:	f000 f962 	bl	8001d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f000 f80f 	bl	8001ae8 <HAL_InitTick>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	71fb      	strb	r3, [r7, #7]
 8001ad4:	e001      	b.n	8001ada <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ad6:	f7ff fcd5 	bl	8001484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ada:	79fb      	ldrb	r3, [r7, #7]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40022000 	.word	0x40022000

08001ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001af4:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_InitTick+0x6c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d023      	beq.n	8001b44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <HAL_InitTick+0x70>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <HAL_InitTick+0x6c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f96d 	bl	8001df2 <HAL_SYSTICK_Config>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10f      	bne.n	8001b3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d809      	bhi.n	8001b38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f000 f937 	bl	8001d9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <HAL_InitTick+0x74>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e007      	b.n	8001b48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	e004      	b.n	8001b48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
 8001b42:	e001      	b.n	8001b48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000008 	.word	0x20000008
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	20000004 	.word	0x20000004

08001b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_IncTick+0x20>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_IncTick+0x24>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <HAL_IncTick+0x24>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000008 	.word	0x20000008
 8001b84:	2000053c 	.word	0x2000053c

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_GetTick+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	2000053c 	.word	0x2000053c

08001ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff ffee 	bl	8001b88 <HAL_GetTick>
 8001bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb8:	d005      	beq.n	8001bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_Delay+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bc6:	bf00      	nop
 8001bc8:	f7ff ffde 	bl	8001b88 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f7      	bhi.n	8001bc8 <HAL_Delay+0x28>
  {
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000008 	.word	0x20000008

08001be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <__NVIC_EnableIRQ+0x38>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db0a      	blt.n	8001cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <__NVIC_SetPriority+0x4c>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb0:	e00a      	b.n	8001cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4908      	ldr	r1, [pc, #32]	; (8001cd8 <__NVIC_SetPriority+0x50>)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	761a      	strb	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
         );
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d54:	d301      	bcc.n	8001d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00f      	b.n	8001d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <SysTick_Config+0x40>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d62:	210f      	movs	r1, #15
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f7ff ff8e 	bl	8001c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <SysTick_Config+0x40>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SysTick_Config+0x40>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff29 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff3e 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff8e 	bl	8001cdc <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff5d 	bl	8001c88 <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff31 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffa2 	bl	8001d44 <SysTick_Config>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b085      	sub	sp, #20
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d008      	beq.n	8001e34 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2204      	movs	r2, #4
 8001e26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e022      	b.n	8001e7a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 020e 	bic.w	r2, r2, #14
 8001e42:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e58:	f003 021c 	and.w	r2, r3, #28
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	2101      	movs	r1, #1
 8001e62:	fa01 f202 	lsl.w	r2, r1, r2
 8001e66:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d005      	beq.n	8001eaa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	e029      	b.n	8001efe <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 020e 	bic.w	r2, r2, #14
 8001eb8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0201 	bic.w	r2, r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f003 021c 	and.w	r2, r3, #28
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8001edc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	4798      	blx	r3
    }
  }
  return status;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f16:	e17f      	b.n	8002218 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	4013      	ands	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8171 	beq.w	8002212 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d00b      	beq.n	8001f50 <HAL_GPIO_Init+0x48>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d007      	beq.n	8001f50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f44:	2b11      	cmp	r3, #17
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b12      	cmp	r3, #18
 8001f4e:	d130      	bne.n	8001fb2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f86:	2201      	movs	r2, #1
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	f003 0201 	and.w	r2, r3, #1
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d118      	bne.n	8001ff0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	08db      	lsrs	r3, r3, #3
 8001fda:	f003 0201 	and.w	r2, r3, #1
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x128>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b12      	cmp	r3, #18
 800202e:	d123      	bne.n	8002078 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	08da      	lsrs	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3208      	adds	r2, #8
 8002038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	220f      	movs	r2, #15
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	08da      	lsrs	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3208      	adds	r2, #8
 8002072:	6939      	ldr	r1, [r7, #16]
 8002074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0203 	and.w	r2, r3, #3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80ac 	beq.w	8002212 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ba:	4b5f      	ldr	r3, [pc, #380]	; (8002238 <HAL_GPIO_Init+0x330>)
 80020bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020be:	4a5e      	ldr	r2, [pc, #376]	; (8002238 <HAL_GPIO_Init+0x330>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6613      	str	r3, [r2, #96]	; 0x60
 80020c6:	4b5c      	ldr	r3, [pc, #368]	; (8002238 <HAL_GPIO_Init+0x330>)
 80020c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020d2:	4a5a      	ldr	r2, [pc, #360]	; (800223c <HAL_GPIO_Init+0x334>)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	3302      	adds	r3, #2
 80020da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	220f      	movs	r2, #15
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020fc:	d025      	beq.n	800214a <HAL_GPIO_Init+0x242>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4f      	ldr	r2, [pc, #316]	; (8002240 <HAL_GPIO_Init+0x338>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01f      	beq.n	8002146 <HAL_GPIO_Init+0x23e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4e      	ldr	r2, [pc, #312]	; (8002244 <HAL_GPIO_Init+0x33c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d019      	beq.n	8002142 <HAL_GPIO_Init+0x23a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4d      	ldr	r2, [pc, #308]	; (8002248 <HAL_GPIO_Init+0x340>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_GPIO_Init+0x236>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4c      	ldr	r2, [pc, #304]	; (800224c <HAL_GPIO_Init+0x344>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d00d      	beq.n	800213a <HAL_GPIO_Init+0x232>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4b      	ldr	r2, [pc, #300]	; (8002250 <HAL_GPIO_Init+0x348>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d007      	beq.n	8002136 <HAL_GPIO_Init+0x22e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4a      	ldr	r2, [pc, #296]	; (8002254 <HAL_GPIO_Init+0x34c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_GPIO_Init+0x22a>
 800212e:	2306      	movs	r3, #6
 8002130:	e00c      	b.n	800214c <HAL_GPIO_Init+0x244>
 8002132:	2307      	movs	r3, #7
 8002134:	e00a      	b.n	800214c <HAL_GPIO_Init+0x244>
 8002136:	2305      	movs	r3, #5
 8002138:	e008      	b.n	800214c <HAL_GPIO_Init+0x244>
 800213a:	2304      	movs	r3, #4
 800213c:	e006      	b.n	800214c <HAL_GPIO_Init+0x244>
 800213e:	2303      	movs	r3, #3
 8002140:	e004      	b.n	800214c <HAL_GPIO_Init+0x244>
 8002142:	2302      	movs	r3, #2
 8002144:	e002      	b.n	800214c <HAL_GPIO_Init+0x244>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_GPIO_Init+0x244>
 800214a:	2300      	movs	r3, #0
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	f002 0203 	and.w	r2, r2, #3
 8002152:	0092      	lsls	r2, r2, #2
 8002154:	4093      	lsls	r3, r2
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800215c:	4937      	ldr	r1, [pc, #220]	; (800223c <HAL_GPIO_Init+0x334>)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	3302      	adds	r3, #2
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800216a:	4b3b      	ldr	r3, [pc, #236]	; (8002258 <HAL_GPIO_Init+0x350>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800218e:	4a32      	ldr	r2, [pc, #200]	; (8002258 <HAL_GPIO_Init+0x350>)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002194:	4b30      	ldr	r3, [pc, #192]	; (8002258 <HAL_GPIO_Init+0x350>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	43db      	mvns	r3, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021b8:	4a27      	ldr	r2, [pc, #156]	; (8002258 <HAL_GPIO_Init+0x350>)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021be:	4b26      	ldr	r3, [pc, #152]	; (8002258 <HAL_GPIO_Init+0x350>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021e2:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <HAL_GPIO_Init+0x350>)
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021e8:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_GPIO_Init+0x350>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800220c:	4a12      	ldr	r2, [pc, #72]	; (8002258 <HAL_GPIO_Init+0x350>)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3301      	adds	r3, #1
 8002216:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa22 f303 	lsr.w	r3, r2, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	f47f ae78 	bne.w	8001f18 <HAL_GPIO_Init+0x10>
  }
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	371c      	adds	r7, #28
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	40010000 	.word	0x40010000
 8002240:	48000400 	.word	0x48000400
 8002244:	48000800 	.word	0x48000800
 8002248:	48000c00 	.word	0x48000c00
 800224c:	48001000 	.word	0x48001000
 8002250:	48001400 	.word	0x48001400
 8002254:	48001800 	.word	0x48001800
 8002258:	40010400 	.word	0x40010400

0800225c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800226c:	787b      	ldrb	r3, [r7, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002278:	e002      	b.n	8002280 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40007000 	.word	0x40007000

080022a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b6:	d130      	bne.n	800231a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b8:	4b23      	ldr	r3, [pc, #140]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c4:	d038      	beq.n	8002338 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022ce:	4a1e      	ldr	r2, [pc, #120]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022d6:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2232      	movs	r2, #50	; 0x32
 80022dc:	fb02 f303 	mul.w	r3, r2, r3
 80022e0:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	0c9b      	lsrs	r3, r3, #18
 80022e8:	3301      	adds	r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ec:	e002      	b.n	80022f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022f4:	4b14      	ldr	r3, [pc, #80]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002300:	d102      	bne.n	8002308 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f2      	bne.n	80022ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002314:	d110      	bne.n	8002338 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e00f      	b.n	800233a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002326:	d007      	beq.n	8002338 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002330:	4a05      	ldr	r2, [pc, #20]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002332:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002336:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40007000 	.word	0x40007000
 800234c:	20000000 	.word	0x20000000
 8002350:	431bde83 	.word	0x431bde83

08002354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e3d4      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002366:	4ba1      	ldr	r3, [pc, #644]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002370:	4b9e      	ldr	r3, [pc, #632]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80e4 	beq.w	8002550 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d007      	beq.n	800239e <HAL_RCC_OscConfig+0x4a>
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	2b0c      	cmp	r3, #12
 8002392:	f040 808b 	bne.w	80024ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b01      	cmp	r3, #1
 800239a:	f040 8087 	bne.w	80024ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800239e:	4b93      	ldr	r3, [pc, #588]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_RCC_OscConfig+0x62>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e3ac      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1a      	ldr	r2, [r3, #32]
 80023ba:	4b8c      	ldr	r3, [pc, #560]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d004      	beq.n	80023d0 <HAL_RCC_OscConfig+0x7c>
 80023c6:	4b89      	ldr	r3, [pc, #548]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ce:	e005      	b.n	80023dc <HAL_RCC_OscConfig+0x88>
 80023d0:	4b86      	ldr	r3, [pc, #536]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80023d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023dc:	4293      	cmp	r3, r2
 80023de:	d223      	bcs.n	8002428 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fd41 	bl	8002e6c <RCC_SetFlashLatencyFromMSIRange>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e38d      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023f4:	4b7d      	ldr	r3, [pc, #500]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a7c      	ldr	r2, [pc, #496]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80023fa:	f043 0308 	orr.w	r3, r3, #8
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	4b7a      	ldr	r3, [pc, #488]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4977      	ldr	r1, [pc, #476]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002412:	4b76      	ldr	r3, [pc, #472]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	021b      	lsls	r3, r3, #8
 8002420:	4972      	ldr	r1, [pc, #456]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 8002422:	4313      	orrs	r3, r2
 8002424:	604b      	str	r3, [r1, #4]
 8002426:	e025      	b.n	8002474 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002428:	4b70      	ldr	r3, [pc, #448]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a6f      	ldr	r2, [pc, #444]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 800242e:	f043 0308 	orr.w	r3, r3, #8
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	4b6d      	ldr	r3, [pc, #436]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	496a      	ldr	r1, [pc, #424]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002446:	4b69      	ldr	r3, [pc, #420]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	4965      	ldr	r1, [pc, #404]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d109      	bne.n	8002474 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	4618      	mov	r0, r3
 8002466:	f000 fd01 	bl	8002e6c <RCC_SetFlashLatencyFromMSIRange>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e34d      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002474:	f000 fc36 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 8002478:	4602      	mov	r2, r0
 800247a:	4b5c      	ldr	r3, [pc, #368]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	495a      	ldr	r1, [pc, #360]	; (80025f0 <HAL_RCC_OscConfig+0x29c>)
 8002486:	5ccb      	ldrb	r3, [r1, r3]
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
 8002490:	4a58      	ldr	r2, [pc, #352]	; (80025f4 <HAL_RCC_OscConfig+0x2a0>)
 8002492:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002494:	4b58      	ldr	r3, [pc, #352]	; (80025f8 <HAL_RCC_OscConfig+0x2a4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fb25 	bl	8001ae8 <HAL_InitTick>
 800249e:	4603      	mov	r3, r0
 80024a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d052      	beq.n	800254e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	e331      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d032      	beq.n	800251a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024b4:	4b4d      	ldr	r3, [pc, #308]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a4c      	ldr	r2, [pc, #304]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fb62 	bl	8001b88 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024c8:	f7ff fb5e 	bl	8001b88 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e31a      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024da:	4b44      	ldr	r3, [pc, #272]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024e6:	4b41      	ldr	r3, [pc, #260]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a40      	ldr	r2, [pc, #256]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80024ec:	f043 0308 	orr.w	r3, r3, #8
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b3e      	ldr	r3, [pc, #248]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	493b      	ldr	r1, [pc, #236]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002504:	4b39      	ldr	r3, [pc, #228]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	4936      	ldr	r1, [pc, #216]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
 8002518:	e01a      	b.n	8002550 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800251a:	4b34      	ldr	r3, [pc, #208]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a33      	ldr	r2, [pc, #204]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002526:	f7ff fb2f 	bl	8001b88 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800252e:	f7ff fb2b 	bl	8001b88 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e2e7      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002540:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f0      	bne.n	800252e <HAL_RCC_OscConfig+0x1da>
 800254c:	e000      	b.n	8002550 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800254e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d074      	beq.n	8002646 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	2b08      	cmp	r3, #8
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x21a>
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b0c      	cmp	r3, #12
 8002566:	d10e      	bne.n	8002586 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b03      	cmp	r3, #3
 800256c:	d10b      	bne.n	8002586 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256e:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d064      	beq.n	8002644 <HAL_RCC_OscConfig+0x2f0>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d160      	bne.n	8002644 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e2c4      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258e:	d106      	bne.n	800259e <HAL_RCC_OscConfig+0x24a>
 8002590:	4b16      	ldr	r3, [pc, #88]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a15      	ldr	r2, [pc, #84]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 8002596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	e01d      	b.n	80025da <HAL_RCC_OscConfig+0x286>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a6:	d10c      	bne.n	80025c2 <HAL_RCC_OscConfig+0x26e>
 80025a8:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0f      	ldr	r2, [pc, #60]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80025ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0c      	ldr	r2, [pc, #48]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80025ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	e00b      	b.n	80025da <HAL_RCC_OscConfig+0x286>
 80025c2:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a09      	ldr	r2, [pc, #36]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80025c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a06      	ldr	r2, [pc, #24]	; (80025ec <HAL_RCC_OscConfig+0x298>)
 80025d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d01c      	beq.n	800261c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7ff fad1 	bl	8001b88 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025e8:	e011      	b.n	800260e <HAL_RCC_OscConfig+0x2ba>
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	08008994 	.word	0x08008994
 80025f4:	20000000 	.word	0x20000000
 80025f8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fc:	f7ff fac4 	bl	8001b88 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e280      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800260e:	4baf      	ldr	r3, [pc, #700]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x2a8>
 800261a:	e014      	b.n	8002646 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7ff fab4 	bl	8001b88 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002624:	f7ff fab0 	bl	8001b88 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e26c      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002636:	4ba5      	ldr	r3, [pc, #660]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x2d0>
 8002642:	e000      	b.n	8002646 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d060      	beq.n	8002714 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b04      	cmp	r3, #4
 8002656:	d005      	beq.n	8002664 <HAL_RCC_OscConfig+0x310>
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	2b0c      	cmp	r3, #12
 800265c:	d119      	bne.n	8002692 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d116      	bne.n	8002692 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002664:	4b99      	ldr	r3, [pc, #612]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_OscConfig+0x328>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e249      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267c:	4b93      	ldr	r3, [pc, #588]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	061b      	lsls	r3, r3, #24
 800268a:	4990      	ldr	r1, [pc, #576]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002690:	e040      	b.n	8002714 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d023      	beq.n	80026e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269a:	4b8c      	ldr	r3, [pc, #560]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a8b      	ldr	r2, [pc, #556]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a6:	f7ff fa6f 	bl	8001b88 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ae:	f7ff fa6b 	bl	8001b88 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e227      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c0:	4b82      	ldr	r3, [pc, #520]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026cc:	4b7f      	ldr	r3, [pc, #508]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	061b      	lsls	r3, r3, #24
 80026da:	497c      	ldr	r1, [pc, #496]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]
 80026e0:	e018      	b.n	8002714 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e2:	4b7a      	ldr	r3, [pc, #488]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a79      	ldr	r2, [pc, #484]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 80026e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ee:	f7ff fa4b 	bl	8001b88 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f6:	f7ff fa47 	bl	8001b88 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e203      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002708:	4b70      	ldr	r3, [pc, #448]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f0      	bne.n	80026f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d03c      	beq.n	800279a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01c      	beq.n	8002762 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002728:	4b68      	ldr	r3, [pc, #416]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 800272a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800272e:	4a67      	ldr	r2, [pc, #412]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002738:	f7ff fa26 	bl	8001b88 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002740:	f7ff fa22 	bl	8001b88 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e1de      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002752:	4b5e      	ldr	r3, [pc, #376]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 8002754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ef      	beq.n	8002740 <HAL_RCC_OscConfig+0x3ec>
 8002760:	e01b      	b.n	800279a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002762:	4b5a      	ldr	r3, [pc, #360]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 8002764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f7ff fa09 	bl	8001b88 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277a:	f7ff fa05 	bl	8001b88 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e1c1      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800278c:	4b4f      	ldr	r3, [pc, #316]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 800278e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1ef      	bne.n	800277a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 80a6 	beq.w	80028f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a8:	2300      	movs	r3, #0
 80027aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027ac:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 80027ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10d      	bne.n	80027d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b8:	4b44      	ldr	r3, [pc, #272]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 80027ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027bc:	4a43      	ldr	r2, [pc, #268]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 80027be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c2:	6593      	str	r3, [r2, #88]	; 0x58
 80027c4:	4b41      	ldr	r3, [pc, #260]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d0:	2301      	movs	r3, #1
 80027d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d4:	4b3e      	ldr	r3, [pc, #248]	; (80028d0 <HAL_RCC_OscConfig+0x57c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d118      	bne.n	8002812 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e0:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <HAL_RCC_OscConfig+0x57c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a3a      	ldr	r2, [pc, #232]	; (80028d0 <HAL_RCC_OscConfig+0x57c>)
 80027e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ec:	f7ff f9cc 	bl	8001b88 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f4:	f7ff f9c8 	bl	8001b88 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e184      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002806:	4b32      	ldr	r3, [pc, #200]	; (80028d0 <HAL_RCC_OscConfig+0x57c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d108      	bne.n	800282c <HAL_RCC_OscConfig+0x4d8>
 800281a:	4b2c      	ldr	r3, [pc, #176]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002820:	4a2a      	ldr	r2, [pc, #168]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800282a:	e024      	b.n	8002876 <HAL_RCC_OscConfig+0x522>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b05      	cmp	r3, #5
 8002832:	d110      	bne.n	8002856 <HAL_RCC_OscConfig+0x502>
 8002834:	4b25      	ldr	r3, [pc, #148]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283a:	4a24      	ldr	r2, [pc, #144]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 800283c:	f043 0304 	orr.w	r3, r3, #4
 8002840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002844:	4b21      	ldr	r3, [pc, #132]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	4a20      	ldr	r2, [pc, #128]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002854:	e00f      	b.n	8002876 <HAL_RCC_OscConfig+0x522>
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 8002858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285c:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002866:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286c:	4a17      	ldr	r2, [pc, #92]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 800286e:	f023 0304 	bic.w	r3, r3, #4
 8002872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d016      	beq.n	80028ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287e:	f7ff f983 	bl	8001b88 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7ff f97f 	bl	8001b88 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e139      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_OscConfig+0x578>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0ed      	beq.n	8002886 <HAL_RCC_OscConfig+0x532>
 80028aa:	e01a      	b.n	80028e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ac:	f7ff f96c 	bl	8001b88 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028b2:	e00f      	b.n	80028d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b4:	f7ff f968 	bl	8001b88 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d906      	bls.n	80028d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e122      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d4:	4b90      	ldr	r3, [pc, #576]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1e8      	bne.n	80028b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e2:	7ffb      	ldrb	r3, [r7, #31]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d105      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e8:	4b8b      	ldr	r3, [pc, #556]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 80028ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ec:	4a8a      	ldr	r2, [pc, #552]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 80028ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 8108 	beq.w	8002b0e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	2b02      	cmp	r3, #2
 8002904:	f040 80d0 	bne.w	8002aa8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002908:	4b83      	ldr	r3, [pc, #524]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f003 0203 	and.w	r2, r3, #3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	429a      	cmp	r2, r3
 800291a:	d130      	bne.n	800297e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	3b01      	subs	r3, #1
 8002928:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d127      	bne.n	800297e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002938:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800293a:	429a      	cmp	r2, r3
 800293c:	d11f      	bne.n	800297e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002948:	2a07      	cmp	r2, #7
 800294a:	bf14      	ite	ne
 800294c:	2201      	movne	r2, #1
 800294e:	2200      	moveq	r2, #0
 8002950:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002952:	4293      	cmp	r3, r2
 8002954:	d113      	bne.n	800297e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	085b      	lsrs	r3, r3, #1
 8002962:	3b01      	subs	r3, #1
 8002964:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d109      	bne.n	800297e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	085b      	lsrs	r3, r3, #1
 8002976:	3b01      	subs	r3, #1
 8002978:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d06e      	beq.n	8002a5c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	2b0c      	cmp	r3, #12
 8002982:	d069      	beq.n	8002a58 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002984:	4b64      	ldr	r3, [pc, #400]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002990:	4b61      	ldr	r3, [pc, #388]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0b7      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029a0:	4b5d      	ldr	r3, [pc, #372]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a5c      	ldr	r2, [pc, #368]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 80029a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029ac:	f7ff f8ec 	bl	8001b88 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b4:	f7ff f8e8 	bl	8001b88 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e0a4      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c6:	4b54      	ldr	r3, [pc, #336]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d2:	4b51      	ldr	r3, [pc, #324]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	4b51      	ldr	r3, [pc, #324]	; (8002b1c <HAL_RCC_OscConfig+0x7c8>)
 80029d8:	4013      	ands	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029e2:	3a01      	subs	r2, #1
 80029e4:	0112      	lsls	r2, r2, #4
 80029e6:	4311      	orrs	r1, r2
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029ec:	0212      	lsls	r2, r2, #8
 80029ee:	4311      	orrs	r1, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029f4:	0852      	lsrs	r2, r2, #1
 80029f6:	3a01      	subs	r2, #1
 80029f8:	0552      	lsls	r2, r2, #21
 80029fa:	4311      	orrs	r1, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a00:	0852      	lsrs	r2, r2, #1
 8002a02:	3a01      	subs	r2, #1
 8002a04:	0652      	lsls	r2, r2, #25
 8002a06:	4311      	orrs	r1, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a0c:	0912      	lsrs	r2, r2, #4
 8002a0e:	0452      	lsls	r2, r2, #17
 8002a10:	430a      	orrs	r2, r1
 8002a12:	4941      	ldr	r1, [pc, #260]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a18:	4b3f      	ldr	r3, [pc, #252]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a3e      	ldr	r2, [pc, #248]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002a1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a24:	4b3c      	ldr	r3, [pc, #240]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4a3b      	ldr	r2, [pc, #236]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a30:	f7ff f8aa 	bl	8001b88 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a38:	f7ff f8a6 	bl	8001b88 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e062      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4a:	4b33      	ldr	r3, [pc, #204]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a56:	e05a      	b.n	8002b0e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e059      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5c:	4b2e      	ldr	r3, [pc, #184]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d152      	bne.n	8002b0e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a68:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a2a      	ldr	r2, [pc, #168]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a74:	4b28      	ldr	r3, [pc, #160]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a27      	ldr	r2, [pc, #156]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a80:	f7ff f882 	bl	8001b88 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a88:	f7ff f87e 	bl	8001b88 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e03a      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9a:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x734>
 8002aa6:	e032      	b.n	8002b0e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	d02d      	beq.n	8002b0a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aae:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a19      	ldr	r2, [pc, #100]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002ab4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ab8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002aba:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d105      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ac6:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	4a13      	ldr	r2, [pc, #76]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002acc:	f023 0303 	bic.w	r3, r3, #3
 8002ad0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	4a10      	ldr	r2, [pc, #64]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002ad8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7ff f851 	bl	8001b88 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aea:	f7ff f84d 	bl	8001b88 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e009      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_RCC_OscConfig+0x7c4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x796>
 8002b08:	e001      	b.n	8002b0e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3720      	adds	r7, #32
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	f99d808c 	.word	0xf99d808c

08002b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0c8      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b34:	4b66      	ldr	r3, [pc, #408]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d910      	bls.n	8002b64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b42:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 0207 	bic.w	r2, r3, #7
 8002b4a:	4961      	ldr	r1, [pc, #388]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b52:	4b5f      	ldr	r3, [pc, #380]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0b0      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d04c      	beq.n	8002c0a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d107      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b78:	4b56      	ldr	r3, [pc, #344]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d121      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e09e      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d107      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b90:	4b50      	ldr	r3, [pc, #320]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d115      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e092      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d107      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ba8:	4b4a      	ldr	r3, [pc, #296]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d109      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e086      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bb8:	4b46      	ldr	r3, [pc, #280]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e07e      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bc8:	4b42      	ldr	r3, [pc, #264]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f023 0203 	bic.w	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	493f      	ldr	r1, [pc, #252]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bda:	f7fe ffd5 	bl	8001b88 <HAL_GetTick>
 8002bde:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be2:	f7fe ffd1 	bl	8001b88 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e066      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf8:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 020c 	and.w	r2, r3, #12
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d1eb      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c16:	4b2f      	ldr	r3, [pc, #188]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	492c      	ldr	r1, [pc, #176]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c28:	4b29      	ldr	r3, [pc, #164]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d210      	bcs.n	8002c58 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 0207 	bic.w	r2, r3, #7
 8002c3e:	4924      	ldr	r1, [pc, #144]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e036      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c64:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4918      	ldr	r1, [pc, #96]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c82:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4910      	ldr	r1, [pc, #64]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c96:	f000 f825 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	490c      	ldr	r1, [pc, #48]	; (8002cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	5ccb      	ldrb	r3, [r1, r3]
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe ff14 	bl	8001ae8 <HAL_InitTick>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cc4:	7afb      	ldrb	r3, [r7, #11]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40022000 	.word	0x40022000
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	08008994 	.word	0x08008994
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	20000004 	.word	0x20000004

08002ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	; 0x24
 8002ce8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf2:	4b3e      	ldr	r3, [pc, #248]	; (8002dec <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cfc:	4b3b      	ldr	r3, [pc, #236]	; (8002dec <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x34>
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	2b0c      	cmp	r3, #12
 8002d10:	d121      	bne.n	8002d56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d11e      	bne.n	8002d56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d18:	4b34      	ldr	r3, [pc, #208]	; (8002dec <HAL_RCC_GetSysClockFreq+0x108>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d107      	bne.n	8002d34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d24:	4b31      	ldr	r3, [pc, #196]	; (8002dec <HAL_RCC_GetSysClockFreq+0x108>)
 8002d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d2a:	0a1b      	lsrs	r3, r3, #8
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	e005      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d34:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <HAL_RCC_GetSysClockFreq+0x108>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d40:	4a2b      	ldr	r2, [pc, #172]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10d      	bne.n	8002d6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d102      	bne.n	8002d62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d5c:	4b25      	ldr	r3, [pc, #148]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	e004      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d68:	4b23      	ldr	r3, [pc, #140]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2b0c      	cmp	r3, #12
 8002d70:	d134      	bne.n	8002ddc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d72:	4b1e      	ldr	r3, [pc, #120]	; (8002dec <HAL_RCC_GetSysClockFreq+0x108>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d003      	beq.n	8002d8a <HAL_RCC_GetSysClockFreq+0xa6>
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d003      	beq.n	8002d90 <HAL_RCC_GetSysClockFreq+0xac>
 8002d88:	e005      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d8c:	617b      	str	r3, [r7, #20]
      break;
 8002d8e:	e005      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d92:	617b      	str	r3, [r7, #20]
      break;
 8002d94:	e002      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	617b      	str	r3, [r7, #20]
      break;
 8002d9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d9c:	4b13      	ldr	r3, [pc, #76]	; (8002dec <HAL_RCC_GetSysClockFreq+0x108>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	3301      	adds	r3, #1
 8002da8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002daa:	4b10      	ldr	r3, [pc, #64]	; (8002dec <HAL_RCC_GetSysClockFreq+0x108>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	0a1b      	lsrs	r3, r3, #8
 8002db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	fb02 f203 	mul.w	r2, r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	0e5b      	lsrs	r3, r3, #25
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	3301      	adds	r3, #1
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ddc:	69bb      	ldr	r3, [r7, #24]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3724      	adds	r7, #36	; 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	080089ac 	.word	0x080089ac
 8002df4:	00f42400 	.word	0x00f42400
 8002df8:	007a1200 	.word	0x007a1200

08002dfc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e00:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e02:	681b      	ldr	r3, [r3, #0]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	20000000 	.word	0x20000000

08002e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e18:	f7ff fff0 	bl	8002dfc <HAL_RCC_GetHCLKFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	0a1b      	lsrs	r3, r3, #8
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	4904      	ldr	r1, [pc, #16]	; (8002e3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e2a:	5ccb      	ldrb	r3, [r1, r3]
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	080089a4 	.word	0x080089a4

08002e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e44:	f7ff ffda 	bl	8002dfc <HAL_RCC_GetHCLKFreq>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	0adb      	lsrs	r3, r3, #11
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4904      	ldr	r1, [pc, #16]	; (8002e68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e56:	5ccb      	ldrb	r3, [r1, r3]
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40021000 	.word	0x40021000
 8002e68:	080089a4 	.word	0x080089a4

08002e6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e74:	2300      	movs	r3, #0
 8002e76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e78:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e84:	f7ff fa02 	bl	800228c <HAL_PWREx_GetVoltageRange>
 8002e88:	6178      	str	r0, [r7, #20]
 8002e8a:	e014      	b.n	8002eb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e8c:	4b25      	ldr	r3, [pc, #148]	; (8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e90:	4a24      	ldr	r2, [pc, #144]	; (8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e96:	6593      	str	r3, [r2, #88]	; 0x58
 8002e98:	4b22      	ldr	r3, [pc, #136]	; (8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ea4:	f7ff f9f2 	bl	800228c <HAL_PWREx_GetVoltageRange>
 8002ea8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eaa:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ebc:	d10b      	bne.n	8002ed6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b80      	cmp	r3, #128	; 0x80
 8002ec2:	d919      	bls.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2ba0      	cmp	r3, #160	; 0xa0
 8002ec8:	d902      	bls.n	8002ed0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eca:	2302      	movs	r3, #2
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	e013      	b.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	e010      	b.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b80      	cmp	r3, #128	; 0x80
 8002eda:	d902      	bls.n	8002ee2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002edc:	2303      	movs	r3, #3
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	e00a      	b.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b80      	cmp	r3, #128	; 0x80
 8002ee6:	d102      	bne.n	8002eee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ee8:	2302      	movs	r3, #2
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	e004      	b.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b70      	cmp	r3, #112	; 0x70
 8002ef2:	d101      	bne.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 0207 	bic.w	r2, r3, #7
 8002f00:	4909      	ldr	r1, [pc, #36]	; (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f08:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d001      	beq.n	8002f1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40022000 	.word	0x40022000

08002f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f34:	2300      	movs	r3, #0
 8002f36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f38:	2300      	movs	r3, #0
 8002f3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d041      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f50:	d02a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f52:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f56:	d824      	bhi.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f5c:	d008      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f62:	d81e      	bhi.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f6c:	d010      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f6e:	e018      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f70:	4b86      	ldr	r3, [pc, #536]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4a85      	ldr	r2, [pc, #532]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f7c:	e015      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3304      	adds	r3, #4
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 fabb 	bl	8003500 <RCCEx_PLLSAI1_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f8e:	e00c      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3320      	adds	r3, #32
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fba6 	bl	80036e8 <RCCEx_PLLSAI2_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa0:	e003      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	74fb      	strb	r3, [r7, #19]
      break;
 8002fa6:	e000      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002faa:	7cfb      	ldrb	r3, [r7, #19]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10b      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fb0:	4b76      	ldr	r3, [pc, #472]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fbe:	4973      	ldr	r1, [pc, #460]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fc6:	e001      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d041      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fdc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fe0:	d02a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002fe2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fe6:	d824      	bhi.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fe8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fec:	d008      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002fee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ff2:	d81e      	bhi.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ffc:	d010      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ffe:	e018      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003000:	4b62      	ldr	r3, [pc, #392]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4a61      	ldr	r2, [pc, #388]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800300c:	e015      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3304      	adds	r3, #4
 8003012:	2100      	movs	r1, #0
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fa73 	bl	8003500 <RCCEx_PLLSAI1_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800301e:	e00c      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3320      	adds	r3, #32
 8003024:	2100      	movs	r1, #0
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fb5e 	bl	80036e8 <RCCEx_PLLSAI2_Config>
 800302c:	4603      	mov	r3, r0
 800302e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003030:	e003      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	74fb      	strb	r3, [r7, #19]
      break;
 8003036:	e000      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303a:	7cfb      	ldrb	r3, [r7, #19]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10b      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003040:	4b52      	ldr	r3, [pc, #328]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800304e:	494f      	ldr	r1, [pc, #316]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003056:	e001      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80a0 	beq.w	80031aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800306e:	4b47      	ldr	r3, [pc, #284]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800307e:	2300      	movs	r3, #0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00d      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003084:	4b41      	ldr	r3, [pc, #260]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	4a40      	ldr	r2, [pc, #256]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308e:	6593      	str	r3, [r2, #88]	; 0x58
 8003090:	4b3e      	ldr	r3, [pc, #248]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800309c:	2301      	movs	r3, #1
 800309e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a0:	4b3b      	ldr	r3, [pc, #236]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a3a      	ldr	r2, [pc, #232]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ac:	f7fe fd6c 	bl	8001b88 <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030b2:	e009      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b4:	f7fe fd68 	bl	8001b88 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d902      	bls.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	74fb      	strb	r3, [r7, #19]
        break;
 80030c6:	e005      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030c8:	4b31      	ldr	r3, [pc, #196]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0ef      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d15c      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030da:	4b2c      	ldr	r3, [pc, #176]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01f      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d019      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030f8:	4b24      	ldr	r3, [pc, #144]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003102:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003104:	4b21      	ldr	r3, [pc, #132]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310a:	4a20      	ldr	r2, [pc, #128]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003114:	4b1d      	ldr	r3, [pc, #116]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311a:	4a1c      	ldr	r2, [pc, #112]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003124:	4a19      	ldr	r2, [pc, #100]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d016      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003136:	f7fe fd27 	bl	8001b88 <HAL_GetTick>
 800313a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313c:	e00b      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f7fe fd23 	bl	8001b88 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f241 3288 	movw	r2, #5000	; 0x1388
 800314c:	4293      	cmp	r3, r2
 800314e:	d902      	bls.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	74fb      	strb	r3, [r7, #19]
            break;
 8003154:	e006      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003156:	4b0d      	ldr	r3, [pc, #52]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ec      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003164:	7cfb      	ldrb	r3, [r7, #19]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10c      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316a:	4b08      	ldr	r3, [pc, #32]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317a:	4904      	ldr	r1, [pc, #16]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003182:	e009      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003184:	7cfb      	ldrb	r3, [r7, #19]
 8003186:	74bb      	strb	r3, [r7, #18]
 8003188:	e006      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
 8003190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003198:	7c7b      	ldrb	r3, [r7, #17]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d105      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319e:	4b9e      	ldr	r3, [pc, #632]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	4a9d      	ldr	r2, [pc, #628]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031b6:	4b98      	ldr	r3, [pc, #608]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	f023 0203 	bic.w	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	4994      	ldr	r1, [pc, #592]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031d8:	4b8f      	ldr	r3, [pc, #572]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	f023 020c 	bic.w	r2, r3, #12
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	498c      	ldr	r1, [pc, #560]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031fa:	4b87      	ldr	r3, [pc, #540]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003200:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	4983      	ldr	r1, [pc, #524]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800321c:	4b7e      	ldr	r3, [pc, #504]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	497b      	ldr	r1, [pc, #492]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800323e:	4b76      	ldr	r3, [pc, #472]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324c:	4972      	ldr	r1, [pc, #456]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003260:	4b6d      	ldr	r3, [pc, #436]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326e:	496a      	ldr	r1, [pc, #424]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003282:	4b65      	ldr	r3, [pc, #404]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003288:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003290:	4961      	ldr	r1, [pc, #388]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032a4:	4b5c      	ldr	r3, [pc, #368]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b2:	4959      	ldr	r1, [pc, #356]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032c6:	4b54      	ldr	r3, [pc, #336]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d4:	4950      	ldr	r1, [pc, #320]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032e8:	4b4b      	ldr	r3, [pc, #300]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f6:	4948      	ldr	r1, [pc, #288]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800330a:	4b43      	ldr	r3, [pc, #268]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003310:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003318:	493f      	ldr	r1, [pc, #252]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d028      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800332c:	4b3a      	ldr	r3, [pc, #232]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800333a:	4937      	ldr	r1, [pc, #220]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800334a:	d106      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800334c:	4b32      	ldr	r3, [pc, #200]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4a31      	ldr	r2, [pc, #196]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003356:	60d3      	str	r3, [r2, #12]
 8003358:	e011      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800335e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003362:	d10c      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3304      	adds	r3, #4
 8003368:	2101      	movs	r1, #1
 800336a:	4618      	mov	r0, r3
 800336c:	f000 f8c8 	bl	8003500 <RCCEx_PLLSAI1_Config>
 8003370:	4603      	mov	r3, r0
 8003372:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800337a:	7cfb      	ldrb	r3, [r7, #19]
 800337c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d028      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800338a:	4b23      	ldr	r3, [pc, #140]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003390:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	491f      	ldr	r1, [pc, #124]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033a8:	d106      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033aa:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	4a1a      	ldr	r2, [pc, #104]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033b4:	60d3      	str	r3, [r2, #12]
 80033b6:	e011      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2101      	movs	r1, #1
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 f899 	bl	8003500 <RCCEx_PLLSAI1_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033d2:	7cfb      	ldrb	r3, [r7, #19]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d02b      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f6:	4908      	ldr	r1, [pc, #32]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003406:	d109      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4a02      	ldr	r2, [pc, #8]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003412:	60d3      	str	r3, [r2, #12]
 8003414:	e014      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003420:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003424:	d10c      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3304      	adds	r3, #4
 800342a:	2101      	movs	r1, #1
 800342c:	4618      	mov	r0, r3
 800342e:	f000 f867 	bl	8003500 <RCCEx_PLLSAI1_Config>
 8003432:	4603      	mov	r3, r0
 8003434:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003436:	7cfb      	ldrb	r3, [r7, #19]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d02f      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800344c:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800345a:	4928      	ldr	r1, [pc, #160]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800346a:	d10d      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3304      	adds	r3, #4
 8003470:	2102      	movs	r1, #2
 8003472:	4618      	mov	r0, r3
 8003474:	f000 f844 	bl	8003500 <RCCEx_PLLSAI1_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800347c:	7cfb      	ldrb	r3, [r7, #19]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d014      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003482:	7cfb      	ldrb	r3, [r7, #19]
 8003484:	74bb      	strb	r3, [r7, #18]
 8003486:	e011      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800348c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003490:	d10c      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3320      	adds	r3, #32
 8003496:	2102      	movs	r1, #2
 8003498:	4618      	mov	r0, r3
 800349a:	f000 f925 	bl	80036e8 <RCCEx_PLLSAI2_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034a2:	7cfb      	ldrb	r3, [r7, #19]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034b8:	4b10      	ldr	r3, [pc, #64]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034c6:	490d      	ldr	r1, [pc, #52]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034da:	4b08      	ldr	r3, [pc, #32]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ea:	4904      	ldr	r1, [pc, #16]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40021000 	.word	0x40021000

08003500 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800350e:	4b75      	ldr	r3, [pc, #468]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d018      	beq.n	800354c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800351a:	4b72      	ldr	r3, [pc, #456]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f003 0203 	and.w	r2, r3, #3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d10d      	bne.n	8003546 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
       ||
 800352e:	2b00      	cmp	r3, #0
 8003530:	d009      	beq.n	8003546 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003532:	4b6c      	ldr	r3, [pc, #432]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	091b      	lsrs	r3, r3, #4
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
       ||
 8003542:	429a      	cmp	r2, r3
 8003544:	d047      	beq.n	80035d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
 800354a:	e044      	b.n	80035d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d018      	beq.n	8003586 <RCCEx_PLLSAI1_Config+0x86>
 8003554:	2b03      	cmp	r3, #3
 8003556:	d825      	bhi.n	80035a4 <RCCEx_PLLSAI1_Config+0xa4>
 8003558:	2b01      	cmp	r3, #1
 800355a:	d002      	beq.n	8003562 <RCCEx_PLLSAI1_Config+0x62>
 800355c:	2b02      	cmp	r3, #2
 800355e:	d009      	beq.n	8003574 <RCCEx_PLLSAI1_Config+0x74>
 8003560:	e020      	b.n	80035a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003562:	4b60      	ldr	r3, [pc, #384]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d11d      	bne.n	80035aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003572:	e01a      	b.n	80035aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003574:	4b5b      	ldr	r3, [pc, #364]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357c:	2b00      	cmp	r3, #0
 800357e:	d116      	bne.n	80035ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003584:	e013      	b.n	80035ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003586:	4b57      	ldr	r3, [pc, #348]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10f      	bne.n	80035b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003592:	4b54      	ldr	r3, [pc, #336]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035a2:	e006      	b.n	80035b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
      break;
 80035a8:	e004      	b.n	80035b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035aa:	bf00      	nop
 80035ac:	e002      	b.n	80035b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035ae:	bf00      	nop
 80035b0:	e000      	b.n	80035b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10d      	bne.n	80035d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035ba:	4b4a      	ldr	r3, [pc, #296]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6819      	ldr	r1, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	430b      	orrs	r3, r1
 80035d0:	4944      	ldr	r1, [pc, #272]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d17d      	bne.n	80036d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035dc:	4b41      	ldr	r3, [pc, #260]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a40      	ldr	r2, [pc, #256]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e8:	f7fe face 	bl	8001b88 <HAL_GetTick>
 80035ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035ee:	e009      	b.n	8003604 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035f0:	f7fe faca 	bl	8001b88 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d902      	bls.n	8003604 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	73fb      	strb	r3, [r7, #15]
        break;
 8003602:	e005      	b.n	8003610 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003604:	4b37      	ldr	r3, [pc, #220]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ef      	bne.n	80035f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d160      	bne.n	80036d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d111      	bne.n	8003640 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800361c:	4b31      	ldr	r3, [pc, #196]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6892      	ldr	r2, [r2, #8]
 800362c:	0211      	lsls	r1, r2, #8
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68d2      	ldr	r2, [r2, #12]
 8003632:	0912      	lsrs	r2, r2, #4
 8003634:	0452      	lsls	r2, r2, #17
 8003636:	430a      	orrs	r2, r1
 8003638:	492a      	ldr	r1, [pc, #168]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363a:	4313      	orrs	r3, r2
 800363c:	610b      	str	r3, [r1, #16]
 800363e:	e027      	b.n	8003690 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d112      	bne.n	800366c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003646:	4b27      	ldr	r3, [pc, #156]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800364e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6892      	ldr	r2, [r2, #8]
 8003656:	0211      	lsls	r1, r2, #8
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6912      	ldr	r2, [r2, #16]
 800365c:	0852      	lsrs	r2, r2, #1
 800365e:	3a01      	subs	r2, #1
 8003660:	0552      	lsls	r2, r2, #21
 8003662:	430a      	orrs	r2, r1
 8003664:	491f      	ldr	r1, [pc, #124]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003666:	4313      	orrs	r3, r2
 8003668:	610b      	str	r3, [r1, #16]
 800366a:	e011      	b.n	8003690 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800366c:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003674:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6892      	ldr	r2, [r2, #8]
 800367c:	0211      	lsls	r1, r2, #8
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6952      	ldr	r2, [r2, #20]
 8003682:	0852      	lsrs	r2, r2, #1
 8003684:	3a01      	subs	r2, #1
 8003686:	0652      	lsls	r2, r2, #25
 8003688:	430a      	orrs	r2, r1
 800368a:	4916      	ldr	r1, [pc, #88]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368c:	4313      	orrs	r3, r2
 800368e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003690:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a13      	ldr	r2, [pc, #76]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003696:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800369a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fe fa74 	bl	8001b88 <HAL_GetTick>
 80036a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036a2:	e009      	b.n	80036b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036a4:	f7fe fa70 	bl	8001b88 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d902      	bls.n	80036b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	73fb      	strb	r3, [r7, #15]
          break;
 80036b6:	e005      	b.n	80036c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036b8:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0ef      	beq.n	80036a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d106      	bne.n	80036d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036ca:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	4904      	ldr	r1, [pc, #16]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000

080036e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036f6:	4b6a      	ldr	r3, [pc, #424]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d018      	beq.n	8003734 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003702:	4b67      	ldr	r3, [pc, #412]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f003 0203 	and.w	r2, r3, #3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d10d      	bne.n	800372e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
       ||
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800371a:	4b61      	ldr	r3, [pc, #388]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	091b      	lsrs	r3, r3, #4
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
       ||
 800372a:	429a      	cmp	r2, r3
 800372c:	d047      	beq.n	80037be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
 8003732:	e044      	b.n	80037be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b03      	cmp	r3, #3
 800373a:	d018      	beq.n	800376e <RCCEx_PLLSAI2_Config+0x86>
 800373c:	2b03      	cmp	r3, #3
 800373e:	d825      	bhi.n	800378c <RCCEx_PLLSAI2_Config+0xa4>
 8003740:	2b01      	cmp	r3, #1
 8003742:	d002      	beq.n	800374a <RCCEx_PLLSAI2_Config+0x62>
 8003744:	2b02      	cmp	r3, #2
 8003746:	d009      	beq.n	800375c <RCCEx_PLLSAI2_Config+0x74>
 8003748:	e020      	b.n	800378c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800374a:	4b55      	ldr	r3, [pc, #340]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d11d      	bne.n	8003792 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375a:	e01a      	b.n	8003792 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800375c:	4b50      	ldr	r3, [pc, #320]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003764:	2b00      	cmp	r3, #0
 8003766:	d116      	bne.n	8003796 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800376c:	e013      	b.n	8003796 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800376e:	4b4c      	ldr	r3, [pc, #304]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10f      	bne.n	800379a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800377a:	4b49      	ldr	r3, [pc, #292]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800378a:	e006      	b.n	800379a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      break;
 8003790:	e004      	b.n	800379c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003792:	bf00      	nop
 8003794:	e002      	b.n	800379c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003796:	bf00      	nop
 8003798:	e000      	b.n	800379c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800379a:	bf00      	nop
    }

    if(status == HAL_OK)
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10d      	bne.n	80037be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037a2:	4b3f      	ldr	r3, [pc, #252]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6819      	ldr	r1, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	430b      	orrs	r3, r1
 80037b8:	4939      	ldr	r1, [pc, #228]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037be:	7bfb      	ldrb	r3, [r7, #15]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d167      	bne.n	8003894 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037c4:	4b36      	ldr	r3, [pc, #216]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a35      	ldr	r2, [pc, #212]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d0:	f7fe f9da 	bl	8001b88 <HAL_GetTick>
 80037d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037d6:	e009      	b.n	80037ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037d8:	f7fe f9d6 	bl	8001b88 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d902      	bls.n	80037ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	73fb      	strb	r3, [r7, #15]
        break;
 80037ea:	e005      	b.n	80037f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037ec:	4b2c      	ldr	r3, [pc, #176]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ef      	bne.n	80037d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d14a      	bne.n	8003894 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d111      	bne.n	8003828 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003804:	4b26      	ldr	r3, [pc, #152]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800380c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6892      	ldr	r2, [r2, #8]
 8003814:	0211      	lsls	r1, r2, #8
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	68d2      	ldr	r2, [r2, #12]
 800381a:	0912      	lsrs	r2, r2, #4
 800381c:	0452      	lsls	r2, r2, #17
 800381e:	430a      	orrs	r2, r1
 8003820:	491f      	ldr	r1, [pc, #124]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003822:	4313      	orrs	r3, r2
 8003824:	614b      	str	r3, [r1, #20]
 8003826:	e011      	b.n	800384c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003828:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003830:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6892      	ldr	r2, [r2, #8]
 8003838:	0211      	lsls	r1, r2, #8
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6912      	ldr	r2, [r2, #16]
 800383e:	0852      	lsrs	r2, r2, #1
 8003840:	3a01      	subs	r2, #1
 8003842:	0652      	lsls	r2, r2, #25
 8003844:	430a      	orrs	r2, r1
 8003846:	4916      	ldr	r1, [pc, #88]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003848:	4313      	orrs	r3, r2
 800384a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800384c:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a13      	ldr	r2, [pc, #76]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003856:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003858:	f7fe f996 	bl	8001b88 <HAL_GetTick>
 800385c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800385e:	e009      	b.n	8003874 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003860:	f7fe f992 	bl	8001b88 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d902      	bls.n	8003874 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	73fb      	strb	r3, [r7, #15]
          break;
 8003872:	e005      	b.n	8003880 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003874:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0ef      	beq.n	8003860 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003886:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	4904      	ldr	r1, [pc, #16]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003890:	4313      	orrs	r3, r2
 8003892:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003894:	7bfb      	ldrb	r3, [r7, #15]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000

080038a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e049      	b.n	800394a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fd fdfe 	bl	80014cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3304      	adds	r3, #4
 80038e0:	4619      	mov	r1, r3
 80038e2:	4610      	mov	r0, r2
 80038e4:	f000 fde0 	bl	80044a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b01      	cmp	r3, #1
 8003966:	d001      	beq.n	800396c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e047      	b.n	80039fc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a23      	ldr	r2, [pc, #140]	; (8003a08 <HAL_TIM_Base_Start+0xb4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d01d      	beq.n	80039ba <HAL_TIM_Base_Start+0x66>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003986:	d018      	beq.n	80039ba <HAL_TIM_Base_Start+0x66>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1f      	ldr	r2, [pc, #124]	; (8003a0c <HAL_TIM_Base_Start+0xb8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d013      	beq.n	80039ba <HAL_TIM_Base_Start+0x66>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1e      	ldr	r2, [pc, #120]	; (8003a10 <HAL_TIM_Base_Start+0xbc>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00e      	beq.n	80039ba <HAL_TIM_Base_Start+0x66>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a1c      	ldr	r2, [pc, #112]	; (8003a14 <HAL_TIM_Base_Start+0xc0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d009      	beq.n	80039ba <HAL_TIM_Base_Start+0x66>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a1b      	ldr	r2, [pc, #108]	; (8003a18 <HAL_TIM_Base_Start+0xc4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d004      	beq.n	80039ba <HAL_TIM_Base_Start+0x66>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a19      	ldr	r2, [pc, #100]	; (8003a1c <HAL_TIM_Base_Start+0xc8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d115      	bne.n	80039e6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <HAL_TIM_Base_Start+0xcc>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b06      	cmp	r3, #6
 80039ca:	d015      	beq.n	80039f8 <HAL_TIM_Base_Start+0xa4>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d2:	d011      	beq.n	80039f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e4:	e008      	b.n	80039f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0201 	orr.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e000      	b.n	80039fa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	40000400 	.word	0x40000400
 8003a10:	40000800 	.word	0x40000800
 8003a14:	40000c00 	.word	0x40000c00
 8003a18:	40013400 	.word	0x40013400
 8003a1c:	40014000 	.word	0x40014000
 8003a20:	00010007 	.word	0x00010007

08003a24 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e049      	b.n	8003aca <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f841 	bl	8003ad2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4619      	mov	r1, r3
 8003a62:	4610      	mov	r0, r2
 8003a64:	f000 fd20 	bl	80044a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
	...

08003ae8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d104      	bne.n	8003b02 <HAL_TIM_IC_Start_IT+0x1a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	e023      	b.n	8003b4a <HAL_TIM_IC_Start_IT+0x62>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d104      	bne.n	8003b12 <HAL_TIM_IC_Start_IT+0x2a>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	e01b      	b.n	8003b4a <HAL_TIM_IC_Start_IT+0x62>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d104      	bne.n	8003b22 <HAL_TIM_IC_Start_IT+0x3a>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	e013      	b.n	8003b4a <HAL_TIM_IC_Start_IT+0x62>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b0c      	cmp	r3, #12
 8003b26:	d104      	bne.n	8003b32 <HAL_TIM_IC_Start_IT+0x4a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	e00b      	b.n	8003b4a <HAL_TIM_IC_Start_IT+0x62>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b10      	cmp	r3, #16
 8003b36:	d104      	bne.n	8003b42 <HAL_TIM_IC_Start_IT+0x5a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	e003      	b.n	8003b4a <HAL_TIM_IC_Start_IT+0x62>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d104      	bne.n	8003b5c <HAL_TIM_IC_Start_IT+0x74>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	e013      	b.n	8003b84 <HAL_TIM_IC_Start_IT+0x9c>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d104      	bne.n	8003b6c <HAL_TIM_IC_Start_IT+0x84>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	e00b      	b.n	8003b84 <HAL_TIM_IC_Start_IT+0x9c>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d104      	bne.n	8003b7c <HAL_TIM_IC_Start_IT+0x94>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	e003      	b.n	8003b84 <HAL_TIM_IC_Start_IT+0x9c>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d102      	bne.n	8003b92 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b8c:	7bbb      	ldrb	r3, [r7, #14]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d001      	beq.n	8003b96 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e0d8      	b.n	8003d48 <HAL_TIM_IC_Start_IT+0x260>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d104      	bne.n	8003ba6 <HAL_TIM_IC_Start_IT+0xbe>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba4:	e023      	b.n	8003bee <HAL_TIM_IC_Start_IT+0x106>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d104      	bne.n	8003bb6 <HAL_TIM_IC_Start_IT+0xce>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bb4:	e01b      	b.n	8003bee <HAL_TIM_IC_Start_IT+0x106>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d104      	bne.n	8003bc6 <HAL_TIM_IC_Start_IT+0xde>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bc4:	e013      	b.n	8003bee <HAL_TIM_IC_Start_IT+0x106>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b0c      	cmp	r3, #12
 8003bca:	d104      	bne.n	8003bd6 <HAL_TIM_IC_Start_IT+0xee>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bd4:	e00b      	b.n	8003bee <HAL_TIM_IC_Start_IT+0x106>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b10      	cmp	r3, #16
 8003bda:	d104      	bne.n	8003be6 <HAL_TIM_IC_Start_IT+0xfe>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be4:	e003      	b.n	8003bee <HAL_TIM_IC_Start_IT+0x106>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d104      	bne.n	8003bfe <HAL_TIM_IC_Start_IT+0x116>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bfc:	e013      	b.n	8003c26 <HAL_TIM_IC_Start_IT+0x13e>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d104      	bne.n	8003c0e <HAL_TIM_IC_Start_IT+0x126>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c0c:	e00b      	b.n	8003c26 <HAL_TIM_IC_Start_IT+0x13e>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d104      	bne.n	8003c1e <HAL_TIM_IC_Start_IT+0x136>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c1c:	e003      	b.n	8003c26 <HAL_TIM_IC_Start_IT+0x13e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2202      	movs	r2, #2
 8003c22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b0c      	cmp	r3, #12
 8003c2a:	d841      	bhi.n	8003cb0 <HAL_TIM_IC_Start_IT+0x1c8>
 8003c2c:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <HAL_TIM_IC_Start_IT+0x14c>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003c69 	.word	0x08003c69
 8003c38:	08003cb1 	.word	0x08003cb1
 8003c3c:	08003cb1 	.word	0x08003cb1
 8003c40:	08003cb1 	.word	0x08003cb1
 8003c44:	08003c7b 	.word	0x08003c7b
 8003c48:	08003cb1 	.word	0x08003cb1
 8003c4c:	08003cb1 	.word	0x08003cb1
 8003c50:	08003cb1 	.word	0x08003cb1
 8003c54:	08003c8d 	.word	0x08003c8d
 8003c58:	08003cb1 	.word	0x08003cb1
 8003c5c:	08003cb1 	.word	0x08003cb1
 8003c60:	08003cb1 	.word	0x08003cb1
 8003c64:	08003c9f 	.word	0x08003c9f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0202 	orr.w	r2, r2, #2
 8003c76:	60da      	str	r2, [r3, #12]
      break;
 8003c78:	e01b      	b.n	8003cb2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0204 	orr.w	r2, r2, #4
 8003c88:	60da      	str	r2, [r3, #12]
      break;
 8003c8a:	e012      	b.n	8003cb2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0208 	orr.w	r2, r2, #8
 8003c9a:	60da      	str	r2, [r3, #12]
      break;
 8003c9c:	e009      	b.n	8003cb2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0210 	orr.w	r2, r2, #16
 8003cac:	60da      	str	r2, [r3, #12]
      break;
 8003cae:	e000      	b.n	8003cb2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8003cb0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	6839      	ldr	r1, [r7, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fe4c 	bl	8004958 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a22      	ldr	r2, [pc, #136]	; (8003d50 <HAL_TIM_IC_Start_IT+0x268>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01d      	beq.n	8003d06 <HAL_TIM_IC_Start_IT+0x21e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd2:	d018      	beq.n	8003d06 <HAL_TIM_IC_Start_IT+0x21e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <HAL_TIM_IC_Start_IT+0x26c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_TIM_IC_Start_IT+0x21e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1d      	ldr	r2, [pc, #116]	; (8003d58 <HAL_TIM_IC_Start_IT+0x270>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00e      	beq.n	8003d06 <HAL_TIM_IC_Start_IT+0x21e>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1b      	ldr	r2, [pc, #108]	; (8003d5c <HAL_TIM_IC_Start_IT+0x274>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d009      	beq.n	8003d06 <HAL_TIM_IC_Start_IT+0x21e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1a      	ldr	r2, [pc, #104]	; (8003d60 <HAL_TIM_IC_Start_IT+0x278>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_TIM_IC_Start_IT+0x21e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a18      	ldr	r2, [pc, #96]	; (8003d64 <HAL_TIM_IC_Start_IT+0x27c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d115      	bne.n	8003d32 <HAL_TIM_IC_Start_IT+0x24a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	4b16      	ldr	r3, [pc, #88]	; (8003d68 <HAL_TIM_IC_Start_IT+0x280>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b06      	cmp	r3, #6
 8003d16:	d015      	beq.n	8003d44 <HAL_TIM_IC_Start_IT+0x25c>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1e:	d011      	beq.n	8003d44 <HAL_TIM_IC_Start_IT+0x25c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d30:	e008      	b.n	8003d44 <HAL_TIM_IC_Start_IT+0x25c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0201 	orr.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	e000      	b.n	8003d46 <HAL_TIM_IC_Start_IT+0x25e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40012c00 	.word	0x40012c00
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800
 8003d5c:	40000c00 	.word	0x40000c00
 8003d60:	40013400 	.word	0x40013400
 8003d64:	40014000 	.word	0x40014000
 8003d68:	00010007 	.word	0x00010007

08003d6c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b0c      	cmp	r3, #12
 8003d7a:	d841      	bhi.n	8003e00 <HAL_TIM_IC_Stop_IT+0x94>
 8003d7c:	a201      	add	r2, pc, #4	; (adr r2, 8003d84 <HAL_TIM_IC_Stop_IT+0x18>)
 8003d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d82:	bf00      	nop
 8003d84:	08003db9 	.word	0x08003db9
 8003d88:	08003e01 	.word	0x08003e01
 8003d8c:	08003e01 	.word	0x08003e01
 8003d90:	08003e01 	.word	0x08003e01
 8003d94:	08003dcb 	.word	0x08003dcb
 8003d98:	08003e01 	.word	0x08003e01
 8003d9c:	08003e01 	.word	0x08003e01
 8003da0:	08003e01 	.word	0x08003e01
 8003da4:	08003ddd 	.word	0x08003ddd
 8003da8:	08003e01 	.word	0x08003e01
 8003dac:	08003e01 	.word	0x08003e01
 8003db0:	08003e01 	.word	0x08003e01
 8003db4:	08003def 	.word	0x08003def
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0202 	bic.w	r2, r2, #2
 8003dc6:	60da      	str	r2, [r3, #12]
      break;
 8003dc8:	e01b      	b.n	8003e02 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0204 	bic.w	r2, r2, #4
 8003dd8:	60da      	str	r2, [r3, #12]
      break;
 8003dda:	e012      	b.n	8003e02 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0208 	bic.w	r2, r2, #8
 8003dea:	60da      	str	r2, [r3, #12]
      break;
 8003dec:	e009      	b.n	8003e02 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0210 	bic.w	r2, r2, #16
 8003dfc:	60da      	str	r2, [r3, #12]
      break;
 8003dfe:	e000      	b.n	8003e02 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8003e00:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2200      	movs	r2, #0
 8003e08:	6839      	ldr	r1, [r7, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fda4 	bl	8004958 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6a1a      	ldr	r2, [r3, #32]
 8003e16:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10f      	bne.n	8003e40 <HAL_TIM_IC_Stop_IT+0xd4>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6a1a      	ldr	r2, [r3, #32]
 8003e26:	f240 4344 	movw	r3, #1092	; 0x444
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d107      	bne.n	8003e40 <HAL_TIM_IC_Stop_IT+0xd4>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d104      	bne.n	8003e50 <HAL_TIM_IC_Stop_IT+0xe4>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e4e:	e023      	b.n	8003e98 <HAL_TIM_IC_Stop_IT+0x12c>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d104      	bne.n	8003e60 <HAL_TIM_IC_Stop_IT+0xf4>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e5e:	e01b      	b.n	8003e98 <HAL_TIM_IC_Stop_IT+0x12c>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d104      	bne.n	8003e70 <HAL_TIM_IC_Stop_IT+0x104>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e6e:	e013      	b.n	8003e98 <HAL_TIM_IC_Stop_IT+0x12c>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b0c      	cmp	r3, #12
 8003e74:	d104      	bne.n	8003e80 <HAL_TIM_IC_Stop_IT+0x114>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e7e:	e00b      	b.n	8003e98 <HAL_TIM_IC_Stop_IT+0x12c>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	2b10      	cmp	r3, #16
 8003e84:	d104      	bne.n	8003e90 <HAL_TIM_IC_Stop_IT+0x124>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e8e:	e003      	b.n	8003e98 <HAL_TIM_IC_Stop_IT+0x12c>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d104      	bne.n	8003ea8 <HAL_TIM_IC_Stop_IT+0x13c>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea6:	e013      	b.n	8003ed0 <HAL_TIM_IC_Stop_IT+0x164>
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d104      	bne.n	8003eb8 <HAL_TIM_IC_Stop_IT+0x14c>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eb6:	e00b      	b.n	8003ed0 <HAL_TIM_IC_Stop_IT+0x164>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d104      	bne.n	8003ec8 <HAL_TIM_IC_Stop_IT+0x15c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ec6:	e003      	b.n	8003ed0 <HAL_TIM_IC_Stop_IT+0x164>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop

08003edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d122      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d11b      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0202 	mvn.w	r2, #2
 8003f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fd fd02 	bl	8001928 <HAL_TIM_IC_CaptureCallback>
 8003f24:	e005      	b.n	8003f32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 faa0 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 faa7 	bl	8004480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d122      	bne.n	8003f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d11b      	bne.n	8003f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0204 	mvn.w	r2, #4
 8003f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2202      	movs	r2, #2
 8003f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fd fcd8 	bl	8001928 <HAL_TIM_IC_CaptureCallback>
 8003f78:	e005      	b.n	8003f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fa76 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fa7d 	bl	8004480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d122      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d11b      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0208 	mvn.w	r2, #8
 8003fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fd fcae 	bl	8001928 <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fa4c 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fa53 	bl	8004480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	d122      	bne.n	8004034 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d11b      	bne.n	8004034 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0210 	mvn.w	r2, #16
 8004004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2208      	movs	r2, #8
 800400a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fd fc84 	bl	8001928 <HAL_TIM_IC_CaptureCallback>
 8004020:	e005      	b.n	800402e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fa22 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fa29 	bl	8004480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b01      	cmp	r3, #1
 8004040:	d10e      	bne.n	8004060 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b01      	cmp	r3, #1
 800404e:	d107      	bne.n	8004060 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0201 	mvn.w	r2, #1
 8004058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f9fc 	bl	8004458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406a:	2b80      	cmp	r3, #128	; 0x80
 800406c:	d10e      	bne.n	800408c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	2b80      	cmp	r3, #128	; 0x80
 800407a:	d107      	bne.n	800408c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fd1e 	bl	8004ac8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409a:	d10e      	bne.n	80040ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	2b80      	cmp	r3, #128	; 0x80
 80040a8:	d107      	bne.n	80040ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fd11 	bl	8004adc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d10e      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d107      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f9d7 	bl	8004494 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d10e      	bne.n	8004112 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d107      	bne.n	8004112 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f06f 0220 	mvn.w	r2, #32
 800410a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fcd1 	bl	8004ab4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b084      	sub	sp, #16
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004130:	2302      	movs	r3, #2
 8004132:	e082      	b.n	800423a <HAL_TIM_IC_ConfigChannel+0x120>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d11b      	bne.n	800417a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f000 fa43 	bl	80045dc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699a      	ldr	r2, [r3, #24]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 020c 	bic.w	r2, r2, #12
 8004164:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6999      	ldr	r1, [r3, #24]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	619a      	str	r2, [r3, #24]
 8004178:	e05a      	b.n	8004230 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b04      	cmp	r3, #4
 800417e:	d11c      	bne.n	80041ba <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	6819      	ldr	r1, [r3, #0]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f000 fac1 	bl	8004716 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80041a2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6999      	ldr	r1, [r3, #24]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	021a      	lsls	r2, r3, #8
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	619a      	str	r2, [r3, #24]
 80041b8:	e03a      	b.n	8004230 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d11b      	bne.n	80041f8 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	6819      	ldr	r1, [r3, #0]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f000 fb0e 	bl	80047f0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	69da      	ldr	r2, [r3, #28]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 020c 	bic.w	r2, r2, #12
 80041e2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69d9      	ldr	r1, [r3, #28]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	61da      	str	r2, [r3, #28]
 80041f6:	e01b      	b.n	8004230 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	6819      	ldr	r1, [r3, #0]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f000 fb2e 	bl	8004868 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800421a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	69d9      	ldr	r1, [r3, #28]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	021a      	lsls	r2, r3, #8
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_TIM_ConfigClockSource+0x18>
 8004256:	2302      	movs	r3, #2
 8004258:	e0b5      	b.n	80043c6 <HAL_TIM_ConfigClockSource+0x184>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2202      	movs	r2, #2
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004278:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800427c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004284:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004296:	d03e      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0xd4>
 8004298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800429c:	f200 8087 	bhi.w	80043ae <HAL_TIM_ConfigClockSource+0x16c>
 80042a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a4:	f000 8085 	beq.w	80043b2 <HAL_TIM_ConfigClockSource+0x170>
 80042a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ac:	d87f      	bhi.n	80043ae <HAL_TIM_ConfigClockSource+0x16c>
 80042ae:	2b70      	cmp	r3, #112	; 0x70
 80042b0:	d01a      	beq.n	80042e8 <HAL_TIM_ConfigClockSource+0xa6>
 80042b2:	2b70      	cmp	r3, #112	; 0x70
 80042b4:	d87b      	bhi.n	80043ae <HAL_TIM_ConfigClockSource+0x16c>
 80042b6:	2b60      	cmp	r3, #96	; 0x60
 80042b8:	d050      	beq.n	800435c <HAL_TIM_ConfigClockSource+0x11a>
 80042ba:	2b60      	cmp	r3, #96	; 0x60
 80042bc:	d877      	bhi.n	80043ae <HAL_TIM_ConfigClockSource+0x16c>
 80042be:	2b50      	cmp	r3, #80	; 0x50
 80042c0:	d03c      	beq.n	800433c <HAL_TIM_ConfigClockSource+0xfa>
 80042c2:	2b50      	cmp	r3, #80	; 0x50
 80042c4:	d873      	bhi.n	80043ae <HAL_TIM_ConfigClockSource+0x16c>
 80042c6:	2b40      	cmp	r3, #64	; 0x40
 80042c8:	d058      	beq.n	800437c <HAL_TIM_ConfigClockSource+0x13a>
 80042ca:	2b40      	cmp	r3, #64	; 0x40
 80042cc:	d86f      	bhi.n	80043ae <HAL_TIM_ConfigClockSource+0x16c>
 80042ce:	2b30      	cmp	r3, #48	; 0x30
 80042d0:	d064      	beq.n	800439c <HAL_TIM_ConfigClockSource+0x15a>
 80042d2:	2b30      	cmp	r3, #48	; 0x30
 80042d4:	d86b      	bhi.n	80043ae <HAL_TIM_ConfigClockSource+0x16c>
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d060      	beq.n	800439c <HAL_TIM_ConfigClockSource+0x15a>
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d867      	bhi.n	80043ae <HAL_TIM_ConfigClockSource+0x16c>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d05c      	beq.n	800439c <HAL_TIM_ConfigClockSource+0x15a>
 80042e2:	2b10      	cmp	r3, #16
 80042e4:	d05a      	beq.n	800439c <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80042e6:	e062      	b.n	80043ae <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	6899      	ldr	r1, [r3, #8]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f000 fb0e 	bl	8004918 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800430a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	609a      	str	r2, [r3, #8]
      break;
 8004314:	e04e      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6899      	ldr	r1, [r3, #8]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f000 faf7 	bl	8004918 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004338:	609a      	str	r2, [r3, #8]
      break;
 800433a:	e03b      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	6859      	ldr	r1, [r3, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	461a      	mov	r2, r3
 800434a:	f000 f9b5 	bl	80046b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2150      	movs	r1, #80	; 0x50
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fac4 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 800435a:	e02b      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	6859      	ldr	r1, [r3, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	461a      	mov	r2, r3
 800436a:	f000 fa11 	bl	8004790 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2160      	movs	r1, #96	; 0x60
 8004374:	4618      	mov	r0, r3
 8004376:	f000 fab4 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 800437a:	e01b      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	6859      	ldr	r1, [r3, #4]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	461a      	mov	r2, r3
 800438a:	f000 f995 	bl	80046b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2140      	movs	r1, #64	; 0x40
 8004394:	4618      	mov	r0, r3
 8004396:	f000 faa4 	bl	80048e2 <TIM_ITRx_SetConfig>
      break;
 800439a:	e00b      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f000 fa9b 	bl	80048e2 <TIM_ITRx_SetConfig>
        break;
 80043ac:	e002      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80043ae:	bf00      	nop
 80043b0:	e000      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80043b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b0c      	cmp	r3, #12
 80043e2:	d831      	bhi.n	8004448 <HAL_TIM_ReadCapturedValue+0x78>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <HAL_TIM_ReadCapturedValue+0x1c>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	08004421 	.word	0x08004421
 80043f0:	08004449 	.word	0x08004449
 80043f4:	08004449 	.word	0x08004449
 80043f8:	08004449 	.word	0x08004449
 80043fc:	0800442b 	.word	0x0800442b
 8004400:	08004449 	.word	0x08004449
 8004404:	08004449 	.word	0x08004449
 8004408:	08004449 	.word	0x08004449
 800440c:	08004435 	.word	0x08004435
 8004410:	08004449 	.word	0x08004449
 8004414:	08004449 	.word	0x08004449
 8004418:	08004449 	.word	0x08004449
 800441c:	0800443f 	.word	0x0800443f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004426:	60fb      	str	r3, [r7, #12]

      break;
 8004428:	e00f      	b.n	800444a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	60fb      	str	r3, [r7, #12]

      break;
 8004432:	e00a      	b.n	800444a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	60fb      	str	r3, [r7, #12]

      break;
 800443c:	e005      	b.n	800444a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	60fb      	str	r3, [r7, #12]

      break;
 8004446:	e000      	b.n	800444a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004448:	bf00      	nop
  }

  return tmpreg;
 800444a:	68fb      	ldr	r3, [r7, #12]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a40      	ldr	r2, [pc, #256]	; (80045bc <TIM_Base_SetConfig+0x114>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d013      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c6:	d00f      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a3d      	ldr	r2, [pc, #244]	; (80045c0 <TIM_Base_SetConfig+0x118>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00b      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3c      	ldr	r2, [pc, #240]	; (80045c4 <TIM_Base_SetConfig+0x11c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d007      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3b      	ldr	r2, [pc, #236]	; (80045c8 <TIM_Base_SetConfig+0x120>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d003      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a3a      	ldr	r2, [pc, #232]	; (80045cc <TIM_Base_SetConfig+0x124>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d108      	bne.n	80044fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a2f      	ldr	r2, [pc, #188]	; (80045bc <TIM_Base_SetConfig+0x114>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d01f      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004508:	d01b      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2c      	ldr	r2, [pc, #176]	; (80045c0 <TIM_Base_SetConfig+0x118>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d017      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2b      	ldr	r2, [pc, #172]	; (80045c4 <TIM_Base_SetConfig+0x11c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2a      	ldr	r2, [pc, #168]	; (80045c8 <TIM_Base_SetConfig+0x120>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00f      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a29      	ldr	r2, [pc, #164]	; (80045cc <TIM_Base_SetConfig+0x124>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00b      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a28      	ldr	r2, [pc, #160]	; (80045d0 <TIM_Base_SetConfig+0x128>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d007      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a27      	ldr	r2, [pc, #156]	; (80045d4 <TIM_Base_SetConfig+0x12c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d003      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a26      	ldr	r2, [pc, #152]	; (80045d8 <TIM_Base_SetConfig+0x130>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d108      	bne.n	8004554 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a10      	ldr	r2, [pc, #64]	; (80045bc <TIM_Base_SetConfig+0x114>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00f      	beq.n	80045a0 <TIM_Base_SetConfig+0xf8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a12      	ldr	r2, [pc, #72]	; (80045cc <TIM_Base_SetConfig+0x124>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00b      	beq.n	80045a0 <TIM_Base_SetConfig+0xf8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a11      	ldr	r2, [pc, #68]	; (80045d0 <TIM_Base_SetConfig+0x128>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d007      	beq.n	80045a0 <TIM_Base_SetConfig+0xf8>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a10      	ldr	r2, [pc, #64]	; (80045d4 <TIM_Base_SetConfig+0x12c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d003      	beq.n	80045a0 <TIM_Base_SetConfig+0xf8>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a0f      	ldr	r2, [pc, #60]	; (80045d8 <TIM_Base_SetConfig+0x130>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d103      	bne.n	80045a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	615a      	str	r2, [r3, #20]
}
 80045ae:	bf00      	nop
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40000400 	.word	0x40000400
 80045c4:	40000800 	.word	0x40000800
 80045c8:	40000c00 	.word	0x40000c00
 80045cc:	40013400 	.word	0x40013400
 80045d0:	40014000 	.word	0x40014000
 80045d4:	40014400 	.word	0x40014400
 80045d8:	40014800 	.word	0x40014800

080045dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f023 0201 	bic.w	r2, r3, #1
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4a26      	ldr	r2, [pc, #152]	; (80046a0 <TIM_TI1_SetConfig+0xc4>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d017      	beq.n	800463a <TIM_TI1_SetConfig+0x5e>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004610:	d013      	beq.n	800463a <TIM_TI1_SetConfig+0x5e>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4a23      	ldr	r2, [pc, #140]	; (80046a4 <TIM_TI1_SetConfig+0xc8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00f      	beq.n	800463a <TIM_TI1_SetConfig+0x5e>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4a22      	ldr	r2, [pc, #136]	; (80046a8 <TIM_TI1_SetConfig+0xcc>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00b      	beq.n	800463a <TIM_TI1_SetConfig+0x5e>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4a21      	ldr	r2, [pc, #132]	; (80046ac <TIM_TI1_SetConfig+0xd0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d007      	beq.n	800463a <TIM_TI1_SetConfig+0x5e>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4a20      	ldr	r2, [pc, #128]	; (80046b0 <TIM_TI1_SetConfig+0xd4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d003      	beq.n	800463a <TIM_TI1_SetConfig+0x5e>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4a1f      	ldr	r2, [pc, #124]	; (80046b4 <TIM_TI1_SetConfig+0xd8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d101      	bne.n	800463e <TIM_TI1_SetConfig+0x62>
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <TIM_TI1_SetConfig+0x64>
 800463e:	2300      	movs	r3, #0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f023 0303 	bic.w	r3, r3, #3
 800464a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	e003      	b.n	800465e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004664:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	b2db      	uxtb	r3, r3
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f023 030a 	bic.w	r3, r3, #10
 8004678:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f003 030a 	and.w	r3, r3, #10
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	621a      	str	r2, [r3, #32]
}
 8004692:	bf00      	nop
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40012c00 	.word	0x40012c00
 80046a4:	40000400 	.word	0x40000400
 80046a8:	40000800 	.word	0x40000800
 80046ac:	40000c00 	.word	0x40000c00
 80046b0:	40013400 	.word	0x40013400
 80046b4:	40014000 	.word	0x40014000

080046b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f023 0201 	bic.w	r2, r3, #1
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f023 030a 	bic.w	r3, r3, #10
 80046f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	621a      	str	r2, [r3, #32]
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004716:	b480      	push	{r7}
 8004718:	b087      	sub	sp, #28
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
 8004722:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f023 0210 	bic.w	r2, r3, #16
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004742:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	021b      	lsls	r3, r3, #8
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004754:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	031b      	lsls	r3, r3, #12
 800475a:	b29b      	uxth	r3, r3
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004768:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	621a      	str	r2, [r3, #32]
}
 8004784:	bf00      	nop
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f023 0210 	bic.w	r2, r3, #16
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	031b      	lsls	r3, r3, #12
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	621a      	str	r2, [r3, #32]
}
 80047e4:	bf00      	nop
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f023 0303 	bic.w	r3, r3, #3
 800481c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800482c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	b2db      	uxtb	r3, r3
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004840:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	621a      	str	r2, [r3, #32]
}
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004894:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	031b      	lsls	r3, r3, #12
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80048ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	031b      	lsls	r3, r3, #12
 80048c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	621a      	str	r2, [r3, #32]
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	f043 0307 	orr.w	r3, r3, #7
 8004904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	609a      	str	r2, [r3, #8]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	021a      	lsls	r2, r3, #8
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	431a      	orrs	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4313      	orrs	r3, r2
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	609a      	str	r2, [r3, #8]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	2201      	movs	r2, #1
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a1a      	ldr	r2, [r3, #32]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	43db      	mvns	r3, r3
 800497a:	401a      	ands	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a1a      	ldr	r2, [r3, #32]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	fa01 f303 	lsl.w	r3, r1, r3
 8004990:	431a      	orrs	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	621a      	str	r2, [r3, #32]
}
 8004996:	bf00      	nop
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
	...

080049a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e068      	b.n	8004a8e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a2e      	ldr	r2, [pc, #184]	; (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a2d      	ldr	r2, [pc, #180]	; (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d108      	bne.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1e      	ldr	r2, [pc, #120]	; (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d01d      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2e:	d018      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1b      	ldr	r2, [pc, #108]	; (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a1a      	ldr	r2, [pc, #104]	; (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00e      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a18      	ldr	r2, [pc, #96]	; (8004aac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d009      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d004      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a14      	ldr	r2, [pc, #80]	; (8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d10c      	bne.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40012c00 	.word	0x40012c00
 8004aa0:	40013400 	.word	0x40013400
 8004aa4:	40000400 	.word	0x40000400
 8004aa8:	40000800 	.word	0x40000800
 8004aac:	40000c00 	.word	0x40000c00
 8004ab0:	40014000 	.word	0x40014000

08004ab4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e040      	b.n	8004b84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fc fd38 	bl	8001588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2224      	movs	r2, #36	; 0x24
 8004b1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0201 	bic.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fbb4 	bl	800529c <UART_SetConfig>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e022      	b.n	8004b84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fe32 	bl	80057b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 feb9 	bl	80058f4 <UART_CheckIdleState>
 8004b82:	4603      	mov	r3, r0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08a      	sub	sp, #40	; 0x28
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	f040 8082 	bne.w	8004caa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <HAL_UART_Transmit+0x26>
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e07a      	b.n	8004cac <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_UART_Transmit+0x38>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e073      	b.n	8004cac <HAL_UART_Transmit+0x120>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2221      	movs	r2, #33	; 0x21
 8004bd8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bda:	f7fc ffd5 	bl	8001b88 <HAL_GetTick>
 8004bde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	88fa      	ldrh	r2, [r7, #6]
 8004be4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	88fa      	ldrh	r2, [r7, #6]
 8004bec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf8:	d108      	bne.n	8004c0c <HAL_UART_Transmit+0x80>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d104      	bne.n	8004c0c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	61bb      	str	r3, [r7, #24]
 8004c0a:	e003      	b.n	8004c14 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c1c:	e02d      	b.n	8004c7a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2200      	movs	r2, #0
 8004c26:	2180      	movs	r1, #128	; 0x80
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 feac 	bl	8005986 <UART_WaitOnFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e039      	b.n	8004cac <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10b      	bne.n	8004c56 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	881a      	ldrh	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c4a:	b292      	uxth	r2, r2
 8004c4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	3302      	adds	r3, #2
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	e008      	b.n	8004c68 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	781a      	ldrb	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	b292      	uxth	r2, r2
 8004c60:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	3301      	adds	r3, #1
 8004c66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1cb      	bne.n	8004c1e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2140      	movs	r1, #64	; 0x40
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fe78 	bl	8005986 <UART_WaitOnFlagUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e005      	b.n	8004cac <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	e000      	b.n	8004cac <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004caa:	2302      	movs	r3, #2
  }
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3720      	adds	r7, #32
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08a      	sub	sp, #40	; 0x28
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	f040 80bf 	bne.w	8004e4c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <HAL_UART_Receive+0x26>
 8004cd4:	88fb      	ldrh	r3, [r7, #6]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e0b7      	b.n	8004e4e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_UART_Receive+0x38>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e0b0      	b.n	8004e4e <HAL_UART_Receive+0x19a>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2222      	movs	r2, #34	; 0x22
 8004d00:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d08:	f7fc ff3e 	bl	8001b88 <HAL_GetTick>
 8004d0c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	88fa      	ldrh	r2, [r7, #6]
 8004d12:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	88fa      	ldrh	r2, [r7, #6]
 8004d1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d26:	d10e      	bne.n	8004d46 <HAL_UART_Receive+0x92>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d105      	bne.n	8004d3c <HAL_UART_Receive+0x88>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d3a:	e02d      	b.n	8004d98 <HAL_UART_Receive+0xe4>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	22ff      	movs	r2, #255	; 0xff
 8004d40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d44:	e028      	b.n	8004d98 <HAL_UART_Receive+0xe4>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10d      	bne.n	8004d6a <HAL_UART_Receive+0xb6>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d104      	bne.n	8004d60 <HAL_UART_Receive+0xac>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	22ff      	movs	r2, #255	; 0xff
 8004d5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d5e:	e01b      	b.n	8004d98 <HAL_UART_Receive+0xe4>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	227f      	movs	r2, #127	; 0x7f
 8004d64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d68:	e016      	b.n	8004d98 <HAL_UART_Receive+0xe4>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d72:	d10d      	bne.n	8004d90 <HAL_UART_Receive+0xdc>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d104      	bne.n	8004d86 <HAL_UART_Receive+0xd2>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	227f      	movs	r2, #127	; 0x7f
 8004d80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d84:	e008      	b.n	8004d98 <HAL_UART_Receive+0xe4>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	223f      	movs	r2, #63	; 0x3f
 8004d8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d8e:	e003      	b.n	8004d98 <HAL_UART_Receive+0xe4>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d9e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da8:	d108      	bne.n	8004dbc <HAL_UART_Receive+0x108>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d104      	bne.n	8004dbc <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	61bb      	str	r3, [r7, #24]
 8004dba:	e003      	b.n	8004dc4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004dcc:	e033      	b.n	8004e36 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2120      	movs	r1, #32
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fdd4 	bl	8005986 <UART_WaitOnFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e032      	b.n	8004e4e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10c      	bne.n	8004e08 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	8a7b      	ldrh	r3, [r7, #18]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	3302      	adds	r3, #2
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	e00d      	b.n	8004e24 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	8a7b      	ldrh	r3, [r7, #18]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	4013      	ands	r3, r2
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	3301      	adds	r3, #1
 8004e22:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1c5      	bne.n	8004dce <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e000      	b.n	8004e4e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004e4c:	2302      	movs	r3, #2
  }
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3720      	adds	r7, #32
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004e7e:	4013      	ands	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d113      	bne.n	8004eb0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00e      	beq.n	8004eb0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d009      	beq.n	8004eb0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 81ce 	beq.w	8005242 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	4798      	blx	r3
      }
      return;
 8004eae:	e1c8      	b.n	8005242 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 80e3 	beq.w	800507e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d105      	bne.n	8004ece <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	4ba6      	ldr	r3, [pc, #664]	; (8005160 <HAL_UART_IRQHandler+0x308>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80d8 	beq.w	800507e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d010      	beq.n	8004efa <HAL_UART_IRQHandler+0xa2>
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00b      	beq.n	8004efa <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef0:	f043 0201 	orr.w	r2, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d010      	beq.n	8004f26 <HAL_UART_IRQHandler+0xce>
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2202      	movs	r2, #2
 8004f14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f1c:	f043 0204 	orr.w	r2, r3, #4
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d010      	beq.n	8004f52 <HAL_UART_IRQHandler+0xfa>
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00b      	beq.n	8004f52 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2204      	movs	r2, #4
 8004f40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f48:	f043 0202 	orr.w	r2, r3, #2
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d015      	beq.n	8004f88 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d104      	bne.n	8004f70 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00b      	beq.n	8004f88 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2208      	movs	r2, #8
 8004f76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f7e:	f043 0208 	orr.w	r2, r3, #8
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d011      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x15e>
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00c      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fac:	f043 0220 	orr.w	r2, r3, #32
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 8142 	beq.w	8005246 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00c      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f003 0320 	and.w	r3, r3, #32
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d007      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fec:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff8:	2b40      	cmp	r3, #64	; 0x40
 8004ffa:	d004      	beq.n	8005006 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005002:	2b00      	cmp	r3, #0
 8005004:	d031      	beq.n	800506a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fd39 	bl	8005a7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005016:	2b40      	cmp	r3, #64	; 0x40
 8005018:	d123      	bne.n	8005062 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005028:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502e:	2b00      	cmp	r3, #0
 8005030:	d013      	beq.n	800505a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005036:	4a4b      	ldr	r2, [pc, #300]	; (8005164 <HAL_UART_IRQHandler+0x30c>)
 8005038:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	4618      	mov	r0, r3
 8005040:	f7fc ff21 	bl	8001e86 <HAL_DMA_Abort_IT>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d017      	beq.n	800507a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005054:	4610      	mov	r0, r2
 8005056:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005058:	e00f      	b.n	800507a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f908 	bl	8005270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005060:	e00b      	b.n	800507a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f904 	bl	8005270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005068:	e007      	b.n	800507a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f900 	bl	8005270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005078:	e0e5      	b.n	8005246 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800507a:	bf00      	nop
    return;
 800507c:	e0e3      	b.n	8005246 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005082:	2b01      	cmp	r3, #1
 8005084:	f040 80a9 	bne.w	80051da <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	f003 0310 	and.w	r3, r3, #16
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 80a3 	beq.w	80051da <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f003 0310 	and.w	r3, r3, #16
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 809d 	beq.w	80051da <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2210      	movs	r2, #16
 80050a6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b2:	2b40      	cmp	r3, #64	; 0x40
 80050b4:	d158      	bne.n	8005168 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80050c0:	893b      	ldrh	r3, [r7, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 80c1 	beq.w	800524a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050ce:	893a      	ldrh	r2, [r7, #8]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	f080 80ba 	bcs.w	800524a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	893a      	ldrh	r2, [r7, #8]
 80050da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d12a      	bne.n	8005144 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0201 	bic.w	r2, r2, #1
 800510c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800511c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0210 	bic.w	r2, r2, #16
 8005138:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	4618      	mov	r0, r3
 8005140:	f7fc fe63 	bl	8001e0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005150:	b29b      	uxth	r3, r3
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	b29b      	uxth	r3, r3
 8005156:	4619      	mov	r1, r3
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f893 	bl	8005284 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800515e:	e074      	b.n	800524a <HAL_UART_IRQHandler+0x3f2>
 8005160:	04000120 	.word	0x04000120
 8005164:	08005add 	.word	0x08005add
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005174:	b29b      	uxth	r3, r3
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d063      	beq.n	800524e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8005186:	897b      	ldrh	r3, [r7, #10]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d060      	beq.n	800524e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800519a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0201 	bic.w	r2, r2, #1
 80051aa:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0210 	bic.w	r2, r2, #16
 80051cc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051ce:	897b      	ldrh	r3, [r7, #10]
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f856 	bl	8005284 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80051d8:	e039      	b.n	800524e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00d      	beq.n	8005200 <HAL_UART_IRQHandler+0x3a8>
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d008      	beq.n	8005200 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80051f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fc9e 	bl	8005b3a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051fe:	e029      	b.n	8005254 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00d      	beq.n	8005226 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005210:	2b00      	cmp	r3, #0
 8005212:	d008      	beq.n	8005226 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01a      	beq.n	8005252 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	4798      	blx	r3
    }
    return;
 8005224:	e015      	b.n	8005252 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522c:	2b00      	cmp	r3, #0
 800522e:	d011      	beq.n	8005254 <HAL_UART_IRQHandler+0x3fc>
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00c      	beq.n	8005254 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fc64 	bl	8005b08 <UART_EndTransmit_IT>
    return;
 8005240:	e008      	b.n	8005254 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005242:	bf00      	nop
 8005244:	e006      	b.n	8005254 <HAL_UART_IRQHandler+0x3fc>
    return;
 8005246:	bf00      	nop
 8005248:	e004      	b.n	8005254 <HAL_UART_IRQHandler+0x3fc>
      return;
 800524a:	bf00      	nop
 800524c:	e002      	b.n	8005254 <HAL_UART_IRQHandler+0x3fc>
      return;
 800524e:	bf00      	nop
 8005250:	e000      	b.n	8005254 <HAL_UART_IRQHandler+0x3fc>
    return;
 8005252:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop

0800525c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800529c:	b5b0      	push	{r4, r5, r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	4313      	orrs	r3, r2
 80052be:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	4bad      	ldr	r3, [pc, #692]	; (800557c <UART_SetConfig+0x2e0>)
 80052c8:	4013      	ands	r3, r2
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	69f9      	ldr	r1, [r7, #28]
 80052d0:	430b      	orrs	r3, r1
 80052d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4aa2      	ldr	r2, [pc, #648]	; (8005580 <UART_SetConfig+0x2e4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d004      	beq.n	8005304 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	4313      	orrs	r3, r2
 8005302:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	430a      	orrs	r2, r1
 8005316:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a99      	ldr	r2, [pc, #612]	; (8005584 <UART_SetConfig+0x2e8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d121      	bne.n	8005366 <UART_SetConfig+0xca>
 8005322:	4b99      	ldr	r3, [pc, #612]	; (8005588 <UART_SetConfig+0x2ec>)
 8005324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	2b03      	cmp	r3, #3
 800532e:	d817      	bhi.n	8005360 <UART_SetConfig+0xc4>
 8005330:	a201      	add	r2, pc, #4	; (adr r2, 8005338 <UART_SetConfig+0x9c>)
 8005332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005336:	bf00      	nop
 8005338:	08005349 	.word	0x08005349
 800533c:	08005355 	.word	0x08005355
 8005340:	0800534f 	.word	0x0800534f
 8005344:	0800535b 	.word	0x0800535b
 8005348:	2301      	movs	r3, #1
 800534a:	76fb      	strb	r3, [r7, #27]
 800534c:	e0e7      	b.n	800551e <UART_SetConfig+0x282>
 800534e:	2302      	movs	r3, #2
 8005350:	76fb      	strb	r3, [r7, #27]
 8005352:	e0e4      	b.n	800551e <UART_SetConfig+0x282>
 8005354:	2304      	movs	r3, #4
 8005356:	76fb      	strb	r3, [r7, #27]
 8005358:	e0e1      	b.n	800551e <UART_SetConfig+0x282>
 800535a:	2308      	movs	r3, #8
 800535c:	76fb      	strb	r3, [r7, #27]
 800535e:	e0de      	b.n	800551e <UART_SetConfig+0x282>
 8005360:	2310      	movs	r3, #16
 8005362:	76fb      	strb	r3, [r7, #27]
 8005364:	e0db      	b.n	800551e <UART_SetConfig+0x282>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a88      	ldr	r2, [pc, #544]	; (800558c <UART_SetConfig+0x2f0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d132      	bne.n	80053d6 <UART_SetConfig+0x13a>
 8005370:	4b85      	ldr	r3, [pc, #532]	; (8005588 <UART_SetConfig+0x2ec>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005376:	f003 030c 	and.w	r3, r3, #12
 800537a:	2b0c      	cmp	r3, #12
 800537c:	d828      	bhi.n	80053d0 <UART_SetConfig+0x134>
 800537e:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <UART_SetConfig+0xe8>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	080053b9 	.word	0x080053b9
 8005388:	080053d1 	.word	0x080053d1
 800538c:	080053d1 	.word	0x080053d1
 8005390:	080053d1 	.word	0x080053d1
 8005394:	080053c5 	.word	0x080053c5
 8005398:	080053d1 	.word	0x080053d1
 800539c:	080053d1 	.word	0x080053d1
 80053a0:	080053d1 	.word	0x080053d1
 80053a4:	080053bf 	.word	0x080053bf
 80053a8:	080053d1 	.word	0x080053d1
 80053ac:	080053d1 	.word	0x080053d1
 80053b0:	080053d1 	.word	0x080053d1
 80053b4:	080053cb 	.word	0x080053cb
 80053b8:	2300      	movs	r3, #0
 80053ba:	76fb      	strb	r3, [r7, #27]
 80053bc:	e0af      	b.n	800551e <UART_SetConfig+0x282>
 80053be:	2302      	movs	r3, #2
 80053c0:	76fb      	strb	r3, [r7, #27]
 80053c2:	e0ac      	b.n	800551e <UART_SetConfig+0x282>
 80053c4:	2304      	movs	r3, #4
 80053c6:	76fb      	strb	r3, [r7, #27]
 80053c8:	e0a9      	b.n	800551e <UART_SetConfig+0x282>
 80053ca:	2308      	movs	r3, #8
 80053cc:	76fb      	strb	r3, [r7, #27]
 80053ce:	e0a6      	b.n	800551e <UART_SetConfig+0x282>
 80053d0:	2310      	movs	r3, #16
 80053d2:	76fb      	strb	r3, [r7, #27]
 80053d4:	e0a3      	b.n	800551e <UART_SetConfig+0x282>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a6d      	ldr	r2, [pc, #436]	; (8005590 <UART_SetConfig+0x2f4>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d120      	bne.n	8005422 <UART_SetConfig+0x186>
 80053e0:	4b69      	ldr	r3, [pc, #420]	; (8005588 <UART_SetConfig+0x2ec>)
 80053e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053ea:	2b30      	cmp	r3, #48	; 0x30
 80053ec:	d013      	beq.n	8005416 <UART_SetConfig+0x17a>
 80053ee:	2b30      	cmp	r3, #48	; 0x30
 80053f0:	d814      	bhi.n	800541c <UART_SetConfig+0x180>
 80053f2:	2b20      	cmp	r3, #32
 80053f4:	d009      	beq.n	800540a <UART_SetConfig+0x16e>
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d810      	bhi.n	800541c <UART_SetConfig+0x180>
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <UART_SetConfig+0x168>
 80053fe:	2b10      	cmp	r3, #16
 8005400:	d006      	beq.n	8005410 <UART_SetConfig+0x174>
 8005402:	e00b      	b.n	800541c <UART_SetConfig+0x180>
 8005404:	2300      	movs	r3, #0
 8005406:	76fb      	strb	r3, [r7, #27]
 8005408:	e089      	b.n	800551e <UART_SetConfig+0x282>
 800540a:	2302      	movs	r3, #2
 800540c:	76fb      	strb	r3, [r7, #27]
 800540e:	e086      	b.n	800551e <UART_SetConfig+0x282>
 8005410:	2304      	movs	r3, #4
 8005412:	76fb      	strb	r3, [r7, #27]
 8005414:	e083      	b.n	800551e <UART_SetConfig+0x282>
 8005416:	2308      	movs	r3, #8
 8005418:	76fb      	strb	r3, [r7, #27]
 800541a:	e080      	b.n	800551e <UART_SetConfig+0x282>
 800541c:	2310      	movs	r3, #16
 800541e:	76fb      	strb	r3, [r7, #27]
 8005420:	e07d      	b.n	800551e <UART_SetConfig+0x282>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a5b      	ldr	r2, [pc, #364]	; (8005594 <UART_SetConfig+0x2f8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d120      	bne.n	800546e <UART_SetConfig+0x1d2>
 800542c:	4b56      	ldr	r3, [pc, #344]	; (8005588 <UART_SetConfig+0x2ec>)
 800542e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005432:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005436:	2bc0      	cmp	r3, #192	; 0xc0
 8005438:	d013      	beq.n	8005462 <UART_SetConfig+0x1c6>
 800543a:	2bc0      	cmp	r3, #192	; 0xc0
 800543c:	d814      	bhi.n	8005468 <UART_SetConfig+0x1cc>
 800543e:	2b80      	cmp	r3, #128	; 0x80
 8005440:	d009      	beq.n	8005456 <UART_SetConfig+0x1ba>
 8005442:	2b80      	cmp	r3, #128	; 0x80
 8005444:	d810      	bhi.n	8005468 <UART_SetConfig+0x1cc>
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <UART_SetConfig+0x1b4>
 800544a:	2b40      	cmp	r3, #64	; 0x40
 800544c:	d006      	beq.n	800545c <UART_SetConfig+0x1c0>
 800544e:	e00b      	b.n	8005468 <UART_SetConfig+0x1cc>
 8005450:	2300      	movs	r3, #0
 8005452:	76fb      	strb	r3, [r7, #27]
 8005454:	e063      	b.n	800551e <UART_SetConfig+0x282>
 8005456:	2302      	movs	r3, #2
 8005458:	76fb      	strb	r3, [r7, #27]
 800545a:	e060      	b.n	800551e <UART_SetConfig+0x282>
 800545c:	2304      	movs	r3, #4
 800545e:	76fb      	strb	r3, [r7, #27]
 8005460:	e05d      	b.n	800551e <UART_SetConfig+0x282>
 8005462:	2308      	movs	r3, #8
 8005464:	76fb      	strb	r3, [r7, #27]
 8005466:	e05a      	b.n	800551e <UART_SetConfig+0x282>
 8005468:	2310      	movs	r3, #16
 800546a:	76fb      	strb	r3, [r7, #27]
 800546c:	e057      	b.n	800551e <UART_SetConfig+0x282>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a49      	ldr	r2, [pc, #292]	; (8005598 <UART_SetConfig+0x2fc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d125      	bne.n	80054c4 <UART_SetConfig+0x228>
 8005478:	4b43      	ldr	r3, [pc, #268]	; (8005588 <UART_SetConfig+0x2ec>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005486:	d017      	beq.n	80054b8 <UART_SetConfig+0x21c>
 8005488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800548c:	d817      	bhi.n	80054be <UART_SetConfig+0x222>
 800548e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005492:	d00b      	beq.n	80054ac <UART_SetConfig+0x210>
 8005494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005498:	d811      	bhi.n	80054be <UART_SetConfig+0x222>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <UART_SetConfig+0x20a>
 800549e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a2:	d006      	beq.n	80054b2 <UART_SetConfig+0x216>
 80054a4:	e00b      	b.n	80054be <UART_SetConfig+0x222>
 80054a6:	2300      	movs	r3, #0
 80054a8:	76fb      	strb	r3, [r7, #27]
 80054aa:	e038      	b.n	800551e <UART_SetConfig+0x282>
 80054ac:	2302      	movs	r3, #2
 80054ae:	76fb      	strb	r3, [r7, #27]
 80054b0:	e035      	b.n	800551e <UART_SetConfig+0x282>
 80054b2:	2304      	movs	r3, #4
 80054b4:	76fb      	strb	r3, [r7, #27]
 80054b6:	e032      	b.n	800551e <UART_SetConfig+0x282>
 80054b8:	2308      	movs	r3, #8
 80054ba:	76fb      	strb	r3, [r7, #27]
 80054bc:	e02f      	b.n	800551e <UART_SetConfig+0x282>
 80054be:	2310      	movs	r3, #16
 80054c0:	76fb      	strb	r3, [r7, #27]
 80054c2:	e02c      	b.n	800551e <UART_SetConfig+0x282>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a2d      	ldr	r2, [pc, #180]	; (8005580 <UART_SetConfig+0x2e4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d125      	bne.n	800551a <UART_SetConfig+0x27e>
 80054ce:	4b2e      	ldr	r3, [pc, #184]	; (8005588 <UART_SetConfig+0x2ec>)
 80054d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054dc:	d017      	beq.n	800550e <UART_SetConfig+0x272>
 80054de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054e2:	d817      	bhi.n	8005514 <UART_SetConfig+0x278>
 80054e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e8:	d00b      	beq.n	8005502 <UART_SetConfig+0x266>
 80054ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ee:	d811      	bhi.n	8005514 <UART_SetConfig+0x278>
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <UART_SetConfig+0x260>
 80054f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f8:	d006      	beq.n	8005508 <UART_SetConfig+0x26c>
 80054fa:	e00b      	b.n	8005514 <UART_SetConfig+0x278>
 80054fc:	2300      	movs	r3, #0
 80054fe:	76fb      	strb	r3, [r7, #27]
 8005500:	e00d      	b.n	800551e <UART_SetConfig+0x282>
 8005502:	2302      	movs	r3, #2
 8005504:	76fb      	strb	r3, [r7, #27]
 8005506:	e00a      	b.n	800551e <UART_SetConfig+0x282>
 8005508:	2304      	movs	r3, #4
 800550a:	76fb      	strb	r3, [r7, #27]
 800550c:	e007      	b.n	800551e <UART_SetConfig+0x282>
 800550e:	2308      	movs	r3, #8
 8005510:	76fb      	strb	r3, [r7, #27]
 8005512:	e004      	b.n	800551e <UART_SetConfig+0x282>
 8005514:	2310      	movs	r3, #16
 8005516:	76fb      	strb	r3, [r7, #27]
 8005518:	e001      	b.n	800551e <UART_SetConfig+0x282>
 800551a:	2310      	movs	r3, #16
 800551c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a17      	ldr	r2, [pc, #92]	; (8005580 <UART_SetConfig+0x2e4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	f040 8087 	bne.w	8005638 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800552a:	7efb      	ldrb	r3, [r7, #27]
 800552c:	2b08      	cmp	r3, #8
 800552e:	d837      	bhi.n	80055a0 <UART_SetConfig+0x304>
 8005530:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <UART_SetConfig+0x29c>)
 8005532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005536:	bf00      	nop
 8005538:	0800555d 	.word	0x0800555d
 800553c:	080055a1 	.word	0x080055a1
 8005540:	08005565 	.word	0x08005565
 8005544:	080055a1 	.word	0x080055a1
 8005548:	0800556b 	.word	0x0800556b
 800554c:	080055a1 	.word	0x080055a1
 8005550:	080055a1 	.word	0x080055a1
 8005554:	080055a1 	.word	0x080055a1
 8005558:	08005573 	.word	0x08005573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800555c:	f7fd fc5a 	bl	8002e14 <HAL_RCC_GetPCLK1Freq>
 8005560:	6178      	str	r0, [r7, #20]
        break;
 8005562:	e022      	b.n	80055aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005564:	4b0d      	ldr	r3, [pc, #52]	; (800559c <UART_SetConfig+0x300>)
 8005566:	617b      	str	r3, [r7, #20]
        break;
 8005568:	e01f      	b.n	80055aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800556a:	f7fd fbbb 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 800556e:	6178      	str	r0, [r7, #20]
        break;
 8005570:	e01b      	b.n	80055aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005576:	617b      	str	r3, [r7, #20]
        break;
 8005578:	e017      	b.n	80055aa <UART_SetConfig+0x30e>
 800557a:	bf00      	nop
 800557c:	efff69f3 	.word	0xefff69f3
 8005580:	40008000 	.word	0x40008000
 8005584:	40013800 	.word	0x40013800
 8005588:	40021000 	.word	0x40021000
 800558c:	40004400 	.word	0x40004400
 8005590:	40004800 	.word	0x40004800
 8005594:	40004c00 	.word	0x40004c00
 8005598:	40005000 	.word	0x40005000
 800559c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	76bb      	strb	r3, [r7, #26]
        break;
 80055a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 80f1 	beq.w	8005794 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	4613      	mov	r3, r2
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	4413      	add	r3, r2
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d305      	bcc.n	80055ce <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d902      	bls.n	80055d4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	76bb      	strb	r3, [r7, #26]
 80055d2:	e0df      	b.n	8005794 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f04f 0100 	mov.w	r1, #0
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	f04f 0300 	mov.w	r3, #0
 80055e4:	020b      	lsls	r3, r1, #8
 80055e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055ea:	0202      	lsls	r2, r0, #8
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	6849      	ldr	r1, [r1, #4]
 80055f0:	0849      	lsrs	r1, r1, #1
 80055f2:	4608      	mov	r0, r1
 80055f4:	f04f 0100 	mov.w	r1, #0
 80055f8:	1814      	adds	r4, r2, r0
 80055fa:	eb43 0501 	adc.w	r5, r3, r1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	461a      	mov	r2, r3
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	4620      	mov	r0, r4
 800560a:	4629      	mov	r1, r5
 800560c:	f7fb facc 	bl	8000ba8 <__aeabi_uldivmod>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4613      	mov	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800561e:	d308      	bcc.n	8005632 <UART_SetConfig+0x396>
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005626:	d204      	bcs.n	8005632 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	60da      	str	r2, [r3, #12]
 8005630:	e0b0      	b.n	8005794 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	76bb      	strb	r3, [r7, #26]
 8005636:	e0ad      	b.n	8005794 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005640:	d15c      	bne.n	80056fc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005642:	7efb      	ldrb	r3, [r7, #27]
 8005644:	2b08      	cmp	r3, #8
 8005646:	d828      	bhi.n	800569a <UART_SetConfig+0x3fe>
 8005648:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <UART_SetConfig+0x3b4>)
 800564a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564e:	bf00      	nop
 8005650:	08005675 	.word	0x08005675
 8005654:	0800567d 	.word	0x0800567d
 8005658:	08005685 	.word	0x08005685
 800565c:	0800569b 	.word	0x0800569b
 8005660:	0800568b 	.word	0x0800568b
 8005664:	0800569b 	.word	0x0800569b
 8005668:	0800569b 	.word	0x0800569b
 800566c:	0800569b 	.word	0x0800569b
 8005670:	08005693 	.word	0x08005693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005674:	f7fd fbce 	bl	8002e14 <HAL_RCC_GetPCLK1Freq>
 8005678:	6178      	str	r0, [r7, #20]
        break;
 800567a:	e013      	b.n	80056a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800567c:	f7fd fbe0 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
 8005680:	6178      	str	r0, [r7, #20]
        break;
 8005682:	e00f      	b.n	80056a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005684:	4b49      	ldr	r3, [pc, #292]	; (80057ac <UART_SetConfig+0x510>)
 8005686:	617b      	str	r3, [r7, #20]
        break;
 8005688:	e00c      	b.n	80056a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800568a:	f7fd fb2b 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 800568e:	6178      	str	r0, [r7, #20]
        break;
 8005690:	e008      	b.n	80056a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005696:	617b      	str	r3, [r7, #20]
        break;
 8005698:	e004      	b.n	80056a4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	76bb      	strb	r3, [r7, #26]
        break;
 80056a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d074      	beq.n	8005794 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	005a      	lsls	r2, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	441a      	add	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80056be:	b29b      	uxth	r3, r3
 80056c0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2b0f      	cmp	r3, #15
 80056c6:	d916      	bls.n	80056f6 <UART_SetConfig+0x45a>
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ce:	d212      	bcs.n	80056f6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	f023 030f 	bic.w	r3, r3, #15
 80056d8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	085b      	lsrs	r3, r3, #1
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	89fb      	ldrh	r3, [r7, #14]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	89fa      	ldrh	r2, [r7, #14]
 80056f2:	60da      	str	r2, [r3, #12]
 80056f4:	e04e      	b.n	8005794 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	76bb      	strb	r3, [r7, #26]
 80056fa:	e04b      	b.n	8005794 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056fc:	7efb      	ldrb	r3, [r7, #27]
 80056fe:	2b08      	cmp	r3, #8
 8005700:	d827      	bhi.n	8005752 <UART_SetConfig+0x4b6>
 8005702:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <UART_SetConfig+0x46c>)
 8005704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005708:	0800572d 	.word	0x0800572d
 800570c:	08005735 	.word	0x08005735
 8005710:	0800573d 	.word	0x0800573d
 8005714:	08005753 	.word	0x08005753
 8005718:	08005743 	.word	0x08005743
 800571c:	08005753 	.word	0x08005753
 8005720:	08005753 	.word	0x08005753
 8005724:	08005753 	.word	0x08005753
 8005728:	0800574b 	.word	0x0800574b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800572c:	f7fd fb72 	bl	8002e14 <HAL_RCC_GetPCLK1Freq>
 8005730:	6178      	str	r0, [r7, #20]
        break;
 8005732:	e013      	b.n	800575c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005734:	f7fd fb84 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
 8005738:	6178      	str	r0, [r7, #20]
        break;
 800573a:	e00f      	b.n	800575c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800573c:	4b1b      	ldr	r3, [pc, #108]	; (80057ac <UART_SetConfig+0x510>)
 800573e:	617b      	str	r3, [r7, #20]
        break;
 8005740:	e00c      	b.n	800575c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005742:	f7fd facf 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 8005746:	6178      	str	r0, [r7, #20]
        break;
 8005748:	e008      	b.n	800575c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800574a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800574e:	617b      	str	r3, [r7, #20]
        break;
 8005750:	e004      	b.n	800575c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	76bb      	strb	r3, [r7, #26]
        break;
 800575a:	bf00      	nop
    }

    if (pclk != 0U)
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d018      	beq.n	8005794 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	085a      	lsrs	r2, r3, #1
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	441a      	add	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	fbb2 f3f3 	udiv	r3, r2, r3
 8005774:	b29b      	uxth	r3, r3
 8005776:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	2b0f      	cmp	r3, #15
 800577c:	d908      	bls.n	8005790 <UART_SetConfig+0x4f4>
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005784:	d204      	bcs.n	8005790 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	60da      	str	r2, [r3, #12]
 800578e:	e001      	b.n	8005794 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80057a0:	7ebb      	ldrb	r3, [r7, #26]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3720      	adds	r7, #32
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bdb0      	pop	{r4, r5, r7, pc}
 80057aa:	bf00      	nop
 80057ac:	00f42400 	.word	0x00f42400

080057b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	f003 0310 	and.w	r3, r3, #16
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01a      	beq.n	80058c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ae:	d10a      	bne.n	80058c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	605a      	str	r2, [r3, #4]
  }
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005904:	f7fc f940 	bl	8001b88 <HAL_GetTick>
 8005908:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b08      	cmp	r3, #8
 8005916:	d10e      	bne.n	8005936 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005918:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f82d 	bl	8005986 <UART_WaitOnFlagUntilTimeout>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e023      	b.n	800597e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b04      	cmp	r3, #4
 8005942:	d10e      	bne.n	8005962 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005944:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f817 	bl	8005986 <UART_WaitOnFlagUntilTimeout>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e00d      	b.n	800597e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	603b      	str	r3, [r7, #0]
 8005992:	4613      	mov	r3, r2
 8005994:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005996:	e05e      	b.n	8005a56 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599e:	d05a      	beq.n	8005a56 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a0:	f7fc f8f2 	bl	8001b88 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d302      	bcc.n	80059b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d11b      	bne.n	80059ee <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059c4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0201 	bic.w	r2, r2, #1
 80059d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2220      	movs	r2, #32
 80059da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2220      	movs	r2, #32
 80059e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e043      	b.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d02c      	beq.n	8005a56 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a0a:	d124      	bne.n	8005a56 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a14:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a24:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0201 	bic.w	r2, r2, #1
 8005a34:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e00f      	b.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69da      	ldr	r2, [r3, #28]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	bf0c      	ite	eq
 8005a66:	2301      	moveq	r3, #1
 8005a68:	2300      	movne	r3, #0
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	79fb      	ldrb	r3, [r7, #7]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d091      	beq.n	8005998 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a94:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0201 	bic.w	r2, r2, #1
 8005aa4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d107      	bne.n	8005abe <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0210 	bic.w	r2, r2, #16
 8005abc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f7ff fbb8 	bl	8005270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b00:	bf00      	nop
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff fb95 	bl	800525c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b32:	bf00      	nop
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
	...

08005b50 <__errno>:
 8005b50:	4b01      	ldr	r3, [pc, #4]	; (8005b58 <__errno+0x8>)
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	2000000c 	.word	0x2000000c

08005b5c <__libc_init_array>:
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	4d0d      	ldr	r5, [pc, #52]	; (8005b94 <__libc_init_array+0x38>)
 8005b60:	4c0d      	ldr	r4, [pc, #52]	; (8005b98 <__libc_init_array+0x3c>)
 8005b62:	1b64      	subs	r4, r4, r5
 8005b64:	10a4      	asrs	r4, r4, #2
 8005b66:	2600      	movs	r6, #0
 8005b68:	42a6      	cmp	r6, r4
 8005b6a:	d109      	bne.n	8005b80 <__libc_init_array+0x24>
 8005b6c:	4d0b      	ldr	r5, [pc, #44]	; (8005b9c <__libc_init_array+0x40>)
 8005b6e:	4c0c      	ldr	r4, [pc, #48]	; (8005ba0 <__libc_init_array+0x44>)
 8005b70:	f002 feb4 	bl	80088dc <_init>
 8005b74:	1b64      	subs	r4, r4, r5
 8005b76:	10a4      	asrs	r4, r4, #2
 8005b78:	2600      	movs	r6, #0
 8005b7a:	42a6      	cmp	r6, r4
 8005b7c:	d105      	bne.n	8005b8a <__libc_init_array+0x2e>
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b84:	4798      	blx	r3
 8005b86:	3601      	adds	r6, #1
 8005b88:	e7ee      	b.n	8005b68 <__libc_init_array+0xc>
 8005b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b8e:	4798      	blx	r3
 8005b90:	3601      	adds	r6, #1
 8005b92:	e7f2      	b.n	8005b7a <__libc_init_array+0x1e>
 8005b94:	08008dcc 	.word	0x08008dcc
 8005b98:	08008dcc 	.word	0x08008dcc
 8005b9c:	08008dcc 	.word	0x08008dcc
 8005ba0:	08008dd0 	.word	0x08008dd0

08005ba4 <memset>:
 8005ba4:	4402      	add	r2, r0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d100      	bne.n	8005bae <memset+0xa>
 8005bac:	4770      	bx	lr
 8005bae:	f803 1b01 	strb.w	r1, [r3], #1
 8005bb2:	e7f9      	b.n	8005ba8 <memset+0x4>

08005bb4 <__cvt>:
 8005bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb8:	ec55 4b10 	vmov	r4, r5, d0
 8005bbc:	2d00      	cmp	r5, #0
 8005bbe:	460e      	mov	r6, r1
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	462b      	mov	r3, r5
 8005bc4:	bfbb      	ittet	lt
 8005bc6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005bca:	461d      	movlt	r5, r3
 8005bcc:	2300      	movge	r3, #0
 8005bce:	232d      	movlt	r3, #45	; 0x2d
 8005bd0:	700b      	strb	r3, [r1, #0]
 8005bd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bd4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005bd8:	4691      	mov	r9, r2
 8005bda:	f023 0820 	bic.w	r8, r3, #32
 8005bde:	bfbc      	itt	lt
 8005be0:	4622      	movlt	r2, r4
 8005be2:	4614      	movlt	r4, r2
 8005be4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005be8:	d005      	beq.n	8005bf6 <__cvt+0x42>
 8005bea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005bee:	d100      	bne.n	8005bf2 <__cvt+0x3e>
 8005bf0:	3601      	adds	r6, #1
 8005bf2:	2102      	movs	r1, #2
 8005bf4:	e000      	b.n	8005bf8 <__cvt+0x44>
 8005bf6:	2103      	movs	r1, #3
 8005bf8:	ab03      	add	r3, sp, #12
 8005bfa:	9301      	str	r3, [sp, #4]
 8005bfc:	ab02      	add	r3, sp, #8
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	ec45 4b10 	vmov	d0, r4, r5
 8005c04:	4653      	mov	r3, sl
 8005c06:	4632      	mov	r2, r6
 8005c08:	f000 fcea 	bl	80065e0 <_dtoa_r>
 8005c0c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c10:	4607      	mov	r7, r0
 8005c12:	d102      	bne.n	8005c1a <__cvt+0x66>
 8005c14:	f019 0f01 	tst.w	r9, #1
 8005c18:	d022      	beq.n	8005c60 <__cvt+0xac>
 8005c1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c1e:	eb07 0906 	add.w	r9, r7, r6
 8005c22:	d110      	bne.n	8005c46 <__cvt+0x92>
 8005c24:	783b      	ldrb	r3, [r7, #0]
 8005c26:	2b30      	cmp	r3, #48	; 0x30
 8005c28:	d10a      	bne.n	8005c40 <__cvt+0x8c>
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	4620      	mov	r0, r4
 8005c30:	4629      	mov	r1, r5
 8005c32:	f7fa ff49 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c36:	b918      	cbnz	r0, 8005c40 <__cvt+0x8c>
 8005c38:	f1c6 0601 	rsb	r6, r6, #1
 8005c3c:	f8ca 6000 	str.w	r6, [sl]
 8005c40:	f8da 3000 	ldr.w	r3, [sl]
 8005c44:	4499      	add	r9, r3
 8005c46:	2200      	movs	r2, #0
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	f7fa ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c52:	b108      	cbz	r0, 8005c58 <__cvt+0xa4>
 8005c54:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c58:	2230      	movs	r2, #48	; 0x30
 8005c5a:	9b03      	ldr	r3, [sp, #12]
 8005c5c:	454b      	cmp	r3, r9
 8005c5e:	d307      	bcc.n	8005c70 <__cvt+0xbc>
 8005c60:	9b03      	ldr	r3, [sp, #12]
 8005c62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c64:	1bdb      	subs	r3, r3, r7
 8005c66:	4638      	mov	r0, r7
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	b004      	add	sp, #16
 8005c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c70:	1c59      	adds	r1, r3, #1
 8005c72:	9103      	str	r1, [sp, #12]
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	e7f0      	b.n	8005c5a <__cvt+0xa6>

08005c78 <__exponent>:
 8005c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2900      	cmp	r1, #0
 8005c7e:	bfb8      	it	lt
 8005c80:	4249      	neglt	r1, r1
 8005c82:	f803 2b02 	strb.w	r2, [r3], #2
 8005c86:	bfb4      	ite	lt
 8005c88:	222d      	movlt	r2, #45	; 0x2d
 8005c8a:	222b      	movge	r2, #43	; 0x2b
 8005c8c:	2909      	cmp	r1, #9
 8005c8e:	7042      	strb	r2, [r0, #1]
 8005c90:	dd2a      	ble.n	8005ce8 <__exponent+0x70>
 8005c92:	f10d 0407 	add.w	r4, sp, #7
 8005c96:	46a4      	mov	ip, r4
 8005c98:	270a      	movs	r7, #10
 8005c9a:	46a6      	mov	lr, r4
 8005c9c:	460a      	mov	r2, r1
 8005c9e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005ca2:	fb07 1516 	mls	r5, r7, r6, r1
 8005ca6:	3530      	adds	r5, #48	; 0x30
 8005ca8:	2a63      	cmp	r2, #99	; 0x63
 8005caa:	f104 34ff 	add.w	r4, r4, #4294967295
 8005cae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	dcf1      	bgt.n	8005c9a <__exponent+0x22>
 8005cb6:	3130      	adds	r1, #48	; 0x30
 8005cb8:	f1ae 0502 	sub.w	r5, lr, #2
 8005cbc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005cc0:	1c44      	adds	r4, r0, #1
 8005cc2:	4629      	mov	r1, r5
 8005cc4:	4561      	cmp	r1, ip
 8005cc6:	d30a      	bcc.n	8005cde <__exponent+0x66>
 8005cc8:	f10d 0209 	add.w	r2, sp, #9
 8005ccc:	eba2 020e 	sub.w	r2, r2, lr
 8005cd0:	4565      	cmp	r5, ip
 8005cd2:	bf88      	it	hi
 8005cd4:	2200      	movhi	r2, #0
 8005cd6:	4413      	add	r3, r2
 8005cd8:	1a18      	subs	r0, r3, r0
 8005cda:	b003      	add	sp, #12
 8005cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ce2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005ce6:	e7ed      	b.n	8005cc4 <__exponent+0x4c>
 8005ce8:	2330      	movs	r3, #48	; 0x30
 8005cea:	3130      	adds	r1, #48	; 0x30
 8005cec:	7083      	strb	r3, [r0, #2]
 8005cee:	70c1      	strb	r1, [r0, #3]
 8005cf0:	1d03      	adds	r3, r0, #4
 8005cf2:	e7f1      	b.n	8005cd8 <__exponent+0x60>

08005cf4 <_printf_float>:
 8005cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf8:	ed2d 8b02 	vpush	{d8}
 8005cfc:	b08d      	sub	sp, #52	; 0x34
 8005cfe:	460c      	mov	r4, r1
 8005d00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d04:	4616      	mov	r6, r2
 8005d06:	461f      	mov	r7, r3
 8005d08:	4605      	mov	r5, r0
 8005d0a:	f001 fa55 	bl	80071b8 <_localeconv_r>
 8005d0e:	f8d0 a000 	ldr.w	sl, [r0]
 8005d12:	4650      	mov	r0, sl
 8005d14:	f7fa fa5c 	bl	80001d0 <strlen>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	9305      	str	r3, [sp, #20]
 8005d20:	f8d8 3000 	ldr.w	r3, [r8]
 8005d24:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d28:	3307      	adds	r3, #7
 8005d2a:	f023 0307 	bic.w	r3, r3, #7
 8005d2e:	f103 0208 	add.w	r2, r3, #8
 8005d32:	f8c8 2000 	str.w	r2, [r8]
 8005d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d3e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005d42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d46:	9307      	str	r3, [sp, #28]
 8005d48:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d4c:	ee08 0a10 	vmov	s16, r0
 8005d50:	4b9f      	ldr	r3, [pc, #636]	; (8005fd0 <_printf_float+0x2dc>)
 8005d52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d56:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5a:	f7fa fee7 	bl	8000b2c <__aeabi_dcmpun>
 8005d5e:	bb88      	cbnz	r0, 8005dc4 <_printf_float+0xd0>
 8005d60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d64:	4b9a      	ldr	r3, [pc, #616]	; (8005fd0 <_printf_float+0x2dc>)
 8005d66:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6a:	f7fa fec1 	bl	8000af0 <__aeabi_dcmple>
 8005d6e:	bb48      	cbnz	r0, 8005dc4 <_printf_float+0xd0>
 8005d70:	2200      	movs	r2, #0
 8005d72:	2300      	movs	r3, #0
 8005d74:	4640      	mov	r0, r8
 8005d76:	4649      	mov	r1, r9
 8005d78:	f7fa feb0 	bl	8000adc <__aeabi_dcmplt>
 8005d7c:	b110      	cbz	r0, 8005d84 <_printf_float+0x90>
 8005d7e:	232d      	movs	r3, #45	; 0x2d
 8005d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d84:	4b93      	ldr	r3, [pc, #588]	; (8005fd4 <_printf_float+0x2e0>)
 8005d86:	4894      	ldr	r0, [pc, #592]	; (8005fd8 <_printf_float+0x2e4>)
 8005d88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005d8c:	bf94      	ite	ls
 8005d8e:	4698      	movls	r8, r3
 8005d90:	4680      	movhi	r8, r0
 8005d92:	2303      	movs	r3, #3
 8005d94:	6123      	str	r3, [r4, #16]
 8005d96:	9b05      	ldr	r3, [sp, #20]
 8005d98:	f023 0204 	bic.w	r2, r3, #4
 8005d9c:	6022      	str	r2, [r4, #0]
 8005d9e:	f04f 0900 	mov.w	r9, #0
 8005da2:	9700      	str	r7, [sp, #0]
 8005da4:	4633      	mov	r3, r6
 8005da6:	aa0b      	add	r2, sp, #44	; 0x2c
 8005da8:	4621      	mov	r1, r4
 8005daa:	4628      	mov	r0, r5
 8005dac:	f000 f9d8 	bl	8006160 <_printf_common>
 8005db0:	3001      	adds	r0, #1
 8005db2:	f040 8090 	bne.w	8005ed6 <_printf_float+0x1e2>
 8005db6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dba:	b00d      	add	sp, #52	; 0x34
 8005dbc:	ecbd 8b02 	vpop	{d8}
 8005dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc4:	4642      	mov	r2, r8
 8005dc6:	464b      	mov	r3, r9
 8005dc8:	4640      	mov	r0, r8
 8005dca:	4649      	mov	r1, r9
 8005dcc:	f7fa feae 	bl	8000b2c <__aeabi_dcmpun>
 8005dd0:	b140      	cbz	r0, 8005de4 <_printf_float+0xf0>
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	bfbc      	itt	lt
 8005dd8:	232d      	movlt	r3, #45	; 0x2d
 8005dda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005dde:	487f      	ldr	r0, [pc, #508]	; (8005fdc <_printf_float+0x2e8>)
 8005de0:	4b7f      	ldr	r3, [pc, #508]	; (8005fe0 <_printf_float+0x2ec>)
 8005de2:	e7d1      	b.n	8005d88 <_printf_float+0x94>
 8005de4:	6863      	ldr	r3, [r4, #4]
 8005de6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005dea:	9206      	str	r2, [sp, #24]
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	d13f      	bne.n	8005e70 <_printf_float+0x17c>
 8005df0:	2306      	movs	r3, #6
 8005df2:	6063      	str	r3, [r4, #4]
 8005df4:	9b05      	ldr	r3, [sp, #20]
 8005df6:	6861      	ldr	r1, [r4, #4]
 8005df8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	9303      	str	r3, [sp, #12]
 8005e00:	ab0a      	add	r3, sp, #40	; 0x28
 8005e02:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e06:	ab09      	add	r3, sp, #36	; 0x24
 8005e08:	ec49 8b10 	vmov	d0, r8, r9
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	6022      	str	r2, [r4, #0]
 8005e10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e14:	4628      	mov	r0, r5
 8005e16:	f7ff fecd 	bl	8005bb4 <__cvt>
 8005e1a:	9b06      	ldr	r3, [sp, #24]
 8005e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e1e:	2b47      	cmp	r3, #71	; 0x47
 8005e20:	4680      	mov	r8, r0
 8005e22:	d108      	bne.n	8005e36 <_printf_float+0x142>
 8005e24:	1cc8      	adds	r0, r1, #3
 8005e26:	db02      	blt.n	8005e2e <_printf_float+0x13a>
 8005e28:	6863      	ldr	r3, [r4, #4]
 8005e2a:	4299      	cmp	r1, r3
 8005e2c:	dd41      	ble.n	8005eb2 <_printf_float+0x1be>
 8005e2e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005e32:	fa5f fb8b 	uxtb.w	fp, fp
 8005e36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e3a:	d820      	bhi.n	8005e7e <_printf_float+0x18a>
 8005e3c:	3901      	subs	r1, #1
 8005e3e:	465a      	mov	r2, fp
 8005e40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e44:	9109      	str	r1, [sp, #36]	; 0x24
 8005e46:	f7ff ff17 	bl	8005c78 <__exponent>
 8005e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e4c:	1813      	adds	r3, r2, r0
 8005e4e:	2a01      	cmp	r2, #1
 8005e50:	4681      	mov	r9, r0
 8005e52:	6123      	str	r3, [r4, #16]
 8005e54:	dc02      	bgt.n	8005e5c <_printf_float+0x168>
 8005e56:	6822      	ldr	r2, [r4, #0]
 8005e58:	07d2      	lsls	r2, r2, #31
 8005e5a:	d501      	bpl.n	8005e60 <_printf_float+0x16c>
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	6123      	str	r3, [r4, #16]
 8005e60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d09c      	beq.n	8005da2 <_printf_float+0xae>
 8005e68:	232d      	movs	r3, #45	; 0x2d
 8005e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e6e:	e798      	b.n	8005da2 <_printf_float+0xae>
 8005e70:	9a06      	ldr	r2, [sp, #24]
 8005e72:	2a47      	cmp	r2, #71	; 0x47
 8005e74:	d1be      	bne.n	8005df4 <_printf_float+0x100>
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1bc      	bne.n	8005df4 <_printf_float+0x100>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e7b9      	b.n	8005df2 <_printf_float+0xfe>
 8005e7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005e82:	d118      	bne.n	8005eb6 <_printf_float+0x1c2>
 8005e84:	2900      	cmp	r1, #0
 8005e86:	6863      	ldr	r3, [r4, #4]
 8005e88:	dd0b      	ble.n	8005ea2 <_printf_float+0x1ae>
 8005e8a:	6121      	str	r1, [r4, #16]
 8005e8c:	b913      	cbnz	r3, 8005e94 <_printf_float+0x1a0>
 8005e8e:	6822      	ldr	r2, [r4, #0]
 8005e90:	07d0      	lsls	r0, r2, #31
 8005e92:	d502      	bpl.n	8005e9a <_printf_float+0x1a6>
 8005e94:	3301      	adds	r3, #1
 8005e96:	440b      	add	r3, r1
 8005e98:	6123      	str	r3, [r4, #16]
 8005e9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e9c:	f04f 0900 	mov.w	r9, #0
 8005ea0:	e7de      	b.n	8005e60 <_printf_float+0x16c>
 8005ea2:	b913      	cbnz	r3, 8005eaa <_printf_float+0x1b6>
 8005ea4:	6822      	ldr	r2, [r4, #0]
 8005ea6:	07d2      	lsls	r2, r2, #31
 8005ea8:	d501      	bpl.n	8005eae <_printf_float+0x1ba>
 8005eaa:	3302      	adds	r3, #2
 8005eac:	e7f4      	b.n	8005e98 <_printf_float+0x1a4>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e7f2      	b.n	8005e98 <_printf_float+0x1a4>
 8005eb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eb8:	4299      	cmp	r1, r3
 8005eba:	db05      	blt.n	8005ec8 <_printf_float+0x1d4>
 8005ebc:	6823      	ldr	r3, [r4, #0]
 8005ebe:	6121      	str	r1, [r4, #16]
 8005ec0:	07d8      	lsls	r0, r3, #31
 8005ec2:	d5ea      	bpl.n	8005e9a <_printf_float+0x1a6>
 8005ec4:	1c4b      	adds	r3, r1, #1
 8005ec6:	e7e7      	b.n	8005e98 <_printf_float+0x1a4>
 8005ec8:	2900      	cmp	r1, #0
 8005eca:	bfd4      	ite	le
 8005ecc:	f1c1 0202 	rsble	r2, r1, #2
 8005ed0:	2201      	movgt	r2, #1
 8005ed2:	4413      	add	r3, r2
 8005ed4:	e7e0      	b.n	8005e98 <_printf_float+0x1a4>
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	055a      	lsls	r2, r3, #21
 8005eda:	d407      	bmi.n	8005eec <_printf_float+0x1f8>
 8005edc:	6923      	ldr	r3, [r4, #16]
 8005ede:	4642      	mov	r2, r8
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	47b8      	blx	r7
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	d12c      	bne.n	8005f44 <_printf_float+0x250>
 8005eea:	e764      	b.n	8005db6 <_printf_float+0xc2>
 8005eec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ef0:	f240 80e0 	bls.w	80060b4 <_printf_float+0x3c0>
 8005ef4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2300      	movs	r3, #0
 8005efc:	f7fa fde4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	d034      	beq.n	8005f6e <_printf_float+0x27a>
 8005f04:	4a37      	ldr	r2, [pc, #220]	; (8005fe4 <_printf_float+0x2f0>)
 8005f06:	2301      	movs	r3, #1
 8005f08:	4631      	mov	r1, r6
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	47b8      	blx	r7
 8005f0e:	3001      	adds	r0, #1
 8005f10:	f43f af51 	beq.w	8005db6 <_printf_float+0xc2>
 8005f14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	db02      	blt.n	8005f22 <_printf_float+0x22e>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	07d8      	lsls	r0, r3, #31
 8005f20:	d510      	bpl.n	8005f44 <_printf_float+0x250>
 8005f22:	ee18 3a10 	vmov	r3, s16
 8005f26:	4652      	mov	r2, sl
 8005f28:	4631      	mov	r1, r6
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	47b8      	blx	r7
 8005f2e:	3001      	adds	r0, #1
 8005f30:	f43f af41 	beq.w	8005db6 <_printf_float+0xc2>
 8005f34:	f04f 0800 	mov.w	r8, #0
 8005f38:	f104 091a 	add.w	r9, r4, #26
 8005f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	4543      	cmp	r3, r8
 8005f42:	dc09      	bgt.n	8005f58 <_printf_float+0x264>
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	079b      	lsls	r3, r3, #30
 8005f48:	f100 8105 	bmi.w	8006156 <_printf_float+0x462>
 8005f4c:	68e0      	ldr	r0, [r4, #12]
 8005f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f50:	4298      	cmp	r0, r3
 8005f52:	bfb8      	it	lt
 8005f54:	4618      	movlt	r0, r3
 8005f56:	e730      	b.n	8005dba <_printf_float+0xc6>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	464a      	mov	r2, r9
 8005f5c:	4631      	mov	r1, r6
 8005f5e:	4628      	mov	r0, r5
 8005f60:	47b8      	blx	r7
 8005f62:	3001      	adds	r0, #1
 8005f64:	f43f af27 	beq.w	8005db6 <_printf_float+0xc2>
 8005f68:	f108 0801 	add.w	r8, r8, #1
 8005f6c:	e7e6      	b.n	8005f3c <_printf_float+0x248>
 8005f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	dc39      	bgt.n	8005fe8 <_printf_float+0x2f4>
 8005f74:	4a1b      	ldr	r2, [pc, #108]	; (8005fe4 <_printf_float+0x2f0>)
 8005f76:	2301      	movs	r3, #1
 8005f78:	4631      	mov	r1, r6
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	47b8      	blx	r7
 8005f7e:	3001      	adds	r0, #1
 8005f80:	f43f af19 	beq.w	8005db6 <_printf_float+0xc2>
 8005f84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	d102      	bne.n	8005f92 <_printf_float+0x29e>
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	07d9      	lsls	r1, r3, #31
 8005f90:	d5d8      	bpl.n	8005f44 <_printf_float+0x250>
 8005f92:	ee18 3a10 	vmov	r3, s16
 8005f96:	4652      	mov	r2, sl
 8005f98:	4631      	mov	r1, r6
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b8      	blx	r7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	f43f af09 	beq.w	8005db6 <_printf_float+0xc2>
 8005fa4:	f04f 0900 	mov.w	r9, #0
 8005fa8:	f104 0a1a 	add.w	sl, r4, #26
 8005fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fae:	425b      	negs	r3, r3
 8005fb0:	454b      	cmp	r3, r9
 8005fb2:	dc01      	bgt.n	8005fb8 <_printf_float+0x2c4>
 8005fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fb6:	e792      	b.n	8005ede <_printf_float+0x1ea>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	4652      	mov	r2, sl
 8005fbc:	4631      	mov	r1, r6
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	47b8      	blx	r7
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	f43f aef7 	beq.w	8005db6 <_printf_float+0xc2>
 8005fc8:	f109 0901 	add.w	r9, r9, #1
 8005fcc:	e7ee      	b.n	8005fac <_printf_float+0x2b8>
 8005fce:	bf00      	nop
 8005fd0:	7fefffff 	.word	0x7fefffff
 8005fd4:	080089e4 	.word	0x080089e4
 8005fd8:	080089e8 	.word	0x080089e8
 8005fdc:	080089f0 	.word	0x080089f0
 8005fe0:	080089ec 	.word	0x080089ec
 8005fe4:	080089f4 	.word	0x080089f4
 8005fe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fec:	429a      	cmp	r2, r3
 8005fee:	bfa8      	it	ge
 8005ff0:	461a      	movge	r2, r3
 8005ff2:	2a00      	cmp	r2, #0
 8005ff4:	4691      	mov	r9, r2
 8005ff6:	dc37      	bgt.n	8006068 <_printf_float+0x374>
 8005ff8:	f04f 0b00 	mov.w	fp, #0
 8005ffc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006000:	f104 021a 	add.w	r2, r4, #26
 8006004:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006006:	9305      	str	r3, [sp, #20]
 8006008:	eba3 0309 	sub.w	r3, r3, r9
 800600c:	455b      	cmp	r3, fp
 800600e:	dc33      	bgt.n	8006078 <_printf_float+0x384>
 8006010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006014:	429a      	cmp	r2, r3
 8006016:	db3b      	blt.n	8006090 <_printf_float+0x39c>
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	07da      	lsls	r2, r3, #31
 800601c:	d438      	bmi.n	8006090 <_printf_float+0x39c>
 800601e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006020:	9b05      	ldr	r3, [sp, #20]
 8006022:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	eba2 0901 	sub.w	r9, r2, r1
 800602a:	4599      	cmp	r9, r3
 800602c:	bfa8      	it	ge
 800602e:	4699      	movge	r9, r3
 8006030:	f1b9 0f00 	cmp.w	r9, #0
 8006034:	dc35      	bgt.n	80060a2 <_printf_float+0x3ae>
 8006036:	f04f 0800 	mov.w	r8, #0
 800603a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800603e:	f104 0a1a 	add.w	sl, r4, #26
 8006042:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006046:	1a9b      	subs	r3, r3, r2
 8006048:	eba3 0309 	sub.w	r3, r3, r9
 800604c:	4543      	cmp	r3, r8
 800604e:	f77f af79 	ble.w	8005f44 <_printf_float+0x250>
 8006052:	2301      	movs	r3, #1
 8006054:	4652      	mov	r2, sl
 8006056:	4631      	mov	r1, r6
 8006058:	4628      	mov	r0, r5
 800605a:	47b8      	blx	r7
 800605c:	3001      	adds	r0, #1
 800605e:	f43f aeaa 	beq.w	8005db6 <_printf_float+0xc2>
 8006062:	f108 0801 	add.w	r8, r8, #1
 8006066:	e7ec      	b.n	8006042 <_printf_float+0x34e>
 8006068:	4613      	mov	r3, r2
 800606a:	4631      	mov	r1, r6
 800606c:	4642      	mov	r2, r8
 800606e:	4628      	mov	r0, r5
 8006070:	47b8      	blx	r7
 8006072:	3001      	adds	r0, #1
 8006074:	d1c0      	bne.n	8005ff8 <_printf_float+0x304>
 8006076:	e69e      	b.n	8005db6 <_printf_float+0xc2>
 8006078:	2301      	movs	r3, #1
 800607a:	4631      	mov	r1, r6
 800607c:	4628      	mov	r0, r5
 800607e:	9205      	str	r2, [sp, #20]
 8006080:	47b8      	blx	r7
 8006082:	3001      	adds	r0, #1
 8006084:	f43f ae97 	beq.w	8005db6 <_printf_float+0xc2>
 8006088:	9a05      	ldr	r2, [sp, #20]
 800608a:	f10b 0b01 	add.w	fp, fp, #1
 800608e:	e7b9      	b.n	8006004 <_printf_float+0x310>
 8006090:	ee18 3a10 	vmov	r3, s16
 8006094:	4652      	mov	r2, sl
 8006096:	4631      	mov	r1, r6
 8006098:	4628      	mov	r0, r5
 800609a:	47b8      	blx	r7
 800609c:	3001      	adds	r0, #1
 800609e:	d1be      	bne.n	800601e <_printf_float+0x32a>
 80060a0:	e689      	b.n	8005db6 <_printf_float+0xc2>
 80060a2:	9a05      	ldr	r2, [sp, #20]
 80060a4:	464b      	mov	r3, r9
 80060a6:	4442      	add	r2, r8
 80060a8:	4631      	mov	r1, r6
 80060aa:	4628      	mov	r0, r5
 80060ac:	47b8      	blx	r7
 80060ae:	3001      	adds	r0, #1
 80060b0:	d1c1      	bne.n	8006036 <_printf_float+0x342>
 80060b2:	e680      	b.n	8005db6 <_printf_float+0xc2>
 80060b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060b6:	2a01      	cmp	r2, #1
 80060b8:	dc01      	bgt.n	80060be <_printf_float+0x3ca>
 80060ba:	07db      	lsls	r3, r3, #31
 80060bc:	d538      	bpl.n	8006130 <_printf_float+0x43c>
 80060be:	2301      	movs	r3, #1
 80060c0:	4642      	mov	r2, r8
 80060c2:	4631      	mov	r1, r6
 80060c4:	4628      	mov	r0, r5
 80060c6:	47b8      	blx	r7
 80060c8:	3001      	adds	r0, #1
 80060ca:	f43f ae74 	beq.w	8005db6 <_printf_float+0xc2>
 80060ce:	ee18 3a10 	vmov	r3, s16
 80060d2:	4652      	mov	r2, sl
 80060d4:	4631      	mov	r1, r6
 80060d6:	4628      	mov	r0, r5
 80060d8:	47b8      	blx	r7
 80060da:	3001      	adds	r0, #1
 80060dc:	f43f ae6b 	beq.w	8005db6 <_printf_float+0xc2>
 80060e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060e4:	2200      	movs	r2, #0
 80060e6:	2300      	movs	r3, #0
 80060e8:	f7fa fcee 	bl	8000ac8 <__aeabi_dcmpeq>
 80060ec:	b9d8      	cbnz	r0, 8006126 <_printf_float+0x432>
 80060ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060f0:	f108 0201 	add.w	r2, r8, #1
 80060f4:	3b01      	subs	r3, #1
 80060f6:	4631      	mov	r1, r6
 80060f8:	4628      	mov	r0, r5
 80060fa:	47b8      	blx	r7
 80060fc:	3001      	adds	r0, #1
 80060fe:	d10e      	bne.n	800611e <_printf_float+0x42a>
 8006100:	e659      	b.n	8005db6 <_printf_float+0xc2>
 8006102:	2301      	movs	r3, #1
 8006104:	4652      	mov	r2, sl
 8006106:	4631      	mov	r1, r6
 8006108:	4628      	mov	r0, r5
 800610a:	47b8      	blx	r7
 800610c:	3001      	adds	r0, #1
 800610e:	f43f ae52 	beq.w	8005db6 <_printf_float+0xc2>
 8006112:	f108 0801 	add.w	r8, r8, #1
 8006116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006118:	3b01      	subs	r3, #1
 800611a:	4543      	cmp	r3, r8
 800611c:	dcf1      	bgt.n	8006102 <_printf_float+0x40e>
 800611e:	464b      	mov	r3, r9
 8006120:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006124:	e6dc      	b.n	8005ee0 <_printf_float+0x1ec>
 8006126:	f04f 0800 	mov.w	r8, #0
 800612a:	f104 0a1a 	add.w	sl, r4, #26
 800612e:	e7f2      	b.n	8006116 <_printf_float+0x422>
 8006130:	2301      	movs	r3, #1
 8006132:	4642      	mov	r2, r8
 8006134:	e7df      	b.n	80060f6 <_printf_float+0x402>
 8006136:	2301      	movs	r3, #1
 8006138:	464a      	mov	r2, r9
 800613a:	4631      	mov	r1, r6
 800613c:	4628      	mov	r0, r5
 800613e:	47b8      	blx	r7
 8006140:	3001      	adds	r0, #1
 8006142:	f43f ae38 	beq.w	8005db6 <_printf_float+0xc2>
 8006146:	f108 0801 	add.w	r8, r8, #1
 800614a:	68e3      	ldr	r3, [r4, #12]
 800614c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800614e:	1a5b      	subs	r3, r3, r1
 8006150:	4543      	cmp	r3, r8
 8006152:	dcf0      	bgt.n	8006136 <_printf_float+0x442>
 8006154:	e6fa      	b.n	8005f4c <_printf_float+0x258>
 8006156:	f04f 0800 	mov.w	r8, #0
 800615a:	f104 0919 	add.w	r9, r4, #25
 800615e:	e7f4      	b.n	800614a <_printf_float+0x456>

08006160 <_printf_common>:
 8006160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006164:	4616      	mov	r6, r2
 8006166:	4699      	mov	r9, r3
 8006168:	688a      	ldr	r2, [r1, #8]
 800616a:	690b      	ldr	r3, [r1, #16]
 800616c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006170:	4293      	cmp	r3, r2
 8006172:	bfb8      	it	lt
 8006174:	4613      	movlt	r3, r2
 8006176:	6033      	str	r3, [r6, #0]
 8006178:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800617c:	4607      	mov	r7, r0
 800617e:	460c      	mov	r4, r1
 8006180:	b10a      	cbz	r2, 8006186 <_printf_common+0x26>
 8006182:	3301      	adds	r3, #1
 8006184:	6033      	str	r3, [r6, #0]
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	0699      	lsls	r1, r3, #26
 800618a:	bf42      	ittt	mi
 800618c:	6833      	ldrmi	r3, [r6, #0]
 800618e:	3302      	addmi	r3, #2
 8006190:	6033      	strmi	r3, [r6, #0]
 8006192:	6825      	ldr	r5, [r4, #0]
 8006194:	f015 0506 	ands.w	r5, r5, #6
 8006198:	d106      	bne.n	80061a8 <_printf_common+0x48>
 800619a:	f104 0a19 	add.w	sl, r4, #25
 800619e:	68e3      	ldr	r3, [r4, #12]
 80061a0:	6832      	ldr	r2, [r6, #0]
 80061a2:	1a9b      	subs	r3, r3, r2
 80061a4:	42ab      	cmp	r3, r5
 80061a6:	dc26      	bgt.n	80061f6 <_printf_common+0x96>
 80061a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061ac:	1e13      	subs	r3, r2, #0
 80061ae:	6822      	ldr	r2, [r4, #0]
 80061b0:	bf18      	it	ne
 80061b2:	2301      	movne	r3, #1
 80061b4:	0692      	lsls	r2, r2, #26
 80061b6:	d42b      	bmi.n	8006210 <_printf_common+0xb0>
 80061b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061bc:	4649      	mov	r1, r9
 80061be:	4638      	mov	r0, r7
 80061c0:	47c0      	blx	r8
 80061c2:	3001      	adds	r0, #1
 80061c4:	d01e      	beq.n	8006204 <_printf_common+0xa4>
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	68e5      	ldr	r5, [r4, #12]
 80061ca:	6832      	ldr	r2, [r6, #0]
 80061cc:	f003 0306 	and.w	r3, r3, #6
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	bf08      	it	eq
 80061d4:	1aad      	subeq	r5, r5, r2
 80061d6:	68a3      	ldr	r3, [r4, #8]
 80061d8:	6922      	ldr	r2, [r4, #16]
 80061da:	bf0c      	ite	eq
 80061dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061e0:	2500      	movne	r5, #0
 80061e2:	4293      	cmp	r3, r2
 80061e4:	bfc4      	itt	gt
 80061e6:	1a9b      	subgt	r3, r3, r2
 80061e8:	18ed      	addgt	r5, r5, r3
 80061ea:	2600      	movs	r6, #0
 80061ec:	341a      	adds	r4, #26
 80061ee:	42b5      	cmp	r5, r6
 80061f0:	d11a      	bne.n	8006228 <_printf_common+0xc8>
 80061f2:	2000      	movs	r0, #0
 80061f4:	e008      	b.n	8006208 <_printf_common+0xa8>
 80061f6:	2301      	movs	r3, #1
 80061f8:	4652      	mov	r2, sl
 80061fa:	4649      	mov	r1, r9
 80061fc:	4638      	mov	r0, r7
 80061fe:	47c0      	blx	r8
 8006200:	3001      	adds	r0, #1
 8006202:	d103      	bne.n	800620c <_printf_common+0xac>
 8006204:	f04f 30ff 	mov.w	r0, #4294967295
 8006208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800620c:	3501      	adds	r5, #1
 800620e:	e7c6      	b.n	800619e <_printf_common+0x3e>
 8006210:	18e1      	adds	r1, r4, r3
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	2030      	movs	r0, #48	; 0x30
 8006216:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800621a:	4422      	add	r2, r4
 800621c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006220:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006224:	3302      	adds	r3, #2
 8006226:	e7c7      	b.n	80061b8 <_printf_common+0x58>
 8006228:	2301      	movs	r3, #1
 800622a:	4622      	mov	r2, r4
 800622c:	4649      	mov	r1, r9
 800622e:	4638      	mov	r0, r7
 8006230:	47c0      	blx	r8
 8006232:	3001      	adds	r0, #1
 8006234:	d0e6      	beq.n	8006204 <_printf_common+0xa4>
 8006236:	3601      	adds	r6, #1
 8006238:	e7d9      	b.n	80061ee <_printf_common+0x8e>
	...

0800623c <_printf_i>:
 800623c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006240:	460c      	mov	r4, r1
 8006242:	4691      	mov	r9, r2
 8006244:	7e27      	ldrb	r7, [r4, #24]
 8006246:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006248:	2f78      	cmp	r7, #120	; 0x78
 800624a:	4680      	mov	r8, r0
 800624c:	469a      	mov	sl, r3
 800624e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006252:	d807      	bhi.n	8006264 <_printf_i+0x28>
 8006254:	2f62      	cmp	r7, #98	; 0x62
 8006256:	d80a      	bhi.n	800626e <_printf_i+0x32>
 8006258:	2f00      	cmp	r7, #0
 800625a:	f000 80d8 	beq.w	800640e <_printf_i+0x1d2>
 800625e:	2f58      	cmp	r7, #88	; 0x58
 8006260:	f000 80a3 	beq.w	80063aa <_printf_i+0x16e>
 8006264:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006268:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800626c:	e03a      	b.n	80062e4 <_printf_i+0xa8>
 800626e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006272:	2b15      	cmp	r3, #21
 8006274:	d8f6      	bhi.n	8006264 <_printf_i+0x28>
 8006276:	a001      	add	r0, pc, #4	; (adr r0, 800627c <_printf_i+0x40>)
 8006278:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800627c:	080062d5 	.word	0x080062d5
 8006280:	080062e9 	.word	0x080062e9
 8006284:	08006265 	.word	0x08006265
 8006288:	08006265 	.word	0x08006265
 800628c:	08006265 	.word	0x08006265
 8006290:	08006265 	.word	0x08006265
 8006294:	080062e9 	.word	0x080062e9
 8006298:	08006265 	.word	0x08006265
 800629c:	08006265 	.word	0x08006265
 80062a0:	08006265 	.word	0x08006265
 80062a4:	08006265 	.word	0x08006265
 80062a8:	080063f5 	.word	0x080063f5
 80062ac:	08006319 	.word	0x08006319
 80062b0:	080063d7 	.word	0x080063d7
 80062b4:	08006265 	.word	0x08006265
 80062b8:	08006265 	.word	0x08006265
 80062bc:	08006417 	.word	0x08006417
 80062c0:	08006265 	.word	0x08006265
 80062c4:	08006319 	.word	0x08006319
 80062c8:	08006265 	.word	0x08006265
 80062cc:	08006265 	.word	0x08006265
 80062d0:	080063df 	.word	0x080063df
 80062d4:	680b      	ldr	r3, [r1, #0]
 80062d6:	1d1a      	adds	r2, r3, #4
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	600a      	str	r2, [r1, #0]
 80062dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80062e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062e4:	2301      	movs	r3, #1
 80062e6:	e0a3      	b.n	8006430 <_printf_i+0x1f4>
 80062e8:	6825      	ldr	r5, [r4, #0]
 80062ea:	6808      	ldr	r0, [r1, #0]
 80062ec:	062e      	lsls	r6, r5, #24
 80062ee:	f100 0304 	add.w	r3, r0, #4
 80062f2:	d50a      	bpl.n	800630a <_printf_i+0xce>
 80062f4:	6805      	ldr	r5, [r0, #0]
 80062f6:	600b      	str	r3, [r1, #0]
 80062f8:	2d00      	cmp	r5, #0
 80062fa:	da03      	bge.n	8006304 <_printf_i+0xc8>
 80062fc:	232d      	movs	r3, #45	; 0x2d
 80062fe:	426d      	negs	r5, r5
 8006300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006304:	485e      	ldr	r0, [pc, #376]	; (8006480 <_printf_i+0x244>)
 8006306:	230a      	movs	r3, #10
 8006308:	e019      	b.n	800633e <_printf_i+0x102>
 800630a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800630e:	6805      	ldr	r5, [r0, #0]
 8006310:	600b      	str	r3, [r1, #0]
 8006312:	bf18      	it	ne
 8006314:	b22d      	sxthne	r5, r5
 8006316:	e7ef      	b.n	80062f8 <_printf_i+0xbc>
 8006318:	680b      	ldr	r3, [r1, #0]
 800631a:	6825      	ldr	r5, [r4, #0]
 800631c:	1d18      	adds	r0, r3, #4
 800631e:	6008      	str	r0, [r1, #0]
 8006320:	0628      	lsls	r0, r5, #24
 8006322:	d501      	bpl.n	8006328 <_printf_i+0xec>
 8006324:	681d      	ldr	r5, [r3, #0]
 8006326:	e002      	b.n	800632e <_printf_i+0xf2>
 8006328:	0669      	lsls	r1, r5, #25
 800632a:	d5fb      	bpl.n	8006324 <_printf_i+0xe8>
 800632c:	881d      	ldrh	r5, [r3, #0]
 800632e:	4854      	ldr	r0, [pc, #336]	; (8006480 <_printf_i+0x244>)
 8006330:	2f6f      	cmp	r7, #111	; 0x6f
 8006332:	bf0c      	ite	eq
 8006334:	2308      	moveq	r3, #8
 8006336:	230a      	movne	r3, #10
 8006338:	2100      	movs	r1, #0
 800633a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800633e:	6866      	ldr	r6, [r4, #4]
 8006340:	60a6      	str	r6, [r4, #8]
 8006342:	2e00      	cmp	r6, #0
 8006344:	bfa2      	ittt	ge
 8006346:	6821      	ldrge	r1, [r4, #0]
 8006348:	f021 0104 	bicge.w	r1, r1, #4
 800634c:	6021      	strge	r1, [r4, #0]
 800634e:	b90d      	cbnz	r5, 8006354 <_printf_i+0x118>
 8006350:	2e00      	cmp	r6, #0
 8006352:	d04d      	beq.n	80063f0 <_printf_i+0x1b4>
 8006354:	4616      	mov	r6, r2
 8006356:	fbb5 f1f3 	udiv	r1, r5, r3
 800635a:	fb03 5711 	mls	r7, r3, r1, r5
 800635e:	5dc7      	ldrb	r7, [r0, r7]
 8006360:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006364:	462f      	mov	r7, r5
 8006366:	42bb      	cmp	r3, r7
 8006368:	460d      	mov	r5, r1
 800636a:	d9f4      	bls.n	8006356 <_printf_i+0x11a>
 800636c:	2b08      	cmp	r3, #8
 800636e:	d10b      	bne.n	8006388 <_printf_i+0x14c>
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	07df      	lsls	r7, r3, #31
 8006374:	d508      	bpl.n	8006388 <_printf_i+0x14c>
 8006376:	6923      	ldr	r3, [r4, #16]
 8006378:	6861      	ldr	r1, [r4, #4]
 800637a:	4299      	cmp	r1, r3
 800637c:	bfde      	ittt	le
 800637e:	2330      	movle	r3, #48	; 0x30
 8006380:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006384:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006388:	1b92      	subs	r2, r2, r6
 800638a:	6122      	str	r2, [r4, #16]
 800638c:	f8cd a000 	str.w	sl, [sp]
 8006390:	464b      	mov	r3, r9
 8006392:	aa03      	add	r2, sp, #12
 8006394:	4621      	mov	r1, r4
 8006396:	4640      	mov	r0, r8
 8006398:	f7ff fee2 	bl	8006160 <_printf_common>
 800639c:	3001      	adds	r0, #1
 800639e:	d14c      	bne.n	800643a <_printf_i+0x1fe>
 80063a0:	f04f 30ff 	mov.w	r0, #4294967295
 80063a4:	b004      	add	sp, #16
 80063a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063aa:	4835      	ldr	r0, [pc, #212]	; (8006480 <_printf_i+0x244>)
 80063ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	680e      	ldr	r6, [r1, #0]
 80063b4:	061f      	lsls	r7, r3, #24
 80063b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80063ba:	600e      	str	r6, [r1, #0]
 80063bc:	d514      	bpl.n	80063e8 <_printf_i+0x1ac>
 80063be:	07d9      	lsls	r1, r3, #31
 80063c0:	bf44      	itt	mi
 80063c2:	f043 0320 	orrmi.w	r3, r3, #32
 80063c6:	6023      	strmi	r3, [r4, #0]
 80063c8:	b91d      	cbnz	r5, 80063d2 <_printf_i+0x196>
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	f023 0320 	bic.w	r3, r3, #32
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	2310      	movs	r3, #16
 80063d4:	e7b0      	b.n	8006338 <_printf_i+0xfc>
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	f043 0320 	orr.w	r3, r3, #32
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	2378      	movs	r3, #120	; 0x78
 80063e0:	4828      	ldr	r0, [pc, #160]	; (8006484 <_printf_i+0x248>)
 80063e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063e6:	e7e3      	b.n	80063b0 <_printf_i+0x174>
 80063e8:	065e      	lsls	r6, r3, #25
 80063ea:	bf48      	it	mi
 80063ec:	b2ad      	uxthmi	r5, r5
 80063ee:	e7e6      	b.n	80063be <_printf_i+0x182>
 80063f0:	4616      	mov	r6, r2
 80063f2:	e7bb      	b.n	800636c <_printf_i+0x130>
 80063f4:	680b      	ldr	r3, [r1, #0]
 80063f6:	6826      	ldr	r6, [r4, #0]
 80063f8:	6960      	ldr	r0, [r4, #20]
 80063fa:	1d1d      	adds	r5, r3, #4
 80063fc:	600d      	str	r5, [r1, #0]
 80063fe:	0635      	lsls	r5, r6, #24
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	d501      	bpl.n	8006408 <_printf_i+0x1cc>
 8006404:	6018      	str	r0, [r3, #0]
 8006406:	e002      	b.n	800640e <_printf_i+0x1d2>
 8006408:	0671      	lsls	r1, r6, #25
 800640a:	d5fb      	bpl.n	8006404 <_printf_i+0x1c8>
 800640c:	8018      	strh	r0, [r3, #0]
 800640e:	2300      	movs	r3, #0
 8006410:	6123      	str	r3, [r4, #16]
 8006412:	4616      	mov	r6, r2
 8006414:	e7ba      	b.n	800638c <_printf_i+0x150>
 8006416:	680b      	ldr	r3, [r1, #0]
 8006418:	1d1a      	adds	r2, r3, #4
 800641a:	600a      	str	r2, [r1, #0]
 800641c:	681e      	ldr	r6, [r3, #0]
 800641e:	6862      	ldr	r2, [r4, #4]
 8006420:	2100      	movs	r1, #0
 8006422:	4630      	mov	r0, r6
 8006424:	f7f9 fedc 	bl	80001e0 <memchr>
 8006428:	b108      	cbz	r0, 800642e <_printf_i+0x1f2>
 800642a:	1b80      	subs	r0, r0, r6
 800642c:	6060      	str	r0, [r4, #4]
 800642e:	6863      	ldr	r3, [r4, #4]
 8006430:	6123      	str	r3, [r4, #16]
 8006432:	2300      	movs	r3, #0
 8006434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006438:	e7a8      	b.n	800638c <_printf_i+0x150>
 800643a:	6923      	ldr	r3, [r4, #16]
 800643c:	4632      	mov	r2, r6
 800643e:	4649      	mov	r1, r9
 8006440:	4640      	mov	r0, r8
 8006442:	47d0      	blx	sl
 8006444:	3001      	adds	r0, #1
 8006446:	d0ab      	beq.n	80063a0 <_printf_i+0x164>
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	079b      	lsls	r3, r3, #30
 800644c:	d413      	bmi.n	8006476 <_printf_i+0x23a>
 800644e:	68e0      	ldr	r0, [r4, #12]
 8006450:	9b03      	ldr	r3, [sp, #12]
 8006452:	4298      	cmp	r0, r3
 8006454:	bfb8      	it	lt
 8006456:	4618      	movlt	r0, r3
 8006458:	e7a4      	b.n	80063a4 <_printf_i+0x168>
 800645a:	2301      	movs	r3, #1
 800645c:	4632      	mov	r2, r6
 800645e:	4649      	mov	r1, r9
 8006460:	4640      	mov	r0, r8
 8006462:	47d0      	blx	sl
 8006464:	3001      	adds	r0, #1
 8006466:	d09b      	beq.n	80063a0 <_printf_i+0x164>
 8006468:	3501      	adds	r5, #1
 800646a:	68e3      	ldr	r3, [r4, #12]
 800646c:	9903      	ldr	r1, [sp, #12]
 800646e:	1a5b      	subs	r3, r3, r1
 8006470:	42ab      	cmp	r3, r5
 8006472:	dcf2      	bgt.n	800645a <_printf_i+0x21e>
 8006474:	e7eb      	b.n	800644e <_printf_i+0x212>
 8006476:	2500      	movs	r5, #0
 8006478:	f104 0619 	add.w	r6, r4, #25
 800647c:	e7f5      	b.n	800646a <_printf_i+0x22e>
 800647e:	bf00      	nop
 8006480:	080089f6 	.word	0x080089f6
 8006484:	08008a07 	.word	0x08008a07

08006488 <siprintf>:
 8006488:	b40e      	push	{r1, r2, r3}
 800648a:	b500      	push	{lr}
 800648c:	b09c      	sub	sp, #112	; 0x70
 800648e:	ab1d      	add	r3, sp, #116	; 0x74
 8006490:	9002      	str	r0, [sp, #8]
 8006492:	9006      	str	r0, [sp, #24]
 8006494:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006498:	4809      	ldr	r0, [pc, #36]	; (80064c0 <siprintf+0x38>)
 800649a:	9107      	str	r1, [sp, #28]
 800649c:	9104      	str	r1, [sp, #16]
 800649e:	4909      	ldr	r1, [pc, #36]	; (80064c4 <siprintf+0x3c>)
 80064a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80064a4:	9105      	str	r1, [sp, #20]
 80064a6:	6800      	ldr	r0, [r0, #0]
 80064a8:	9301      	str	r3, [sp, #4]
 80064aa:	a902      	add	r1, sp, #8
 80064ac:	f001 fb32 	bl	8007b14 <_svfiprintf_r>
 80064b0:	9b02      	ldr	r3, [sp, #8]
 80064b2:	2200      	movs	r2, #0
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	b01c      	add	sp, #112	; 0x70
 80064b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064bc:	b003      	add	sp, #12
 80064be:	4770      	bx	lr
 80064c0:	2000000c 	.word	0x2000000c
 80064c4:	ffff0208 	.word	0xffff0208

080064c8 <quorem>:
 80064c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064cc:	6903      	ldr	r3, [r0, #16]
 80064ce:	690c      	ldr	r4, [r1, #16]
 80064d0:	42a3      	cmp	r3, r4
 80064d2:	4607      	mov	r7, r0
 80064d4:	f2c0 8081 	blt.w	80065da <quorem+0x112>
 80064d8:	3c01      	subs	r4, #1
 80064da:	f101 0814 	add.w	r8, r1, #20
 80064de:	f100 0514 	add.w	r5, r0, #20
 80064e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064f0:	3301      	adds	r3, #1
 80064f2:	429a      	cmp	r2, r3
 80064f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006500:	d331      	bcc.n	8006566 <quorem+0x9e>
 8006502:	f04f 0e00 	mov.w	lr, #0
 8006506:	4640      	mov	r0, r8
 8006508:	46ac      	mov	ip, r5
 800650a:	46f2      	mov	sl, lr
 800650c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006510:	b293      	uxth	r3, r2
 8006512:	fb06 e303 	mla	r3, r6, r3, lr
 8006516:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800651a:	b29b      	uxth	r3, r3
 800651c:	ebaa 0303 	sub.w	r3, sl, r3
 8006520:	0c12      	lsrs	r2, r2, #16
 8006522:	f8dc a000 	ldr.w	sl, [ip]
 8006526:	fb06 e202 	mla	r2, r6, r2, lr
 800652a:	fa13 f38a 	uxtah	r3, r3, sl
 800652e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006532:	fa1f fa82 	uxth.w	sl, r2
 8006536:	f8dc 2000 	ldr.w	r2, [ip]
 800653a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800653e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006542:	b29b      	uxth	r3, r3
 8006544:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006548:	4581      	cmp	r9, r0
 800654a:	f84c 3b04 	str.w	r3, [ip], #4
 800654e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006552:	d2db      	bcs.n	800650c <quorem+0x44>
 8006554:	f855 300b 	ldr.w	r3, [r5, fp]
 8006558:	b92b      	cbnz	r3, 8006566 <quorem+0x9e>
 800655a:	9b01      	ldr	r3, [sp, #4]
 800655c:	3b04      	subs	r3, #4
 800655e:	429d      	cmp	r5, r3
 8006560:	461a      	mov	r2, r3
 8006562:	d32e      	bcc.n	80065c2 <quorem+0xfa>
 8006564:	613c      	str	r4, [r7, #16]
 8006566:	4638      	mov	r0, r7
 8006568:	f001 f8be 	bl	80076e8 <__mcmp>
 800656c:	2800      	cmp	r0, #0
 800656e:	db24      	blt.n	80065ba <quorem+0xf2>
 8006570:	3601      	adds	r6, #1
 8006572:	4628      	mov	r0, r5
 8006574:	f04f 0c00 	mov.w	ip, #0
 8006578:	f858 2b04 	ldr.w	r2, [r8], #4
 800657c:	f8d0 e000 	ldr.w	lr, [r0]
 8006580:	b293      	uxth	r3, r2
 8006582:	ebac 0303 	sub.w	r3, ip, r3
 8006586:	0c12      	lsrs	r2, r2, #16
 8006588:	fa13 f38e 	uxtah	r3, r3, lr
 800658c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006590:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006594:	b29b      	uxth	r3, r3
 8006596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800659a:	45c1      	cmp	r9, r8
 800659c:	f840 3b04 	str.w	r3, [r0], #4
 80065a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80065a4:	d2e8      	bcs.n	8006578 <quorem+0xb0>
 80065a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065ae:	b922      	cbnz	r2, 80065ba <quorem+0xf2>
 80065b0:	3b04      	subs	r3, #4
 80065b2:	429d      	cmp	r5, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	d30a      	bcc.n	80065ce <quorem+0x106>
 80065b8:	613c      	str	r4, [r7, #16]
 80065ba:	4630      	mov	r0, r6
 80065bc:	b003      	add	sp, #12
 80065be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c2:	6812      	ldr	r2, [r2, #0]
 80065c4:	3b04      	subs	r3, #4
 80065c6:	2a00      	cmp	r2, #0
 80065c8:	d1cc      	bne.n	8006564 <quorem+0x9c>
 80065ca:	3c01      	subs	r4, #1
 80065cc:	e7c7      	b.n	800655e <quorem+0x96>
 80065ce:	6812      	ldr	r2, [r2, #0]
 80065d0:	3b04      	subs	r3, #4
 80065d2:	2a00      	cmp	r2, #0
 80065d4:	d1f0      	bne.n	80065b8 <quorem+0xf0>
 80065d6:	3c01      	subs	r4, #1
 80065d8:	e7eb      	b.n	80065b2 <quorem+0xea>
 80065da:	2000      	movs	r0, #0
 80065dc:	e7ee      	b.n	80065bc <quorem+0xf4>
	...

080065e0 <_dtoa_r>:
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	ed2d 8b02 	vpush	{d8}
 80065e8:	ec57 6b10 	vmov	r6, r7, d0
 80065ec:	b095      	sub	sp, #84	; 0x54
 80065ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80065f4:	9105      	str	r1, [sp, #20]
 80065f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80065fa:	4604      	mov	r4, r0
 80065fc:	9209      	str	r2, [sp, #36]	; 0x24
 80065fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006600:	b975      	cbnz	r5, 8006620 <_dtoa_r+0x40>
 8006602:	2010      	movs	r0, #16
 8006604:	f000 fddc 	bl	80071c0 <malloc>
 8006608:	4602      	mov	r2, r0
 800660a:	6260      	str	r0, [r4, #36]	; 0x24
 800660c:	b920      	cbnz	r0, 8006618 <_dtoa_r+0x38>
 800660e:	4bb2      	ldr	r3, [pc, #712]	; (80068d8 <_dtoa_r+0x2f8>)
 8006610:	21ea      	movs	r1, #234	; 0xea
 8006612:	48b2      	ldr	r0, [pc, #712]	; (80068dc <_dtoa_r+0x2fc>)
 8006614:	f001 fb8e 	bl	8007d34 <__assert_func>
 8006618:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800661c:	6005      	str	r5, [r0, #0]
 800661e:	60c5      	str	r5, [r0, #12]
 8006620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006622:	6819      	ldr	r1, [r3, #0]
 8006624:	b151      	cbz	r1, 800663c <_dtoa_r+0x5c>
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	604a      	str	r2, [r1, #4]
 800662a:	2301      	movs	r3, #1
 800662c:	4093      	lsls	r3, r2
 800662e:	608b      	str	r3, [r1, #8]
 8006630:	4620      	mov	r0, r4
 8006632:	f000 fe1b 	bl	800726c <_Bfree>
 8006636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	1e3b      	subs	r3, r7, #0
 800663e:	bfb9      	ittee	lt
 8006640:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006644:	9303      	strlt	r3, [sp, #12]
 8006646:	2300      	movge	r3, #0
 8006648:	f8c8 3000 	strge.w	r3, [r8]
 800664c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006650:	4ba3      	ldr	r3, [pc, #652]	; (80068e0 <_dtoa_r+0x300>)
 8006652:	bfbc      	itt	lt
 8006654:	2201      	movlt	r2, #1
 8006656:	f8c8 2000 	strlt.w	r2, [r8]
 800665a:	ea33 0309 	bics.w	r3, r3, r9
 800665e:	d11b      	bne.n	8006698 <_dtoa_r+0xb8>
 8006660:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006662:	f242 730f 	movw	r3, #9999	; 0x270f
 8006666:	6013      	str	r3, [r2, #0]
 8006668:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800666c:	4333      	orrs	r3, r6
 800666e:	f000 857a 	beq.w	8007166 <_dtoa_r+0xb86>
 8006672:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006674:	b963      	cbnz	r3, 8006690 <_dtoa_r+0xb0>
 8006676:	4b9b      	ldr	r3, [pc, #620]	; (80068e4 <_dtoa_r+0x304>)
 8006678:	e024      	b.n	80066c4 <_dtoa_r+0xe4>
 800667a:	4b9b      	ldr	r3, [pc, #620]	; (80068e8 <_dtoa_r+0x308>)
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	3308      	adds	r3, #8
 8006680:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006682:	6013      	str	r3, [r2, #0]
 8006684:	9800      	ldr	r0, [sp, #0]
 8006686:	b015      	add	sp, #84	; 0x54
 8006688:	ecbd 8b02 	vpop	{d8}
 800668c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006690:	4b94      	ldr	r3, [pc, #592]	; (80068e4 <_dtoa_r+0x304>)
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	3303      	adds	r3, #3
 8006696:	e7f3      	b.n	8006680 <_dtoa_r+0xa0>
 8006698:	ed9d 7b02 	vldr	d7, [sp, #8]
 800669c:	2200      	movs	r2, #0
 800669e:	ec51 0b17 	vmov	r0, r1, d7
 80066a2:	2300      	movs	r3, #0
 80066a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80066a8:	f7fa fa0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80066ac:	4680      	mov	r8, r0
 80066ae:	b158      	cbz	r0, 80066c8 <_dtoa_r+0xe8>
 80066b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066b2:	2301      	movs	r3, #1
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 8551 	beq.w	8007160 <_dtoa_r+0xb80>
 80066be:	488b      	ldr	r0, [pc, #556]	; (80068ec <_dtoa_r+0x30c>)
 80066c0:	6018      	str	r0, [r3, #0]
 80066c2:	1e43      	subs	r3, r0, #1
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	e7dd      	b.n	8006684 <_dtoa_r+0xa4>
 80066c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80066cc:	aa12      	add	r2, sp, #72	; 0x48
 80066ce:	a913      	add	r1, sp, #76	; 0x4c
 80066d0:	4620      	mov	r0, r4
 80066d2:	f001 f8ad 	bl	8007830 <__d2b>
 80066d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80066da:	4683      	mov	fp, r0
 80066dc:	2d00      	cmp	r5, #0
 80066de:	d07c      	beq.n	80067da <_dtoa_r+0x1fa>
 80066e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80066e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80066ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80066f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80066f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066fa:	4b7d      	ldr	r3, [pc, #500]	; (80068f0 <_dtoa_r+0x310>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	4630      	mov	r0, r6
 8006700:	4639      	mov	r1, r7
 8006702:	f7f9 fdc1 	bl	8000288 <__aeabi_dsub>
 8006706:	a36e      	add	r3, pc, #440	; (adr r3, 80068c0 <_dtoa_r+0x2e0>)
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	f7f9 ff74 	bl	80005f8 <__aeabi_dmul>
 8006710:	a36d      	add	r3, pc, #436	; (adr r3, 80068c8 <_dtoa_r+0x2e8>)
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	f7f9 fdb9 	bl	800028c <__adddf3>
 800671a:	4606      	mov	r6, r0
 800671c:	4628      	mov	r0, r5
 800671e:	460f      	mov	r7, r1
 8006720:	f7f9 ff00 	bl	8000524 <__aeabi_i2d>
 8006724:	a36a      	add	r3, pc, #424	; (adr r3, 80068d0 <_dtoa_r+0x2f0>)
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	f7f9 ff65 	bl	80005f8 <__aeabi_dmul>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	4630      	mov	r0, r6
 8006734:	4639      	mov	r1, r7
 8006736:	f7f9 fda9 	bl	800028c <__adddf3>
 800673a:	4606      	mov	r6, r0
 800673c:	460f      	mov	r7, r1
 800673e:	f7fa fa0b 	bl	8000b58 <__aeabi_d2iz>
 8006742:	2200      	movs	r2, #0
 8006744:	4682      	mov	sl, r0
 8006746:	2300      	movs	r3, #0
 8006748:	4630      	mov	r0, r6
 800674a:	4639      	mov	r1, r7
 800674c:	f7fa f9c6 	bl	8000adc <__aeabi_dcmplt>
 8006750:	b148      	cbz	r0, 8006766 <_dtoa_r+0x186>
 8006752:	4650      	mov	r0, sl
 8006754:	f7f9 fee6 	bl	8000524 <__aeabi_i2d>
 8006758:	4632      	mov	r2, r6
 800675a:	463b      	mov	r3, r7
 800675c:	f7fa f9b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006760:	b908      	cbnz	r0, 8006766 <_dtoa_r+0x186>
 8006762:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006766:	f1ba 0f16 	cmp.w	sl, #22
 800676a:	d854      	bhi.n	8006816 <_dtoa_r+0x236>
 800676c:	4b61      	ldr	r3, [pc, #388]	; (80068f4 <_dtoa_r+0x314>)
 800676e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800677a:	f7fa f9af 	bl	8000adc <__aeabi_dcmplt>
 800677e:	2800      	cmp	r0, #0
 8006780:	d04b      	beq.n	800681a <_dtoa_r+0x23a>
 8006782:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006786:	2300      	movs	r3, #0
 8006788:	930e      	str	r3, [sp, #56]	; 0x38
 800678a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800678c:	1b5d      	subs	r5, r3, r5
 800678e:	1e6b      	subs	r3, r5, #1
 8006790:	9304      	str	r3, [sp, #16]
 8006792:	bf43      	ittte	mi
 8006794:	2300      	movmi	r3, #0
 8006796:	f1c5 0801 	rsbmi	r8, r5, #1
 800679a:	9304      	strmi	r3, [sp, #16]
 800679c:	f04f 0800 	movpl.w	r8, #0
 80067a0:	f1ba 0f00 	cmp.w	sl, #0
 80067a4:	db3b      	blt.n	800681e <_dtoa_r+0x23e>
 80067a6:	9b04      	ldr	r3, [sp, #16]
 80067a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80067ac:	4453      	add	r3, sl
 80067ae:	9304      	str	r3, [sp, #16]
 80067b0:	2300      	movs	r3, #0
 80067b2:	9306      	str	r3, [sp, #24]
 80067b4:	9b05      	ldr	r3, [sp, #20]
 80067b6:	2b09      	cmp	r3, #9
 80067b8:	d869      	bhi.n	800688e <_dtoa_r+0x2ae>
 80067ba:	2b05      	cmp	r3, #5
 80067bc:	bfc4      	itt	gt
 80067be:	3b04      	subgt	r3, #4
 80067c0:	9305      	strgt	r3, [sp, #20]
 80067c2:	9b05      	ldr	r3, [sp, #20]
 80067c4:	f1a3 0302 	sub.w	r3, r3, #2
 80067c8:	bfcc      	ite	gt
 80067ca:	2500      	movgt	r5, #0
 80067cc:	2501      	movle	r5, #1
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d869      	bhi.n	80068a6 <_dtoa_r+0x2c6>
 80067d2:	e8df f003 	tbb	[pc, r3]
 80067d6:	4e2c      	.short	0x4e2c
 80067d8:	5a4c      	.short	0x5a4c
 80067da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80067de:	441d      	add	r5, r3
 80067e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	bfc1      	itttt	gt
 80067e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80067f0:	fa09 f303 	lslgt.w	r3, r9, r3
 80067f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80067f8:	bfda      	itte	le
 80067fa:	f1c3 0320 	rsble	r3, r3, #32
 80067fe:	fa06 f003 	lslle.w	r0, r6, r3
 8006802:	4318      	orrgt	r0, r3
 8006804:	f7f9 fe7e 	bl	8000504 <__aeabi_ui2d>
 8006808:	2301      	movs	r3, #1
 800680a:	4606      	mov	r6, r0
 800680c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006810:	3d01      	subs	r5, #1
 8006812:	9310      	str	r3, [sp, #64]	; 0x40
 8006814:	e771      	b.n	80066fa <_dtoa_r+0x11a>
 8006816:	2301      	movs	r3, #1
 8006818:	e7b6      	b.n	8006788 <_dtoa_r+0x1a8>
 800681a:	900e      	str	r0, [sp, #56]	; 0x38
 800681c:	e7b5      	b.n	800678a <_dtoa_r+0x1aa>
 800681e:	f1ca 0300 	rsb	r3, sl, #0
 8006822:	9306      	str	r3, [sp, #24]
 8006824:	2300      	movs	r3, #0
 8006826:	eba8 080a 	sub.w	r8, r8, sl
 800682a:	930d      	str	r3, [sp, #52]	; 0x34
 800682c:	e7c2      	b.n	80067b4 <_dtoa_r+0x1d4>
 800682e:	2300      	movs	r3, #0
 8006830:	9308      	str	r3, [sp, #32]
 8006832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006834:	2b00      	cmp	r3, #0
 8006836:	dc39      	bgt.n	80068ac <_dtoa_r+0x2cc>
 8006838:	f04f 0901 	mov.w	r9, #1
 800683c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006840:	464b      	mov	r3, r9
 8006842:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006846:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006848:	2200      	movs	r2, #0
 800684a:	6042      	str	r2, [r0, #4]
 800684c:	2204      	movs	r2, #4
 800684e:	f102 0614 	add.w	r6, r2, #20
 8006852:	429e      	cmp	r6, r3
 8006854:	6841      	ldr	r1, [r0, #4]
 8006856:	d92f      	bls.n	80068b8 <_dtoa_r+0x2d8>
 8006858:	4620      	mov	r0, r4
 800685a:	f000 fcc7 	bl	80071ec <_Balloc>
 800685e:	9000      	str	r0, [sp, #0]
 8006860:	2800      	cmp	r0, #0
 8006862:	d14b      	bne.n	80068fc <_dtoa_r+0x31c>
 8006864:	4b24      	ldr	r3, [pc, #144]	; (80068f8 <_dtoa_r+0x318>)
 8006866:	4602      	mov	r2, r0
 8006868:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800686c:	e6d1      	b.n	8006612 <_dtoa_r+0x32>
 800686e:	2301      	movs	r3, #1
 8006870:	e7de      	b.n	8006830 <_dtoa_r+0x250>
 8006872:	2300      	movs	r3, #0
 8006874:	9308      	str	r3, [sp, #32]
 8006876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006878:	eb0a 0903 	add.w	r9, sl, r3
 800687c:	f109 0301 	add.w	r3, r9, #1
 8006880:	2b01      	cmp	r3, #1
 8006882:	9301      	str	r3, [sp, #4]
 8006884:	bfb8      	it	lt
 8006886:	2301      	movlt	r3, #1
 8006888:	e7dd      	b.n	8006846 <_dtoa_r+0x266>
 800688a:	2301      	movs	r3, #1
 800688c:	e7f2      	b.n	8006874 <_dtoa_r+0x294>
 800688e:	2501      	movs	r5, #1
 8006890:	2300      	movs	r3, #0
 8006892:	9305      	str	r3, [sp, #20]
 8006894:	9508      	str	r5, [sp, #32]
 8006896:	f04f 39ff 	mov.w	r9, #4294967295
 800689a:	2200      	movs	r2, #0
 800689c:	f8cd 9004 	str.w	r9, [sp, #4]
 80068a0:	2312      	movs	r3, #18
 80068a2:	9209      	str	r2, [sp, #36]	; 0x24
 80068a4:	e7cf      	b.n	8006846 <_dtoa_r+0x266>
 80068a6:	2301      	movs	r3, #1
 80068a8:	9308      	str	r3, [sp, #32]
 80068aa:	e7f4      	b.n	8006896 <_dtoa_r+0x2b6>
 80068ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80068b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80068b4:	464b      	mov	r3, r9
 80068b6:	e7c6      	b.n	8006846 <_dtoa_r+0x266>
 80068b8:	3101      	adds	r1, #1
 80068ba:	6041      	str	r1, [r0, #4]
 80068bc:	0052      	lsls	r2, r2, #1
 80068be:	e7c6      	b.n	800684e <_dtoa_r+0x26e>
 80068c0:	636f4361 	.word	0x636f4361
 80068c4:	3fd287a7 	.word	0x3fd287a7
 80068c8:	8b60c8b3 	.word	0x8b60c8b3
 80068cc:	3fc68a28 	.word	0x3fc68a28
 80068d0:	509f79fb 	.word	0x509f79fb
 80068d4:	3fd34413 	.word	0x3fd34413
 80068d8:	08008a25 	.word	0x08008a25
 80068dc:	08008a3c 	.word	0x08008a3c
 80068e0:	7ff00000 	.word	0x7ff00000
 80068e4:	08008a21 	.word	0x08008a21
 80068e8:	08008a18 	.word	0x08008a18
 80068ec:	080089f5 	.word	0x080089f5
 80068f0:	3ff80000 	.word	0x3ff80000
 80068f4:	08008b38 	.word	0x08008b38
 80068f8:	08008a9b 	.word	0x08008a9b
 80068fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068fe:	9a00      	ldr	r2, [sp, #0]
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	9b01      	ldr	r3, [sp, #4]
 8006904:	2b0e      	cmp	r3, #14
 8006906:	f200 80ad 	bhi.w	8006a64 <_dtoa_r+0x484>
 800690a:	2d00      	cmp	r5, #0
 800690c:	f000 80aa 	beq.w	8006a64 <_dtoa_r+0x484>
 8006910:	f1ba 0f00 	cmp.w	sl, #0
 8006914:	dd36      	ble.n	8006984 <_dtoa_r+0x3a4>
 8006916:	4ac3      	ldr	r2, [pc, #780]	; (8006c24 <_dtoa_r+0x644>)
 8006918:	f00a 030f 	and.w	r3, sl, #15
 800691c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006920:	ed93 7b00 	vldr	d7, [r3]
 8006924:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006928:	ea4f 172a 	mov.w	r7, sl, asr #4
 800692c:	eeb0 8a47 	vmov.f32	s16, s14
 8006930:	eef0 8a67 	vmov.f32	s17, s15
 8006934:	d016      	beq.n	8006964 <_dtoa_r+0x384>
 8006936:	4bbc      	ldr	r3, [pc, #752]	; (8006c28 <_dtoa_r+0x648>)
 8006938:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800693c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006940:	f7f9 ff84 	bl	800084c <__aeabi_ddiv>
 8006944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006948:	f007 070f 	and.w	r7, r7, #15
 800694c:	2503      	movs	r5, #3
 800694e:	4eb6      	ldr	r6, [pc, #728]	; (8006c28 <_dtoa_r+0x648>)
 8006950:	b957      	cbnz	r7, 8006968 <_dtoa_r+0x388>
 8006952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006956:	ec53 2b18 	vmov	r2, r3, d8
 800695a:	f7f9 ff77 	bl	800084c <__aeabi_ddiv>
 800695e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006962:	e029      	b.n	80069b8 <_dtoa_r+0x3d8>
 8006964:	2502      	movs	r5, #2
 8006966:	e7f2      	b.n	800694e <_dtoa_r+0x36e>
 8006968:	07f9      	lsls	r1, r7, #31
 800696a:	d508      	bpl.n	800697e <_dtoa_r+0x39e>
 800696c:	ec51 0b18 	vmov	r0, r1, d8
 8006970:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006974:	f7f9 fe40 	bl	80005f8 <__aeabi_dmul>
 8006978:	ec41 0b18 	vmov	d8, r0, r1
 800697c:	3501      	adds	r5, #1
 800697e:	107f      	asrs	r7, r7, #1
 8006980:	3608      	adds	r6, #8
 8006982:	e7e5      	b.n	8006950 <_dtoa_r+0x370>
 8006984:	f000 80a6 	beq.w	8006ad4 <_dtoa_r+0x4f4>
 8006988:	f1ca 0600 	rsb	r6, sl, #0
 800698c:	4ba5      	ldr	r3, [pc, #660]	; (8006c24 <_dtoa_r+0x644>)
 800698e:	4fa6      	ldr	r7, [pc, #664]	; (8006c28 <_dtoa_r+0x648>)
 8006990:	f006 020f 	and.w	r2, r6, #15
 8006994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80069a0:	f7f9 fe2a 	bl	80005f8 <__aeabi_dmul>
 80069a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069a8:	1136      	asrs	r6, r6, #4
 80069aa:	2300      	movs	r3, #0
 80069ac:	2502      	movs	r5, #2
 80069ae:	2e00      	cmp	r6, #0
 80069b0:	f040 8085 	bne.w	8006abe <_dtoa_r+0x4de>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1d2      	bne.n	800695e <_dtoa_r+0x37e>
 80069b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 808c 	beq.w	8006ad8 <_dtoa_r+0x4f8>
 80069c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80069c4:	4b99      	ldr	r3, [pc, #612]	; (8006c2c <_dtoa_r+0x64c>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	4630      	mov	r0, r6
 80069ca:	4639      	mov	r1, r7
 80069cc:	f7fa f886 	bl	8000adc <__aeabi_dcmplt>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	f000 8081 	beq.w	8006ad8 <_dtoa_r+0x4f8>
 80069d6:	9b01      	ldr	r3, [sp, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d07d      	beq.n	8006ad8 <_dtoa_r+0x4f8>
 80069dc:	f1b9 0f00 	cmp.w	r9, #0
 80069e0:	dd3c      	ble.n	8006a5c <_dtoa_r+0x47c>
 80069e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80069e6:	9307      	str	r3, [sp, #28]
 80069e8:	2200      	movs	r2, #0
 80069ea:	4b91      	ldr	r3, [pc, #580]	; (8006c30 <_dtoa_r+0x650>)
 80069ec:	4630      	mov	r0, r6
 80069ee:	4639      	mov	r1, r7
 80069f0:	f7f9 fe02 	bl	80005f8 <__aeabi_dmul>
 80069f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069f8:	3501      	adds	r5, #1
 80069fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80069fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a02:	4628      	mov	r0, r5
 8006a04:	f7f9 fd8e 	bl	8000524 <__aeabi_i2d>
 8006a08:	4632      	mov	r2, r6
 8006a0a:	463b      	mov	r3, r7
 8006a0c:	f7f9 fdf4 	bl	80005f8 <__aeabi_dmul>
 8006a10:	4b88      	ldr	r3, [pc, #544]	; (8006c34 <_dtoa_r+0x654>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	f7f9 fc3a 	bl	800028c <__adddf3>
 8006a18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006a1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a20:	9303      	str	r3, [sp, #12]
 8006a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d15c      	bne.n	8006ae2 <_dtoa_r+0x502>
 8006a28:	4b83      	ldr	r3, [pc, #524]	; (8006c38 <_dtoa_r+0x658>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	4639      	mov	r1, r7
 8006a30:	f7f9 fc2a 	bl	8000288 <__aeabi_dsub>
 8006a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a38:	4606      	mov	r6, r0
 8006a3a:	460f      	mov	r7, r1
 8006a3c:	f7fa f86c 	bl	8000b18 <__aeabi_dcmpgt>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	f040 8296 	bne.w	8006f72 <_dtoa_r+0x992>
 8006a46:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a50:	4639      	mov	r1, r7
 8006a52:	f7fa f843 	bl	8000adc <__aeabi_dcmplt>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	f040 8288 	bne.w	8006f6c <_dtoa_r+0x98c>
 8006a5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f2c0 8158 	blt.w	8006d1c <_dtoa_r+0x73c>
 8006a6c:	f1ba 0f0e 	cmp.w	sl, #14
 8006a70:	f300 8154 	bgt.w	8006d1c <_dtoa_r+0x73c>
 8006a74:	4b6b      	ldr	r3, [pc, #428]	; (8006c24 <_dtoa_r+0x644>)
 8006a76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f280 80e3 	bge.w	8006c4c <_dtoa_r+0x66c>
 8006a86:	9b01      	ldr	r3, [sp, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f300 80df 	bgt.w	8006c4c <_dtoa_r+0x66c>
 8006a8e:	f040 826d 	bne.w	8006f6c <_dtoa_r+0x98c>
 8006a92:	4b69      	ldr	r3, [pc, #420]	; (8006c38 <_dtoa_r+0x658>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	4640      	mov	r0, r8
 8006a98:	4649      	mov	r1, r9
 8006a9a:	f7f9 fdad 	bl	80005f8 <__aeabi_dmul>
 8006a9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aa2:	f7fa f82f 	bl	8000b04 <__aeabi_dcmpge>
 8006aa6:	9e01      	ldr	r6, [sp, #4]
 8006aa8:	4637      	mov	r7, r6
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	f040 8243 	bne.w	8006f36 <_dtoa_r+0x956>
 8006ab0:	9d00      	ldr	r5, [sp, #0]
 8006ab2:	2331      	movs	r3, #49	; 0x31
 8006ab4:	f805 3b01 	strb.w	r3, [r5], #1
 8006ab8:	f10a 0a01 	add.w	sl, sl, #1
 8006abc:	e23f      	b.n	8006f3e <_dtoa_r+0x95e>
 8006abe:	07f2      	lsls	r2, r6, #31
 8006ac0:	d505      	bpl.n	8006ace <_dtoa_r+0x4ee>
 8006ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ac6:	f7f9 fd97 	bl	80005f8 <__aeabi_dmul>
 8006aca:	3501      	adds	r5, #1
 8006acc:	2301      	movs	r3, #1
 8006ace:	1076      	asrs	r6, r6, #1
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	e76c      	b.n	80069ae <_dtoa_r+0x3ce>
 8006ad4:	2502      	movs	r5, #2
 8006ad6:	e76f      	b.n	80069b8 <_dtoa_r+0x3d8>
 8006ad8:	9b01      	ldr	r3, [sp, #4]
 8006ada:	f8cd a01c 	str.w	sl, [sp, #28]
 8006ade:	930c      	str	r3, [sp, #48]	; 0x30
 8006ae0:	e78d      	b.n	80069fe <_dtoa_r+0x41e>
 8006ae2:	9900      	ldr	r1, [sp, #0]
 8006ae4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006ae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ae8:	4b4e      	ldr	r3, [pc, #312]	; (8006c24 <_dtoa_r+0x644>)
 8006aea:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006aee:	4401      	add	r1, r0
 8006af0:	9102      	str	r1, [sp, #8]
 8006af2:	9908      	ldr	r1, [sp, #32]
 8006af4:	eeb0 8a47 	vmov.f32	s16, s14
 8006af8:	eef0 8a67 	vmov.f32	s17, s15
 8006afc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b04:	2900      	cmp	r1, #0
 8006b06:	d045      	beq.n	8006b94 <_dtoa_r+0x5b4>
 8006b08:	494c      	ldr	r1, [pc, #304]	; (8006c3c <_dtoa_r+0x65c>)
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	f7f9 fe9e 	bl	800084c <__aeabi_ddiv>
 8006b10:	ec53 2b18 	vmov	r2, r3, d8
 8006b14:	f7f9 fbb8 	bl	8000288 <__aeabi_dsub>
 8006b18:	9d00      	ldr	r5, [sp, #0]
 8006b1a:	ec41 0b18 	vmov	d8, r0, r1
 8006b1e:	4639      	mov	r1, r7
 8006b20:	4630      	mov	r0, r6
 8006b22:	f7fa f819 	bl	8000b58 <__aeabi_d2iz>
 8006b26:	900c      	str	r0, [sp, #48]	; 0x30
 8006b28:	f7f9 fcfc 	bl	8000524 <__aeabi_i2d>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4630      	mov	r0, r6
 8006b32:	4639      	mov	r1, r7
 8006b34:	f7f9 fba8 	bl	8000288 <__aeabi_dsub>
 8006b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b3a:	3330      	adds	r3, #48	; 0x30
 8006b3c:	f805 3b01 	strb.w	r3, [r5], #1
 8006b40:	ec53 2b18 	vmov	r2, r3, d8
 8006b44:	4606      	mov	r6, r0
 8006b46:	460f      	mov	r7, r1
 8006b48:	f7f9 ffc8 	bl	8000adc <__aeabi_dcmplt>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d165      	bne.n	8006c1c <_dtoa_r+0x63c>
 8006b50:	4632      	mov	r2, r6
 8006b52:	463b      	mov	r3, r7
 8006b54:	4935      	ldr	r1, [pc, #212]	; (8006c2c <_dtoa_r+0x64c>)
 8006b56:	2000      	movs	r0, #0
 8006b58:	f7f9 fb96 	bl	8000288 <__aeabi_dsub>
 8006b5c:	ec53 2b18 	vmov	r2, r3, d8
 8006b60:	f7f9 ffbc 	bl	8000adc <__aeabi_dcmplt>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	f040 80b9 	bne.w	8006cdc <_dtoa_r+0x6fc>
 8006b6a:	9b02      	ldr	r3, [sp, #8]
 8006b6c:	429d      	cmp	r5, r3
 8006b6e:	f43f af75 	beq.w	8006a5c <_dtoa_r+0x47c>
 8006b72:	4b2f      	ldr	r3, [pc, #188]	; (8006c30 <_dtoa_r+0x650>)
 8006b74:	ec51 0b18 	vmov	r0, r1, d8
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f7f9 fd3d 	bl	80005f8 <__aeabi_dmul>
 8006b7e:	4b2c      	ldr	r3, [pc, #176]	; (8006c30 <_dtoa_r+0x650>)
 8006b80:	ec41 0b18 	vmov	d8, r0, r1
 8006b84:	2200      	movs	r2, #0
 8006b86:	4630      	mov	r0, r6
 8006b88:	4639      	mov	r1, r7
 8006b8a:	f7f9 fd35 	bl	80005f8 <__aeabi_dmul>
 8006b8e:	4606      	mov	r6, r0
 8006b90:	460f      	mov	r7, r1
 8006b92:	e7c4      	b.n	8006b1e <_dtoa_r+0x53e>
 8006b94:	ec51 0b17 	vmov	r0, r1, d7
 8006b98:	f7f9 fd2e 	bl	80005f8 <__aeabi_dmul>
 8006b9c:	9b02      	ldr	r3, [sp, #8]
 8006b9e:	9d00      	ldr	r5, [sp, #0]
 8006ba0:	930c      	str	r3, [sp, #48]	; 0x30
 8006ba2:	ec41 0b18 	vmov	d8, r0, r1
 8006ba6:	4639      	mov	r1, r7
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f7f9 ffd5 	bl	8000b58 <__aeabi_d2iz>
 8006bae:	9011      	str	r0, [sp, #68]	; 0x44
 8006bb0:	f7f9 fcb8 	bl	8000524 <__aeabi_i2d>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4630      	mov	r0, r6
 8006bba:	4639      	mov	r1, r7
 8006bbc:	f7f9 fb64 	bl	8000288 <__aeabi_dsub>
 8006bc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bc2:	3330      	adds	r3, #48	; 0x30
 8006bc4:	f805 3b01 	strb.w	r3, [r5], #1
 8006bc8:	9b02      	ldr	r3, [sp, #8]
 8006bca:	429d      	cmp	r5, r3
 8006bcc:	4606      	mov	r6, r0
 8006bce:	460f      	mov	r7, r1
 8006bd0:	f04f 0200 	mov.w	r2, #0
 8006bd4:	d134      	bne.n	8006c40 <_dtoa_r+0x660>
 8006bd6:	4b19      	ldr	r3, [pc, #100]	; (8006c3c <_dtoa_r+0x65c>)
 8006bd8:	ec51 0b18 	vmov	r0, r1, d8
 8006bdc:	f7f9 fb56 	bl	800028c <__adddf3>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	4630      	mov	r0, r6
 8006be6:	4639      	mov	r1, r7
 8006be8:	f7f9 ff96 	bl	8000b18 <__aeabi_dcmpgt>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	d175      	bne.n	8006cdc <_dtoa_r+0x6fc>
 8006bf0:	ec53 2b18 	vmov	r2, r3, d8
 8006bf4:	4911      	ldr	r1, [pc, #68]	; (8006c3c <_dtoa_r+0x65c>)
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	f7f9 fb46 	bl	8000288 <__aeabi_dsub>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4630      	mov	r0, r6
 8006c02:	4639      	mov	r1, r7
 8006c04:	f7f9 ff6a 	bl	8000adc <__aeabi_dcmplt>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	f43f af27 	beq.w	8006a5c <_dtoa_r+0x47c>
 8006c0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c10:	1e6b      	subs	r3, r5, #1
 8006c12:	930c      	str	r3, [sp, #48]	; 0x30
 8006c14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c18:	2b30      	cmp	r3, #48	; 0x30
 8006c1a:	d0f8      	beq.n	8006c0e <_dtoa_r+0x62e>
 8006c1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006c20:	e04a      	b.n	8006cb8 <_dtoa_r+0x6d8>
 8006c22:	bf00      	nop
 8006c24:	08008b38 	.word	0x08008b38
 8006c28:	08008b10 	.word	0x08008b10
 8006c2c:	3ff00000 	.word	0x3ff00000
 8006c30:	40240000 	.word	0x40240000
 8006c34:	401c0000 	.word	0x401c0000
 8006c38:	40140000 	.word	0x40140000
 8006c3c:	3fe00000 	.word	0x3fe00000
 8006c40:	4baf      	ldr	r3, [pc, #700]	; (8006f00 <_dtoa_r+0x920>)
 8006c42:	f7f9 fcd9 	bl	80005f8 <__aeabi_dmul>
 8006c46:	4606      	mov	r6, r0
 8006c48:	460f      	mov	r7, r1
 8006c4a:	e7ac      	b.n	8006ba6 <_dtoa_r+0x5c6>
 8006c4c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c50:	9d00      	ldr	r5, [sp, #0]
 8006c52:	4642      	mov	r2, r8
 8006c54:	464b      	mov	r3, r9
 8006c56:	4630      	mov	r0, r6
 8006c58:	4639      	mov	r1, r7
 8006c5a:	f7f9 fdf7 	bl	800084c <__aeabi_ddiv>
 8006c5e:	f7f9 ff7b 	bl	8000b58 <__aeabi_d2iz>
 8006c62:	9002      	str	r0, [sp, #8]
 8006c64:	f7f9 fc5e 	bl	8000524 <__aeabi_i2d>
 8006c68:	4642      	mov	r2, r8
 8006c6a:	464b      	mov	r3, r9
 8006c6c:	f7f9 fcc4 	bl	80005f8 <__aeabi_dmul>
 8006c70:	4602      	mov	r2, r0
 8006c72:	460b      	mov	r3, r1
 8006c74:	4630      	mov	r0, r6
 8006c76:	4639      	mov	r1, r7
 8006c78:	f7f9 fb06 	bl	8000288 <__aeabi_dsub>
 8006c7c:	9e02      	ldr	r6, [sp, #8]
 8006c7e:	9f01      	ldr	r7, [sp, #4]
 8006c80:	3630      	adds	r6, #48	; 0x30
 8006c82:	f805 6b01 	strb.w	r6, [r5], #1
 8006c86:	9e00      	ldr	r6, [sp, #0]
 8006c88:	1bae      	subs	r6, r5, r6
 8006c8a:	42b7      	cmp	r7, r6
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	d137      	bne.n	8006d02 <_dtoa_r+0x722>
 8006c92:	f7f9 fafb 	bl	800028c <__adddf3>
 8006c96:	4642      	mov	r2, r8
 8006c98:	464b      	mov	r3, r9
 8006c9a:	4606      	mov	r6, r0
 8006c9c:	460f      	mov	r7, r1
 8006c9e:	f7f9 ff3b 	bl	8000b18 <__aeabi_dcmpgt>
 8006ca2:	b9c8      	cbnz	r0, 8006cd8 <_dtoa_r+0x6f8>
 8006ca4:	4642      	mov	r2, r8
 8006ca6:	464b      	mov	r3, r9
 8006ca8:	4630      	mov	r0, r6
 8006caa:	4639      	mov	r1, r7
 8006cac:	f7f9 ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cb0:	b110      	cbz	r0, 8006cb8 <_dtoa_r+0x6d8>
 8006cb2:	9b02      	ldr	r3, [sp, #8]
 8006cb4:	07d9      	lsls	r1, r3, #31
 8006cb6:	d40f      	bmi.n	8006cd8 <_dtoa_r+0x6f8>
 8006cb8:	4620      	mov	r0, r4
 8006cba:	4659      	mov	r1, fp
 8006cbc:	f000 fad6 	bl	800726c <_Bfree>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	702b      	strb	r3, [r5, #0]
 8006cc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cc6:	f10a 0001 	add.w	r0, sl, #1
 8006cca:	6018      	str	r0, [r3, #0]
 8006ccc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f43f acd8 	beq.w	8006684 <_dtoa_r+0xa4>
 8006cd4:	601d      	str	r5, [r3, #0]
 8006cd6:	e4d5      	b.n	8006684 <_dtoa_r+0xa4>
 8006cd8:	f8cd a01c 	str.w	sl, [sp, #28]
 8006cdc:	462b      	mov	r3, r5
 8006cde:	461d      	mov	r5, r3
 8006ce0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ce4:	2a39      	cmp	r2, #57	; 0x39
 8006ce6:	d108      	bne.n	8006cfa <_dtoa_r+0x71a>
 8006ce8:	9a00      	ldr	r2, [sp, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d1f7      	bne.n	8006cde <_dtoa_r+0x6fe>
 8006cee:	9a07      	ldr	r2, [sp, #28]
 8006cf0:	9900      	ldr	r1, [sp, #0]
 8006cf2:	3201      	adds	r2, #1
 8006cf4:	9207      	str	r2, [sp, #28]
 8006cf6:	2230      	movs	r2, #48	; 0x30
 8006cf8:	700a      	strb	r2, [r1, #0]
 8006cfa:	781a      	ldrb	r2, [r3, #0]
 8006cfc:	3201      	adds	r2, #1
 8006cfe:	701a      	strb	r2, [r3, #0]
 8006d00:	e78c      	b.n	8006c1c <_dtoa_r+0x63c>
 8006d02:	4b7f      	ldr	r3, [pc, #508]	; (8006f00 <_dtoa_r+0x920>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	f7f9 fc77 	bl	80005f8 <__aeabi_dmul>
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	4606      	mov	r6, r0
 8006d10:	460f      	mov	r7, r1
 8006d12:	f7f9 fed9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d09b      	beq.n	8006c52 <_dtoa_r+0x672>
 8006d1a:	e7cd      	b.n	8006cb8 <_dtoa_r+0x6d8>
 8006d1c:	9a08      	ldr	r2, [sp, #32]
 8006d1e:	2a00      	cmp	r2, #0
 8006d20:	f000 80c4 	beq.w	8006eac <_dtoa_r+0x8cc>
 8006d24:	9a05      	ldr	r2, [sp, #20]
 8006d26:	2a01      	cmp	r2, #1
 8006d28:	f300 80a8 	bgt.w	8006e7c <_dtoa_r+0x89c>
 8006d2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d2e:	2a00      	cmp	r2, #0
 8006d30:	f000 80a0 	beq.w	8006e74 <_dtoa_r+0x894>
 8006d34:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d38:	9e06      	ldr	r6, [sp, #24]
 8006d3a:	4645      	mov	r5, r8
 8006d3c:	9a04      	ldr	r2, [sp, #16]
 8006d3e:	2101      	movs	r1, #1
 8006d40:	441a      	add	r2, r3
 8006d42:	4620      	mov	r0, r4
 8006d44:	4498      	add	r8, r3
 8006d46:	9204      	str	r2, [sp, #16]
 8006d48:	f000 fb4c 	bl	80073e4 <__i2b>
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	2d00      	cmp	r5, #0
 8006d50:	dd0b      	ble.n	8006d6a <_dtoa_r+0x78a>
 8006d52:	9b04      	ldr	r3, [sp, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	dd08      	ble.n	8006d6a <_dtoa_r+0x78a>
 8006d58:	42ab      	cmp	r3, r5
 8006d5a:	9a04      	ldr	r2, [sp, #16]
 8006d5c:	bfa8      	it	ge
 8006d5e:	462b      	movge	r3, r5
 8006d60:	eba8 0803 	sub.w	r8, r8, r3
 8006d64:	1aed      	subs	r5, r5, r3
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	9304      	str	r3, [sp, #16]
 8006d6a:	9b06      	ldr	r3, [sp, #24]
 8006d6c:	b1fb      	cbz	r3, 8006dae <_dtoa_r+0x7ce>
 8006d6e:	9b08      	ldr	r3, [sp, #32]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 809f 	beq.w	8006eb4 <_dtoa_r+0x8d4>
 8006d76:	2e00      	cmp	r6, #0
 8006d78:	dd11      	ble.n	8006d9e <_dtoa_r+0x7be>
 8006d7a:	4639      	mov	r1, r7
 8006d7c:	4632      	mov	r2, r6
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f000 fbec 	bl	800755c <__pow5mult>
 8006d84:	465a      	mov	r2, fp
 8006d86:	4601      	mov	r1, r0
 8006d88:	4607      	mov	r7, r0
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f000 fb40 	bl	8007410 <__multiply>
 8006d90:	4659      	mov	r1, fp
 8006d92:	9007      	str	r0, [sp, #28]
 8006d94:	4620      	mov	r0, r4
 8006d96:	f000 fa69 	bl	800726c <_Bfree>
 8006d9a:	9b07      	ldr	r3, [sp, #28]
 8006d9c:	469b      	mov	fp, r3
 8006d9e:	9b06      	ldr	r3, [sp, #24]
 8006da0:	1b9a      	subs	r2, r3, r6
 8006da2:	d004      	beq.n	8006dae <_dtoa_r+0x7ce>
 8006da4:	4659      	mov	r1, fp
 8006da6:	4620      	mov	r0, r4
 8006da8:	f000 fbd8 	bl	800755c <__pow5mult>
 8006dac:	4683      	mov	fp, r0
 8006dae:	2101      	movs	r1, #1
 8006db0:	4620      	mov	r0, r4
 8006db2:	f000 fb17 	bl	80073e4 <__i2b>
 8006db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	4606      	mov	r6, r0
 8006dbc:	dd7c      	ble.n	8006eb8 <_dtoa_r+0x8d8>
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	4601      	mov	r1, r0
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 fbca 	bl	800755c <__pow5mult>
 8006dc8:	9b05      	ldr	r3, [sp, #20]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	4606      	mov	r6, r0
 8006dce:	dd76      	ble.n	8006ebe <_dtoa_r+0x8de>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	9306      	str	r3, [sp, #24]
 8006dd4:	6933      	ldr	r3, [r6, #16]
 8006dd6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006dda:	6918      	ldr	r0, [r3, #16]
 8006ddc:	f000 fab2 	bl	8007344 <__hi0bits>
 8006de0:	f1c0 0020 	rsb	r0, r0, #32
 8006de4:	9b04      	ldr	r3, [sp, #16]
 8006de6:	4418      	add	r0, r3
 8006de8:	f010 001f 	ands.w	r0, r0, #31
 8006dec:	f000 8086 	beq.w	8006efc <_dtoa_r+0x91c>
 8006df0:	f1c0 0320 	rsb	r3, r0, #32
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	dd7f      	ble.n	8006ef8 <_dtoa_r+0x918>
 8006df8:	f1c0 001c 	rsb	r0, r0, #28
 8006dfc:	9b04      	ldr	r3, [sp, #16]
 8006dfe:	4403      	add	r3, r0
 8006e00:	4480      	add	r8, r0
 8006e02:	4405      	add	r5, r0
 8006e04:	9304      	str	r3, [sp, #16]
 8006e06:	f1b8 0f00 	cmp.w	r8, #0
 8006e0a:	dd05      	ble.n	8006e18 <_dtoa_r+0x838>
 8006e0c:	4659      	mov	r1, fp
 8006e0e:	4642      	mov	r2, r8
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 fbfd 	bl	8007610 <__lshift>
 8006e16:	4683      	mov	fp, r0
 8006e18:	9b04      	ldr	r3, [sp, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	dd05      	ble.n	8006e2a <_dtoa_r+0x84a>
 8006e1e:	4631      	mov	r1, r6
 8006e20:	461a      	mov	r2, r3
 8006e22:	4620      	mov	r0, r4
 8006e24:	f000 fbf4 	bl	8007610 <__lshift>
 8006e28:	4606      	mov	r6, r0
 8006e2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d069      	beq.n	8006f04 <_dtoa_r+0x924>
 8006e30:	4631      	mov	r1, r6
 8006e32:	4658      	mov	r0, fp
 8006e34:	f000 fc58 	bl	80076e8 <__mcmp>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	da63      	bge.n	8006f04 <_dtoa_r+0x924>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	4659      	mov	r1, fp
 8006e40:	220a      	movs	r2, #10
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 fa34 	bl	80072b0 <__multadd>
 8006e48:	9b08      	ldr	r3, [sp, #32]
 8006e4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e4e:	4683      	mov	fp, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 818f 	beq.w	8007174 <_dtoa_r+0xb94>
 8006e56:	4639      	mov	r1, r7
 8006e58:	2300      	movs	r3, #0
 8006e5a:	220a      	movs	r2, #10
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f000 fa27 	bl	80072b0 <__multadd>
 8006e62:	f1b9 0f00 	cmp.w	r9, #0
 8006e66:	4607      	mov	r7, r0
 8006e68:	f300 808e 	bgt.w	8006f88 <_dtoa_r+0x9a8>
 8006e6c:	9b05      	ldr	r3, [sp, #20]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	dc50      	bgt.n	8006f14 <_dtoa_r+0x934>
 8006e72:	e089      	b.n	8006f88 <_dtoa_r+0x9a8>
 8006e74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e7a:	e75d      	b.n	8006d38 <_dtoa_r+0x758>
 8006e7c:	9b01      	ldr	r3, [sp, #4]
 8006e7e:	1e5e      	subs	r6, r3, #1
 8006e80:	9b06      	ldr	r3, [sp, #24]
 8006e82:	42b3      	cmp	r3, r6
 8006e84:	bfbf      	itttt	lt
 8006e86:	9b06      	ldrlt	r3, [sp, #24]
 8006e88:	9606      	strlt	r6, [sp, #24]
 8006e8a:	1af2      	sublt	r2, r6, r3
 8006e8c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006e8e:	bfb6      	itet	lt
 8006e90:	189b      	addlt	r3, r3, r2
 8006e92:	1b9e      	subge	r6, r3, r6
 8006e94:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006e96:	9b01      	ldr	r3, [sp, #4]
 8006e98:	bfb8      	it	lt
 8006e9a:	2600      	movlt	r6, #0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	bfb5      	itete	lt
 8006ea0:	eba8 0503 	sublt.w	r5, r8, r3
 8006ea4:	9b01      	ldrge	r3, [sp, #4]
 8006ea6:	2300      	movlt	r3, #0
 8006ea8:	4645      	movge	r5, r8
 8006eaa:	e747      	b.n	8006d3c <_dtoa_r+0x75c>
 8006eac:	9e06      	ldr	r6, [sp, #24]
 8006eae:	9f08      	ldr	r7, [sp, #32]
 8006eb0:	4645      	mov	r5, r8
 8006eb2:	e74c      	b.n	8006d4e <_dtoa_r+0x76e>
 8006eb4:	9a06      	ldr	r2, [sp, #24]
 8006eb6:	e775      	b.n	8006da4 <_dtoa_r+0x7c4>
 8006eb8:	9b05      	ldr	r3, [sp, #20]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	dc18      	bgt.n	8006ef0 <_dtoa_r+0x910>
 8006ebe:	9b02      	ldr	r3, [sp, #8]
 8006ec0:	b9b3      	cbnz	r3, 8006ef0 <_dtoa_r+0x910>
 8006ec2:	9b03      	ldr	r3, [sp, #12]
 8006ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ec8:	b9a3      	cbnz	r3, 8006ef4 <_dtoa_r+0x914>
 8006eca:	9b03      	ldr	r3, [sp, #12]
 8006ecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ed0:	0d1b      	lsrs	r3, r3, #20
 8006ed2:	051b      	lsls	r3, r3, #20
 8006ed4:	b12b      	cbz	r3, 8006ee2 <_dtoa_r+0x902>
 8006ed6:	9b04      	ldr	r3, [sp, #16]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	9304      	str	r3, [sp, #16]
 8006edc:	f108 0801 	add.w	r8, r8, #1
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	9306      	str	r3, [sp, #24]
 8006ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f47f af74 	bne.w	8006dd4 <_dtoa_r+0x7f4>
 8006eec:	2001      	movs	r0, #1
 8006eee:	e779      	b.n	8006de4 <_dtoa_r+0x804>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	e7f6      	b.n	8006ee2 <_dtoa_r+0x902>
 8006ef4:	9b02      	ldr	r3, [sp, #8]
 8006ef6:	e7f4      	b.n	8006ee2 <_dtoa_r+0x902>
 8006ef8:	d085      	beq.n	8006e06 <_dtoa_r+0x826>
 8006efa:	4618      	mov	r0, r3
 8006efc:	301c      	adds	r0, #28
 8006efe:	e77d      	b.n	8006dfc <_dtoa_r+0x81c>
 8006f00:	40240000 	.word	0x40240000
 8006f04:	9b01      	ldr	r3, [sp, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	dc38      	bgt.n	8006f7c <_dtoa_r+0x99c>
 8006f0a:	9b05      	ldr	r3, [sp, #20]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	dd35      	ble.n	8006f7c <_dtoa_r+0x99c>
 8006f10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006f14:	f1b9 0f00 	cmp.w	r9, #0
 8006f18:	d10d      	bne.n	8006f36 <_dtoa_r+0x956>
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	464b      	mov	r3, r9
 8006f1e:	2205      	movs	r2, #5
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 f9c5 	bl	80072b0 <__multadd>
 8006f26:	4601      	mov	r1, r0
 8006f28:	4606      	mov	r6, r0
 8006f2a:	4658      	mov	r0, fp
 8006f2c:	f000 fbdc 	bl	80076e8 <__mcmp>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	f73f adbd 	bgt.w	8006ab0 <_dtoa_r+0x4d0>
 8006f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f38:	9d00      	ldr	r5, [sp, #0]
 8006f3a:	ea6f 0a03 	mvn.w	sl, r3
 8006f3e:	f04f 0800 	mov.w	r8, #0
 8006f42:	4631      	mov	r1, r6
 8006f44:	4620      	mov	r0, r4
 8006f46:	f000 f991 	bl	800726c <_Bfree>
 8006f4a:	2f00      	cmp	r7, #0
 8006f4c:	f43f aeb4 	beq.w	8006cb8 <_dtoa_r+0x6d8>
 8006f50:	f1b8 0f00 	cmp.w	r8, #0
 8006f54:	d005      	beq.n	8006f62 <_dtoa_r+0x982>
 8006f56:	45b8      	cmp	r8, r7
 8006f58:	d003      	beq.n	8006f62 <_dtoa_r+0x982>
 8006f5a:	4641      	mov	r1, r8
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f000 f985 	bl	800726c <_Bfree>
 8006f62:	4639      	mov	r1, r7
 8006f64:	4620      	mov	r0, r4
 8006f66:	f000 f981 	bl	800726c <_Bfree>
 8006f6a:	e6a5      	b.n	8006cb8 <_dtoa_r+0x6d8>
 8006f6c:	2600      	movs	r6, #0
 8006f6e:	4637      	mov	r7, r6
 8006f70:	e7e1      	b.n	8006f36 <_dtoa_r+0x956>
 8006f72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006f74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006f78:	4637      	mov	r7, r6
 8006f7a:	e599      	b.n	8006ab0 <_dtoa_r+0x4d0>
 8006f7c:	9b08      	ldr	r3, [sp, #32]
 8006f7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 80fd 	beq.w	8007182 <_dtoa_r+0xba2>
 8006f88:	2d00      	cmp	r5, #0
 8006f8a:	dd05      	ble.n	8006f98 <_dtoa_r+0x9b8>
 8006f8c:	4639      	mov	r1, r7
 8006f8e:	462a      	mov	r2, r5
 8006f90:	4620      	mov	r0, r4
 8006f92:	f000 fb3d 	bl	8007610 <__lshift>
 8006f96:	4607      	mov	r7, r0
 8006f98:	9b06      	ldr	r3, [sp, #24]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d05c      	beq.n	8007058 <_dtoa_r+0xa78>
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f000 f923 	bl	80071ec <_Balloc>
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	b928      	cbnz	r0, 8006fb6 <_dtoa_r+0x9d6>
 8006faa:	4b80      	ldr	r3, [pc, #512]	; (80071ac <_dtoa_r+0xbcc>)
 8006fac:	4602      	mov	r2, r0
 8006fae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006fb2:	f7ff bb2e 	b.w	8006612 <_dtoa_r+0x32>
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	3202      	adds	r2, #2
 8006fba:	0092      	lsls	r2, r2, #2
 8006fbc:	f107 010c 	add.w	r1, r7, #12
 8006fc0:	300c      	adds	r0, #12
 8006fc2:	f000 f905 	bl	80071d0 <memcpy>
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	4629      	mov	r1, r5
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f000 fb20 	bl	8007610 <__lshift>
 8006fd0:	9b00      	ldr	r3, [sp, #0]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	9301      	str	r3, [sp, #4]
 8006fd6:	9b00      	ldr	r3, [sp, #0]
 8006fd8:	444b      	add	r3, r9
 8006fda:	9307      	str	r3, [sp, #28]
 8006fdc:	9b02      	ldr	r3, [sp, #8]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	46b8      	mov	r8, r7
 8006fe4:	9306      	str	r3, [sp, #24]
 8006fe6:	4607      	mov	r7, r0
 8006fe8:	9b01      	ldr	r3, [sp, #4]
 8006fea:	4631      	mov	r1, r6
 8006fec:	3b01      	subs	r3, #1
 8006fee:	4658      	mov	r0, fp
 8006ff0:	9302      	str	r3, [sp, #8]
 8006ff2:	f7ff fa69 	bl	80064c8 <quorem>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	3330      	adds	r3, #48	; 0x30
 8006ffa:	9004      	str	r0, [sp, #16]
 8006ffc:	4641      	mov	r1, r8
 8006ffe:	4658      	mov	r0, fp
 8007000:	9308      	str	r3, [sp, #32]
 8007002:	f000 fb71 	bl	80076e8 <__mcmp>
 8007006:	463a      	mov	r2, r7
 8007008:	4681      	mov	r9, r0
 800700a:	4631      	mov	r1, r6
 800700c:	4620      	mov	r0, r4
 800700e:	f000 fb87 	bl	8007720 <__mdiff>
 8007012:	68c2      	ldr	r2, [r0, #12]
 8007014:	9b08      	ldr	r3, [sp, #32]
 8007016:	4605      	mov	r5, r0
 8007018:	bb02      	cbnz	r2, 800705c <_dtoa_r+0xa7c>
 800701a:	4601      	mov	r1, r0
 800701c:	4658      	mov	r0, fp
 800701e:	f000 fb63 	bl	80076e8 <__mcmp>
 8007022:	9b08      	ldr	r3, [sp, #32]
 8007024:	4602      	mov	r2, r0
 8007026:	4629      	mov	r1, r5
 8007028:	4620      	mov	r0, r4
 800702a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800702e:	f000 f91d 	bl	800726c <_Bfree>
 8007032:	9b05      	ldr	r3, [sp, #20]
 8007034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007036:	9d01      	ldr	r5, [sp, #4]
 8007038:	ea43 0102 	orr.w	r1, r3, r2
 800703c:	9b06      	ldr	r3, [sp, #24]
 800703e:	430b      	orrs	r3, r1
 8007040:	9b08      	ldr	r3, [sp, #32]
 8007042:	d10d      	bne.n	8007060 <_dtoa_r+0xa80>
 8007044:	2b39      	cmp	r3, #57	; 0x39
 8007046:	d029      	beq.n	800709c <_dtoa_r+0xabc>
 8007048:	f1b9 0f00 	cmp.w	r9, #0
 800704c:	dd01      	ble.n	8007052 <_dtoa_r+0xa72>
 800704e:	9b04      	ldr	r3, [sp, #16]
 8007050:	3331      	adds	r3, #49	; 0x31
 8007052:	9a02      	ldr	r2, [sp, #8]
 8007054:	7013      	strb	r3, [r2, #0]
 8007056:	e774      	b.n	8006f42 <_dtoa_r+0x962>
 8007058:	4638      	mov	r0, r7
 800705a:	e7b9      	b.n	8006fd0 <_dtoa_r+0x9f0>
 800705c:	2201      	movs	r2, #1
 800705e:	e7e2      	b.n	8007026 <_dtoa_r+0xa46>
 8007060:	f1b9 0f00 	cmp.w	r9, #0
 8007064:	db06      	blt.n	8007074 <_dtoa_r+0xa94>
 8007066:	9905      	ldr	r1, [sp, #20]
 8007068:	ea41 0909 	orr.w	r9, r1, r9
 800706c:	9906      	ldr	r1, [sp, #24]
 800706e:	ea59 0101 	orrs.w	r1, r9, r1
 8007072:	d120      	bne.n	80070b6 <_dtoa_r+0xad6>
 8007074:	2a00      	cmp	r2, #0
 8007076:	ddec      	ble.n	8007052 <_dtoa_r+0xa72>
 8007078:	4659      	mov	r1, fp
 800707a:	2201      	movs	r2, #1
 800707c:	4620      	mov	r0, r4
 800707e:	9301      	str	r3, [sp, #4]
 8007080:	f000 fac6 	bl	8007610 <__lshift>
 8007084:	4631      	mov	r1, r6
 8007086:	4683      	mov	fp, r0
 8007088:	f000 fb2e 	bl	80076e8 <__mcmp>
 800708c:	2800      	cmp	r0, #0
 800708e:	9b01      	ldr	r3, [sp, #4]
 8007090:	dc02      	bgt.n	8007098 <_dtoa_r+0xab8>
 8007092:	d1de      	bne.n	8007052 <_dtoa_r+0xa72>
 8007094:	07da      	lsls	r2, r3, #31
 8007096:	d5dc      	bpl.n	8007052 <_dtoa_r+0xa72>
 8007098:	2b39      	cmp	r3, #57	; 0x39
 800709a:	d1d8      	bne.n	800704e <_dtoa_r+0xa6e>
 800709c:	9a02      	ldr	r2, [sp, #8]
 800709e:	2339      	movs	r3, #57	; 0x39
 80070a0:	7013      	strb	r3, [r2, #0]
 80070a2:	462b      	mov	r3, r5
 80070a4:	461d      	mov	r5, r3
 80070a6:	3b01      	subs	r3, #1
 80070a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070ac:	2a39      	cmp	r2, #57	; 0x39
 80070ae:	d050      	beq.n	8007152 <_dtoa_r+0xb72>
 80070b0:	3201      	adds	r2, #1
 80070b2:	701a      	strb	r2, [r3, #0]
 80070b4:	e745      	b.n	8006f42 <_dtoa_r+0x962>
 80070b6:	2a00      	cmp	r2, #0
 80070b8:	dd03      	ble.n	80070c2 <_dtoa_r+0xae2>
 80070ba:	2b39      	cmp	r3, #57	; 0x39
 80070bc:	d0ee      	beq.n	800709c <_dtoa_r+0xabc>
 80070be:	3301      	adds	r3, #1
 80070c0:	e7c7      	b.n	8007052 <_dtoa_r+0xa72>
 80070c2:	9a01      	ldr	r2, [sp, #4]
 80070c4:	9907      	ldr	r1, [sp, #28]
 80070c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80070ca:	428a      	cmp	r2, r1
 80070cc:	d02a      	beq.n	8007124 <_dtoa_r+0xb44>
 80070ce:	4659      	mov	r1, fp
 80070d0:	2300      	movs	r3, #0
 80070d2:	220a      	movs	r2, #10
 80070d4:	4620      	mov	r0, r4
 80070d6:	f000 f8eb 	bl	80072b0 <__multadd>
 80070da:	45b8      	cmp	r8, r7
 80070dc:	4683      	mov	fp, r0
 80070de:	f04f 0300 	mov.w	r3, #0
 80070e2:	f04f 020a 	mov.w	r2, #10
 80070e6:	4641      	mov	r1, r8
 80070e8:	4620      	mov	r0, r4
 80070ea:	d107      	bne.n	80070fc <_dtoa_r+0xb1c>
 80070ec:	f000 f8e0 	bl	80072b0 <__multadd>
 80070f0:	4680      	mov	r8, r0
 80070f2:	4607      	mov	r7, r0
 80070f4:	9b01      	ldr	r3, [sp, #4]
 80070f6:	3301      	adds	r3, #1
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	e775      	b.n	8006fe8 <_dtoa_r+0xa08>
 80070fc:	f000 f8d8 	bl	80072b0 <__multadd>
 8007100:	4639      	mov	r1, r7
 8007102:	4680      	mov	r8, r0
 8007104:	2300      	movs	r3, #0
 8007106:	220a      	movs	r2, #10
 8007108:	4620      	mov	r0, r4
 800710a:	f000 f8d1 	bl	80072b0 <__multadd>
 800710e:	4607      	mov	r7, r0
 8007110:	e7f0      	b.n	80070f4 <_dtoa_r+0xb14>
 8007112:	f1b9 0f00 	cmp.w	r9, #0
 8007116:	9a00      	ldr	r2, [sp, #0]
 8007118:	bfcc      	ite	gt
 800711a:	464d      	movgt	r5, r9
 800711c:	2501      	movle	r5, #1
 800711e:	4415      	add	r5, r2
 8007120:	f04f 0800 	mov.w	r8, #0
 8007124:	4659      	mov	r1, fp
 8007126:	2201      	movs	r2, #1
 8007128:	4620      	mov	r0, r4
 800712a:	9301      	str	r3, [sp, #4]
 800712c:	f000 fa70 	bl	8007610 <__lshift>
 8007130:	4631      	mov	r1, r6
 8007132:	4683      	mov	fp, r0
 8007134:	f000 fad8 	bl	80076e8 <__mcmp>
 8007138:	2800      	cmp	r0, #0
 800713a:	dcb2      	bgt.n	80070a2 <_dtoa_r+0xac2>
 800713c:	d102      	bne.n	8007144 <_dtoa_r+0xb64>
 800713e:	9b01      	ldr	r3, [sp, #4]
 8007140:	07db      	lsls	r3, r3, #31
 8007142:	d4ae      	bmi.n	80070a2 <_dtoa_r+0xac2>
 8007144:	462b      	mov	r3, r5
 8007146:	461d      	mov	r5, r3
 8007148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800714c:	2a30      	cmp	r2, #48	; 0x30
 800714e:	d0fa      	beq.n	8007146 <_dtoa_r+0xb66>
 8007150:	e6f7      	b.n	8006f42 <_dtoa_r+0x962>
 8007152:	9a00      	ldr	r2, [sp, #0]
 8007154:	429a      	cmp	r2, r3
 8007156:	d1a5      	bne.n	80070a4 <_dtoa_r+0xac4>
 8007158:	f10a 0a01 	add.w	sl, sl, #1
 800715c:	2331      	movs	r3, #49	; 0x31
 800715e:	e779      	b.n	8007054 <_dtoa_r+0xa74>
 8007160:	4b13      	ldr	r3, [pc, #76]	; (80071b0 <_dtoa_r+0xbd0>)
 8007162:	f7ff baaf 	b.w	80066c4 <_dtoa_r+0xe4>
 8007166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007168:	2b00      	cmp	r3, #0
 800716a:	f47f aa86 	bne.w	800667a <_dtoa_r+0x9a>
 800716e:	4b11      	ldr	r3, [pc, #68]	; (80071b4 <_dtoa_r+0xbd4>)
 8007170:	f7ff baa8 	b.w	80066c4 <_dtoa_r+0xe4>
 8007174:	f1b9 0f00 	cmp.w	r9, #0
 8007178:	dc03      	bgt.n	8007182 <_dtoa_r+0xba2>
 800717a:	9b05      	ldr	r3, [sp, #20]
 800717c:	2b02      	cmp	r3, #2
 800717e:	f73f aec9 	bgt.w	8006f14 <_dtoa_r+0x934>
 8007182:	9d00      	ldr	r5, [sp, #0]
 8007184:	4631      	mov	r1, r6
 8007186:	4658      	mov	r0, fp
 8007188:	f7ff f99e 	bl	80064c8 <quorem>
 800718c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007190:	f805 3b01 	strb.w	r3, [r5], #1
 8007194:	9a00      	ldr	r2, [sp, #0]
 8007196:	1aaa      	subs	r2, r5, r2
 8007198:	4591      	cmp	r9, r2
 800719a:	ddba      	ble.n	8007112 <_dtoa_r+0xb32>
 800719c:	4659      	mov	r1, fp
 800719e:	2300      	movs	r3, #0
 80071a0:	220a      	movs	r2, #10
 80071a2:	4620      	mov	r0, r4
 80071a4:	f000 f884 	bl	80072b0 <__multadd>
 80071a8:	4683      	mov	fp, r0
 80071aa:	e7eb      	b.n	8007184 <_dtoa_r+0xba4>
 80071ac:	08008a9b 	.word	0x08008a9b
 80071b0:	080089f4 	.word	0x080089f4
 80071b4:	08008a18 	.word	0x08008a18

080071b8 <_localeconv_r>:
 80071b8:	4800      	ldr	r0, [pc, #0]	; (80071bc <_localeconv_r+0x4>)
 80071ba:	4770      	bx	lr
 80071bc:	20000160 	.word	0x20000160

080071c0 <malloc>:
 80071c0:	4b02      	ldr	r3, [pc, #8]	; (80071cc <malloc+0xc>)
 80071c2:	4601      	mov	r1, r0
 80071c4:	6818      	ldr	r0, [r3, #0]
 80071c6:	f000 bbef 	b.w	80079a8 <_malloc_r>
 80071ca:	bf00      	nop
 80071cc:	2000000c 	.word	0x2000000c

080071d0 <memcpy>:
 80071d0:	440a      	add	r2, r1
 80071d2:	4291      	cmp	r1, r2
 80071d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071d8:	d100      	bne.n	80071dc <memcpy+0xc>
 80071da:	4770      	bx	lr
 80071dc:	b510      	push	{r4, lr}
 80071de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071e6:	4291      	cmp	r1, r2
 80071e8:	d1f9      	bne.n	80071de <memcpy+0xe>
 80071ea:	bd10      	pop	{r4, pc}

080071ec <_Balloc>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071f0:	4604      	mov	r4, r0
 80071f2:	460d      	mov	r5, r1
 80071f4:	b976      	cbnz	r6, 8007214 <_Balloc+0x28>
 80071f6:	2010      	movs	r0, #16
 80071f8:	f7ff ffe2 	bl	80071c0 <malloc>
 80071fc:	4602      	mov	r2, r0
 80071fe:	6260      	str	r0, [r4, #36]	; 0x24
 8007200:	b920      	cbnz	r0, 800720c <_Balloc+0x20>
 8007202:	4b18      	ldr	r3, [pc, #96]	; (8007264 <_Balloc+0x78>)
 8007204:	4818      	ldr	r0, [pc, #96]	; (8007268 <_Balloc+0x7c>)
 8007206:	2166      	movs	r1, #102	; 0x66
 8007208:	f000 fd94 	bl	8007d34 <__assert_func>
 800720c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007210:	6006      	str	r6, [r0, #0]
 8007212:	60c6      	str	r6, [r0, #12]
 8007214:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007216:	68f3      	ldr	r3, [r6, #12]
 8007218:	b183      	cbz	r3, 800723c <_Balloc+0x50>
 800721a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007222:	b9b8      	cbnz	r0, 8007254 <_Balloc+0x68>
 8007224:	2101      	movs	r1, #1
 8007226:	fa01 f605 	lsl.w	r6, r1, r5
 800722a:	1d72      	adds	r2, r6, #5
 800722c:	0092      	lsls	r2, r2, #2
 800722e:	4620      	mov	r0, r4
 8007230:	f000 fb5a 	bl	80078e8 <_calloc_r>
 8007234:	b160      	cbz	r0, 8007250 <_Balloc+0x64>
 8007236:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800723a:	e00e      	b.n	800725a <_Balloc+0x6e>
 800723c:	2221      	movs	r2, #33	; 0x21
 800723e:	2104      	movs	r1, #4
 8007240:	4620      	mov	r0, r4
 8007242:	f000 fb51 	bl	80078e8 <_calloc_r>
 8007246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007248:	60f0      	str	r0, [r6, #12]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1e4      	bne.n	800721a <_Balloc+0x2e>
 8007250:	2000      	movs	r0, #0
 8007252:	bd70      	pop	{r4, r5, r6, pc}
 8007254:	6802      	ldr	r2, [r0, #0]
 8007256:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800725a:	2300      	movs	r3, #0
 800725c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007260:	e7f7      	b.n	8007252 <_Balloc+0x66>
 8007262:	bf00      	nop
 8007264:	08008a25 	.word	0x08008a25
 8007268:	08008aac 	.word	0x08008aac

0800726c <_Bfree>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007270:	4605      	mov	r5, r0
 8007272:	460c      	mov	r4, r1
 8007274:	b976      	cbnz	r6, 8007294 <_Bfree+0x28>
 8007276:	2010      	movs	r0, #16
 8007278:	f7ff ffa2 	bl	80071c0 <malloc>
 800727c:	4602      	mov	r2, r0
 800727e:	6268      	str	r0, [r5, #36]	; 0x24
 8007280:	b920      	cbnz	r0, 800728c <_Bfree+0x20>
 8007282:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <_Bfree+0x3c>)
 8007284:	4809      	ldr	r0, [pc, #36]	; (80072ac <_Bfree+0x40>)
 8007286:	218a      	movs	r1, #138	; 0x8a
 8007288:	f000 fd54 	bl	8007d34 <__assert_func>
 800728c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007290:	6006      	str	r6, [r0, #0]
 8007292:	60c6      	str	r6, [r0, #12]
 8007294:	b13c      	cbz	r4, 80072a6 <_Bfree+0x3a>
 8007296:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007298:	6862      	ldr	r2, [r4, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072a0:	6021      	str	r1, [r4, #0]
 80072a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072a6:	bd70      	pop	{r4, r5, r6, pc}
 80072a8:	08008a25 	.word	0x08008a25
 80072ac:	08008aac 	.word	0x08008aac

080072b0 <__multadd>:
 80072b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b4:	690e      	ldr	r6, [r1, #16]
 80072b6:	4607      	mov	r7, r0
 80072b8:	4698      	mov	r8, r3
 80072ba:	460c      	mov	r4, r1
 80072bc:	f101 0014 	add.w	r0, r1, #20
 80072c0:	2300      	movs	r3, #0
 80072c2:	6805      	ldr	r5, [r0, #0]
 80072c4:	b2a9      	uxth	r1, r5
 80072c6:	fb02 8101 	mla	r1, r2, r1, r8
 80072ca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80072ce:	0c2d      	lsrs	r5, r5, #16
 80072d0:	fb02 c505 	mla	r5, r2, r5, ip
 80072d4:	b289      	uxth	r1, r1
 80072d6:	3301      	adds	r3, #1
 80072d8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80072dc:	429e      	cmp	r6, r3
 80072de:	f840 1b04 	str.w	r1, [r0], #4
 80072e2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80072e6:	dcec      	bgt.n	80072c2 <__multadd+0x12>
 80072e8:	f1b8 0f00 	cmp.w	r8, #0
 80072ec:	d022      	beq.n	8007334 <__multadd+0x84>
 80072ee:	68a3      	ldr	r3, [r4, #8]
 80072f0:	42b3      	cmp	r3, r6
 80072f2:	dc19      	bgt.n	8007328 <__multadd+0x78>
 80072f4:	6861      	ldr	r1, [r4, #4]
 80072f6:	4638      	mov	r0, r7
 80072f8:	3101      	adds	r1, #1
 80072fa:	f7ff ff77 	bl	80071ec <_Balloc>
 80072fe:	4605      	mov	r5, r0
 8007300:	b928      	cbnz	r0, 800730e <__multadd+0x5e>
 8007302:	4602      	mov	r2, r0
 8007304:	4b0d      	ldr	r3, [pc, #52]	; (800733c <__multadd+0x8c>)
 8007306:	480e      	ldr	r0, [pc, #56]	; (8007340 <__multadd+0x90>)
 8007308:	21b5      	movs	r1, #181	; 0xb5
 800730a:	f000 fd13 	bl	8007d34 <__assert_func>
 800730e:	6922      	ldr	r2, [r4, #16]
 8007310:	3202      	adds	r2, #2
 8007312:	f104 010c 	add.w	r1, r4, #12
 8007316:	0092      	lsls	r2, r2, #2
 8007318:	300c      	adds	r0, #12
 800731a:	f7ff ff59 	bl	80071d0 <memcpy>
 800731e:	4621      	mov	r1, r4
 8007320:	4638      	mov	r0, r7
 8007322:	f7ff ffa3 	bl	800726c <_Bfree>
 8007326:	462c      	mov	r4, r5
 8007328:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800732c:	3601      	adds	r6, #1
 800732e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007332:	6126      	str	r6, [r4, #16]
 8007334:	4620      	mov	r0, r4
 8007336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800733a:	bf00      	nop
 800733c:	08008a9b 	.word	0x08008a9b
 8007340:	08008aac 	.word	0x08008aac

08007344 <__hi0bits>:
 8007344:	0c03      	lsrs	r3, r0, #16
 8007346:	041b      	lsls	r3, r3, #16
 8007348:	b9d3      	cbnz	r3, 8007380 <__hi0bits+0x3c>
 800734a:	0400      	lsls	r0, r0, #16
 800734c:	2310      	movs	r3, #16
 800734e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007352:	bf04      	itt	eq
 8007354:	0200      	lsleq	r0, r0, #8
 8007356:	3308      	addeq	r3, #8
 8007358:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800735c:	bf04      	itt	eq
 800735e:	0100      	lsleq	r0, r0, #4
 8007360:	3304      	addeq	r3, #4
 8007362:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007366:	bf04      	itt	eq
 8007368:	0080      	lsleq	r0, r0, #2
 800736a:	3302      	addeq	r3, #2
 800736c:	2800      	cmp	r0, #0
 800736e:	db05      	blt.n	800737c <__hi0bits+0x38>
 8007370:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007374:	f103 0301 	add.w	r3, r3, #1
 8007378:	bf08      	it	eq
 800737a:	2320      	moveq	r3, #32
 800737c:	4618      	mov	r0, r3
 800737e:	4770      	bx	lr
 8007380:	2300      	movs	r3, #0
 8007382:	e7e4      	b.n	800734e <__hi0bits+0xa>

08007384 <__lo0bits>:
 8007384:	6803      	ldr	r3, [r0, #0]
 8007386:	f013 0207 	ands.w	r2, r3, #7
 800738a:	4601      	mov	r1, r0
 800738c:	d00b      	beq.n	80073a6 <__lo0bits+0x22>
 800738e:	07da      	lsls	r2, r3, #31
 8007390:	d424      	bmi.n	80073dc <__lo0bits+0x58>
 8007392:	0798      	lsls	r0, r3, #30
 8007394:	bf49      	itett	mi
 8007396:	085b      	lsrmi	r3, r3, #1
 8007398:	089b      	lsrpl	r3, r3, #2
 800739a:	2001      	movmi	r0, #1
 800739c:	600b      	strmi	r3, [r1, #0]
 800739e:	bf5c      	itt	pl
 80073a0:	600b      	strpl	r3, [r1, #0]
 80073a2:	2002      	movpl	r0, #2
 80073a4:	4770      	bx	lr
 80073a6:	b298      	uxth	r0, r3
 80073a8:	b9b0      	cbnz	r0, 80073d8 <__lo0bits+0x54>
 80073aa:	0c1b      	lsrs	r3, r3, #16
 80073ac:	2010      	movs	r0, #16
 80073ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 80073b2:	bf04      	itt	eq
 80073b4:	0a1b      	lsreq	r3, r3, #8
 80073b6:	3008      	addeq	r0, #8
 80073b8:	071a      	lsls	r2, r3, #28
 80073ba:	bf04      	itt	eq
 80073bc:	091b      	lsreq	r3, r3, #4
 80073be:	3004      	addeq	r0, #4
 80073c0:	079a      	lsls	r2, r3, #30
 80073c2:	bf04      	itt	eq
 80073c4:	089b      	lsreq	r3, r3, #2
 80073c6:	3002      	addeq	r0, #2
 80073c8:	07da      	lsls	r2, r3, #31
 80073ca:	d403      	bmi.n	80073d4 <__lo0bits+0x50>
 80073cc:	085b      	lsrs	r3, r3, #1
 80073ce:	f100 0001 	add.w	r0, r0, #1
 80073d2:	d005      	beq.n	80073e0 <__lo0bits+0x5c>
 80073d4:	600b      	str	r3, [r1, #0]
 80073d6:	4770      	bx	lr
 80073d8:	4610      	mov	r0, r2
 80073da:	e7e8      	b.n	80073ae <__lo0bits+0x2a>
 80073dc:	2000      	movs	r0, #0
 80073de:	4770      	bx	lr
 80073e0:	2020      	movs	r0, #32
 80073e2:	4770      	bx	lr

080073e4 <__i2b>:
 80073e4:	b510      	push	{r4, lr}
 80073e6:	460c      	mov	r4, r1
 80073e8:	2101      	movs	r1, #1
 80073ea:	f7ff feff 	bl	80071ec <_Balloc>
 80073ee:	4602      	mov	r2, r0
 80073f0:	b928      	cbnz	r0, 80073fe <__i2b+0x1a>
 80073f2:	4b05      	ldr	r3, [pc, #20]	; (8007408 <__i2b+0x24>)
 80073f4:	4805      	ldr	r0, [pc, #20]	; (800740c <__i2b+0x28>)
 80073f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80073fa:	f000 fc9b 	bl	8007d34 <__assert_func>
 80073fe:	2301      	movs	r3, #1
 8007400:	6144      	str	r4, [r0, #20]
 8007402:	6103      	str	r3, [r0, #16]
 8007404:	bd10      	pop	{r4, pc}
 8007406:	bf00      	nop
 8007408:	08008a9b 	.word	0x08008a9b
 800740c:	08008aac 	.word	0x08008aac

08007410 <__multiply>:
 8007410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007414:	4614      	mov	r4, r2
 8007416:	690a      	ldr	r2, [r1, #16]
 8007418:	6923      	ldr	r3, [r4, #16]
 800741a:	429a      	cmp	r2, r3
 800741c:	bfb8      	it	lt
 800741e:	460b      	movlt	r3, r1
 8007420:	460d      	mov	r5, r1
 8007422:	bfbc      	itt	lt
 8007424:	4625      	movlt	r5, r4
 8007426:	461c      	movlt	r4, r3
 8007428:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800742c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007430:	68ab      	ldr	r3, [r5, #8]
 8007432:	6869      	ldr	r1, [r5, #4]
 8007434:	eb0a 0709 	add.w	r7, sl, r9
 8007438:	42bb      	cmp	r3, r7
 800743a:	b085      	sub	sp, #20
 800743c:	bfb8      	it	lt
 800743e:	3101      	addlt	r1, #1
 8007440:	f7ff fed4 	bl	80071ec <_Balloc>
 8007444:	b930      	cbnz	r0, 8007454 <__multiply+0x44>
 8007446:	4602      	mov	r2, r0
 8007448:	4b42      	ldr	r3, [pc, #264]	; (8007554 <__multiply+0x144>)
 800744a:	4843      	ldr	r0, [pc, #268]	; (8007558 <__multiply+0x148>)
 800744c:	f240 115d 	movw	r1, #349	; 0x15d
 8007450:	f000 fc70 	bl	8007d34 <__assert_func>
 8007454:	f100 0614 	add.w	r6, r0, #20
 8007458:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800745c:	4633      	mov	r3, r6
 800745e:	2200      	movs	r2, #0
 8007460:	4543      	cmp	r3, r8
 8007462:	d31e      	bcc.n	80074a2 <__multiply+0x92>
 8007464:	f105 0c14 	add.w	ip, r5, #20
 8007468:	f104 0314 	add.w	r3, r4, #20
 800746c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007470:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007474:	9202      	str	r2, [sp, #8]
 8007476:	ebac 0205 	sub.w	r2, ip, r5
 800747a:	3a15      	subs	r2, #21
 800747c:	f022 0203 	bic.w	r2, r2, #3
 8007480:	3204      	adds	r2, #4
 8007482:	f105 0115 	add.w	r1, r5, #21
 8007486:	458c      	cmp	ip, r1
 8007488:	bf38      	it	cc
 800748a:	2204      	movcc	r2, #4
 800748c:	9201      	str	r2, [sp, #4]
 800748e:	9a02      	ldr	r2, [sp, #8]
 8007490:	9303      	str	r3, [sp, #12]
 8007492:	429a      	cmp	r2, r3
 8007494:	d808      	bhi.n	80074a8 <__multiply+0x98>
 8007496:	2f00      	cmp	r7, #0
 8007498:	dc55      	bgt.n	8007546 <__multiply+0x136>
 800749a:	6107      	str	r7, [r0, #16]
 800749c:	b005      	add	sp, #20
 800749e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a2:	f843 2b04 	str.w	r2, [r3], #4
 80074a6:	e7db      	b.n	8007460 <__multiply+0x50>
 80074a8:	f8b3 a000 	ldrh.w	sl, [r3]
 80074ac:	f1ba 0f00 	cmp.w	sl, #0
 80074b0:	d020      	beq.n	80074f4 <__multiply+0xe4>
 80074b2:	f105 0e14 	add.w	lr, r5, #20
 80074b6:	46b1      	mov	r9, r6
 80074b8:	2200      	movs	r2, #0
 80074ba:	f85e 4b04 	ldr.w	r4, [lr], #4
 80074be:	f8d9 b000 	ldr.w	fp, [r9]
 80074c2:	b2a1      	uxth	r1, r4
 80074c4:	fa1f fb8b 	uxth.w	fp, fp
 80074c8:	fb0a b101 	mla	r1, sl, r1, fp
 80074cc:	4411      	add	r1, r2
 80074ce:	f8d9 2000 	ldr.w	r2, [r9]
 80074d2:	0c24      	lsrs	r4, r4, #16
 80074d4:	0c12      	lsrs	r2, r2, #16
 80074d6:	fb0a 2404 	mla	r4, sl, r4, r2
 80074da:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80074de:	b289      	uxth	r1, r1
 80074e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80074e4:	45f4      	cmp	ip, lr
 80074e6:	f849 1b04 	str.w	r1, [r9], #4
 80074ea:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80074ee:	d8e4      	bhi.n	80074ba <__multiply+0xaa>
 80074f0:	9901      	ldr	r1, [sp, #4]
 80074f2:	5072      	str	r2, [r6, r1]
 80074f4:	9a03      	ldr	r2, [sp, #12]
 80074f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074fa:	3304      	adds	r3, #4
 80074fc:	f1b9 0f00 	cmp.w	r9, #0
 8007500:	d01f      	beq.n	8007542 <__multiply+0x132>
 8007502:	6834      	ldr	r4, [r6, #0]
 8007504:	f105 0114 	add.w	r1, r5, #20
 8007508:	46b6      	mov	lr, r6
 800750a:	f04f 0a00 	mov.w	sl, #0
 800750e:	880a      	ldrh	r2, [r1, #0]
 8007510:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007514:	fb09 b202 	mla	r2, r9, r2, fp
 8007518:	4492      	add	sl, r2
 800751a:	b2a4      	uxth	r4, r4
 800751c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007520:	f84e 4b04 	str.w	r4, [lr], #4
 8007524:	f851 4b04 	ldr.w	r4, [r1], #4
 8007528:	f8be 2000 	ldrh.w	r2, [lr]
 800752c:	0c24      	lsrs	r4, r4, #16
 800752e:	fb09 2404 	mla	r4, r9, r4, r2
 8007532:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007536:	458c      	cmp	ip, r1
 8007538:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800753c:	d8e7      	bhi.n	800750e <__multiply+0xfe>
 800753e:	9a01      	ldr	r2, [sp, #4]
 8007540:	50b4      	str	r4, [r6, r2]
 8007542:	3604      	adds	r6, #4
 8007544:	e7a3      	b.n	800748e <__multiply+0x7e>
 8007546:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1a5      	bne.n	800749a <__multiply+0x8a>
 800754e:	3f01      	subs	r7, #1
 8007550:	e7a1      	b.n	8007496 <__multiply+0x86>
 8007552:	bf00      	nop
 8007554:	08008a9b 	.word	0x08008a9b
 8007558:	08008aac 	.word	0x08008aac

0800755c <__pow5mult>:
 800755c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007560:	4615      	mov	r5, r2
 8007562:	f012 0203 	ands.w	r2, r2, #3
 8007566:	4606      	mov	r6, r0
 8007568:	460f      	mov	r7, r1
 800756a:	d007      	beq.n	800757c <__pow5mult+0x20>
 800756c:	4c25      	ldr	r4, [pc, #148]	; (8007604 <__pow5mult+0xa8>)
 800756e:	3a01      	subs	r2, #1
 8007570:	2300      	movs	r3, #0
 8007572:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007576:	f7ff fe9b 	bl	80072b0 <__multadd>
 800757a:	4607      	mov	r7, r0
 800757c:	10ad      	asrs	r5, r5, #2
 800757e:	d03d      	beq.n	80075fc <__pow5mult+0xa0>
 8007580:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007582:	b97c      	cbnz	r4, 80075a4 <__pow5mult+0x48>
 8007584:	2010      	movs	r0, #16
 8007586:	f7ff fe1b 	bl	80071c0 <malloc>
 800758a:	4602      	mov	r2, r0
 800758c:	6270      	str	r0, [r6, #36]	; 0x24
 800758e:	b928      	cbnz	r0, 800759c <__pow5mult+0x40>
 8007590:	4b1d      	ldr	r3, [pc, #116]	; (8007608 <__pow5mult+0xac>)
 8007592:	481e      	ldr	r0, [pc, #120]	; (800760c <__pow5mult+0xb0>)
 8007594:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007598:	f000 fbcc 	bl	8007d34 <__assert_func>
 800759c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075a0:	6004      	str	r4, [r0, #0]
 80075a2:	60c4      	str	r4, [r0, #12]
 80075a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80075a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075ac:	b94c      	cbnz	r4, 80075c2 <__pow5mult+0x66>
 80075ae:	f240 2171 	movw	r1, #625	; 0x271
 80075b2:	4630      	mov	r0, r6
 80075b4:	f7ff ff16 	bl	80073e4 <__i2b>
 80075b8:	2300      	movs	r3, #0
 80075ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80075be:	4604      	mov	r4, r0
 80075c0:	6003      	str	r3, [r0, #0]
 80075c2:	f04f 0900 	mov.w	r9, #0
 80075c6:	07eb      	lsls	r3, r5, #31
 80075c8:	d50a      	bpl.n	80075e0 <__pow5mult+0x84>
 80075ca:	4639      	mov	r1, r7
 80075cc:	4622      	mov	r2, r4
 80075ce:	4630      	mov	r0, r6
 80075d0:	f7ff ff1e 	bl	8007410 <__multiply>
 80075d4:	4639      	mov	r1, r7
 80075d6:	4680      	mov	r8, r0
 80075d8:	4630      	mov	r0, r6
 80075da:	f7ff fe47 	bl	800726c <_Bfree>
 80075de:	4647      	mov	r7, r8
 80075e0:	106d      	asrs	r5, r5, #1
 80075e2:	d00b      	beq.n	80075fc <__pow5mult+0xa0>
 80075e4:	6820      	ldr	r0, [r4, #0]
 80075e6:	b938      	cbnz	r0, 80075f8 <__pow5mult+0x9c>
 80075e8:	4622      	mov	r2, r4
 80075ea:	4621      	mov	r1, r4
 80075ec:	4630      	mov	r0, r6
 80075ee:	f7ff ff0f 	bl	8007410 <__multiply>
 80075f2:	6020      	str	r0, [r4, #0]
 80075f4:	f8c0 9000 	str.w	r9, [r0]
 80075f8:	4604      	mov	r4, r0
 80075fa:	e7e4      	b.n	80075c6 <__pow5mult+0x6a>
 80075fc:	4638      	mov	r0, r7
 80075fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007602:	bf00      	nop
 8007604:	08008c00 	.word	0x08008c00
 8007608:	08008a25 	.word	0x08008a25
 800760c:	08008aac 	.word	0x08008aac

08007610 <__lshift>:
 8007610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007614:	460c      	mov	r4, r1
 8007616:	6849      	ldr	r1, [r1, #4]
 8007618:	6923      	ldr	r3, [r4, #16]
 800761a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800761e:	68a3      	ldr	r3, [r4, #8]
 8007620:	4607      	mov	r7, r0
 8007622:	4691      	mov	r9, r2
 8007624:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007628:	f108 0601 	add.w	r6, r8, #1
 800762c:	42b3      	cmp	r3, r6
 800762e:	db0b      	blt.n	8007648 <__lshift+0x38>
 8007630:	4638      	mov	r0, r7
 8007632:	f7ff fddb 	bl	80071ec <_Balloc>
 8007636:	4605      	mov	r5, r0
 8007638:	b948      	cbnz	r0, 800764e <__lshift+0x3e>
 800763a:	4602      	mov	r2, r0
 800763c:	4b28      	ldr	r3, [pc, #160]	; (80076e0 <__lshift+0xd0>)
 800763e:	4829      	ldr	r0, [pc, #164]	; (80076e4 <__lshift+0xd4>)
 8007640:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007644:	f000 fb76 	bl	8007d34 <__assert_func>
 8007648:	3101      	adds	r1, #1
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	e7ee      	b.n	800762c <__lshift+0x1c>
 800764e:	2300      	movs	r3, #0
 8007650:	f100 0114 	add.w	r1, r0, #20
 8007654:	f100 0210 	add.w	r2, r0, #16
 8007658:	4618      	mov	r0, r3
 800765a:	4553      	cmp	r3, sl
 800765c:	db33      	blt.n	80076c6 <__lshift+0xb6>
 800765e:	6920      	ldr	r0, [r4, #16]
 8007660:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007664:	f104 0314 	add.w	r3, r4, #20
 8007668:	f019 091f 	ands.w	r9, r9, #31
 800766c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007670:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007674:	d02b      	beq.n	80076ce <__lshift+0xbe>
 8007676:	f1c9 0e20 	rsb	lr, r9, #32
 800767a:	468a      	mov	sl, r1
 800767c:	2200      	movs	r2, #0
 800767e:	6818      	ldr	r0, [r3, #0]
 8007680:	fa00 f009 	lsl.w	r0, r0, r9
 8007684:	4302      	orrs	r2, r0
 8007686:	f84a 2b04 	str.w	r2, [sl], #4
 800768a:	f853 2b04 	ldr.w	r2, [r3], #4
 800768e:	459c      	cmp	ip, r3
 8007690:	fa22 f20e 	lsr.w	r2, r2, lr
 8007694:	d8f3      	bhi.n	800767e <__lshift+0x6e>
 8007696:	ebac 0304 	sub.w	r3, ip, r4
 800769a:	3b15      	subs	r3, #21
 800769c:	f023 0303 	bic.w	r3, r3, #3
 80076a0:	3304      	adds	r3, #4
 80076a2:	f104 0015 	add.w	r0, r4, #21
 80076a6:	4584      	cmp	ip, r0
 80076a8:	bf38      	it	cc
 80076aa:	2304      	movcc	r3, #4
 80076ac:	50ca      	str	r2, [r1, r3]
 80076ae:	b10a      	cbz	r2, 80076b4 <__lshift+0xa4>
 80076b0:	f108 0602 	add.w	r6, r8, #2
 80076b4:	3e01      	subs	r6, #1
 80076b6:	4638      	mov	r0, r7
 80076b8:	612e      	str	r6, [r5, #16]
 80076ba:	4621      	mov	r1, r4
 80076bc:	f7ff fdd6 	bl	800726c <_Bfree>
 80076c0:	4628      	mov	r0, r5
 80076c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80076ca:	3301      	adds	r3, #1
 80076cc:	e7c5      	b.n	800765a <__lshift+0x4a>
 80076ce:	3904      	subs	r1, #4
 80076d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80076d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80076d8:	459c      	cmp	ip, r3
 80076da:	d8f9      	bhi.n	80076d0 <__lshift+0xc0>
 80076dc:	e7ea      	b.n	80076b4 <__lshift+0xa4>
 80076de:	bf00      	nop
 80076e0:	08008a9b 	.word	0x08008a9b
 80076e4:	08008aac 	.word	0x08008aac

080076e8 <__mcmp>:
 80076e8:	b530      	push	{r4, r5, lr}
 80076ea:	6902      	ldr	r2, [r0, #16]
 80076ec:	690c      	ldr	r4, [r1, #16]
 80076ee:	1b12      	subs	r2, r2, r4
 80076f0:	d10e      	bne.n	8007710 <__mcmp+0x28>
 80076f2:	f100 0314 	add.w	r3, r0, #20
 80076f6:	3114      	adds	r1, #20
 80076f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007700:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007704:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007708:	42a5      	cmp	r5, r4
 800770a:	d003      	beq.n	8007714 <__mcmp+0x2c>
 800770c:	d305      	bcc.n	800771a <__mcmp+0x32>
 800770e:	2201      	movs	r2, #1
 8007710:	4610      	mov	r0, r2
 8007712:	bd30      	pop	{r4, r5, pc}
 8007714:	4283      	cmp	r3, r0
 8007716:	d3f3      	bcc.n	8007700 <__mcmp+0x18>
 8007718:	e7fa      	b.n	8007710 <__mcmp+0x28>
 800771a:	f04f 32ff 	mov.w	r2, #4294967295
 800771e:	e7f7      	b.n	8007710 <__mcmp+0x28>

08007720 <__mdiff>:
 8007720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	460c      	mov	r4, r1
 8007726:	4606      	mov	r6, r0
 8007728:	4611      	mov	r1, r2
 800772a:	4620      	mov	r0, r4
 800772c:	4617      	mov	r7, r2
 800772e:	f7ff ffdb 	bl	80076e8 <__mcmp>
 8007732:	1e05      	subs	r5, r0, #0
 8007734:	d110      	bne.n	8007758 <__mdiff+0x38>
 8007736:	4629      	mov	r1, r5
 8007738:	4630      	mov	r0, r6
 800773a:	f7ff fd57 	bl	80071ec <_Balloc>
 800773e:	b930      	cbnz	r0, 800774e <__mdiff+0x2e>
 8007740:	4b39      	ldr	r3, [pc, #228]	; (8007828 <__mdiff+0x108>)
 8007742:	4602      	mov	r2, r0
 8007744:	f240 2132 	movw	r1, #562	; 0x232
 8007748:	4838      	ldr	r0, [pc, #224]	; (800782c <__mdiff+0x10c>)
 800774a:	f000 faf3 	bl	8007d34 <__assert_func>
 800774e:	2301      	movs	r3, #1
 8007750:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007754:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007758:	bfa4      	itt	ge
 800775a:	463b      	movge	r3, r7
 800775c:	4627      	movge	r7, r4
 800775e:	4630      	mov	r0, r6
 8007760:	6879      	ldr	r1, [r7, #4]
 8007762:	bfa6      	itte	ge
 8007764:	461c      	movge	r4, r3
 8007766:	2500      	movge	r5, #0
 8007768:	2501      	movlt	r5, #1
 800776a:	f7ff fd3f 	bl	80071ec <_Balloc>
 800776e:	b920      	cbnz	r0, 800777a <__mdiff+0x5a>
 8007770:	4b2d      	ldr	r3, [pc, #180]	; (8007828 <__mdiff+0x108>)
 8007772:	4602      	mov	r2, r0
 8007774:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007778:	e7e6      	b.n	8007748 <__mdiff+0x28>
 800777a:	693e      	ldr	r6, [r7, #16]
 800777c:	60c5      	str	r5, [r0, #12]
 800777e:	6925      	ldr	r5, [r4, #16]
 8007780:	f107 0114 	add.w	r1, r7, #20
 8007784:	f104 0914 	add.w	r9, r4, #20
 8007788:	f100 0e14 	add.w	lr, r0, #20
 800778c:	f107 0210 	add.w	r2, r7, #16
 8007790:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007794:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007798:	46f2      	mov	sl, lr
 800779a:	2700      	movs	r7, #0
 800779c:	f859 3b04 	ldr.w	r3, [r9], #4
 80077a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80077a4:	fa1f f883 	uxth.w	r8, r3
 80077a8:	fa17 f78b 	uxtah	r7, r7, fp
 80077ac:	0c1b      	lsrs	r3, r3, #16
 80077ae:	eba7 0808 	sub.w	r8, r7, r8
 80077b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80077b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80077ba:	fa1f f888 	uxth.w	r8, r8
 80077be:	141f      	asrs	r7, r3, #16
 80077c0:	454d      	cmp	r5, r9
 80077c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80077c6:	f84a 3b04 	str.w	r3, [sl], #4
 80077ca:	d8e7      	bhi.n	800779c <__mdiff+0x7c>
 80077cc:	1b2b      	subs	r3, r5, r4
 80077ce:	3b15      	subs	r3, #21
 80077d0:	f023 0303 	bic.w	r3, r3, #3
 80077d4:	3304      	adds	r3, #4
 80077d6:	3415      	adds	r4, #21
 80077d8:	42a5      	cmp	r5, r4
 80077da:	bf38      	it	cc
 80077dc:	2304      	movcc	r3, #4
 80077de:	4419      	add	r1, r3
 80077e0:	4473      	add	r3, lr
 80077e2:	469e      	mov	lr, r3
 80077e4:	460d      	mov	r5, r1
 80077e6:	4565      	cmp	r5, ip
 80077e8:	d30e      	bcc.n	8007808 <__mdiff+0xe8>
 80077ea:	f10c 0203 	add.w	r2, ip, #3
 80077ee:	1a52      	subs	r2, r2, r1
 80077f0:	f022 0203 	bic.w	r2, r2, #3
 80077f4:	3903      	subs	r1, #3
 80077f6:	458c      	cmp	ip, r1
 80077f8:	bf38      	it	cc
 80077fa:	2200      	movcc	r2, #0
 80077fc:	441a      	add	r2, r3
 80077fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007802:	b17b      	cbz	r3, 8007824 <__mdiff+0x104>
 8007804:	6106      	str	r6, [r0, #16]
 8007806:	e7a5      	b.n	8007754 <__mdiff+0x34>
 8007808:	f855 8b04 	ldr.w	r8, [r5], #4
 800780c:	fa17 f488 	uxtah	r4, r7, r8
 8007810:	1422      	asrs	r2, r4, #16
 8007812:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007816:	b2a4      	uxth	r4, r4
 8007818:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800781c:	f84e 4b04 	str.w	r4, [lr], #4
 8007820:	1417      	asrs	r7, r2, #16
 8007822:	e7e0      	b.n	80077e6 <__mdiff+0xc6>
 8007824:	3e01      	subs	r6, #1
 8007826:	e7ea      	b.n	80077fe <__mdiff+0xde>
 8007828:	08008a9b 	.word	0x08008a9b
 800782c:	08008aac 	.word	0x08008aac

08007830 <__d2b>:
 8007830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007834:	4689      	mov	r9, r1
 8007836:	2101      	movs	r1, #1
 8007838:	ec57 6b10 	vmov	r6, r7, d0
 800783c:	4690      	mov	r8, r2
 800783e:	f7ff fcd5 	bl	80071ec <_Balloc>
 8007842:	4604      	mov	r4, r0
 8007844:	b930      	cbnz	r0, 8007854 <__d2b+0x24>
 8007846:	4602      	mov	r2, r0
 8007848:	4b25      	ldr	r3, [pc, #148]	; (80078e0 <__d2b+0xb0>)
 800784a:	4826      	ldr	r0, [pc, #152]	; (80078e4 <__d2b+0xb4>)
 800784c:	f240 310a 	movw	r1, #778	; 0x30a
 8007850:	f000 fa70 	bl	8007d34 <__assert_func>
 8007854:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007858:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800785c:	bb35      	cbnz	r5, 80078ac <__d2b+0x7c>
 800785e:	2e00      	cmp	r6, #0
 8007860:	9301      	str	r3, [sp, #4]
 8007862:	d028      	beq.n	80078b6 <__d2b+0x86>
 8007864:	4668      	mov	r0, sp
 8007866:	9600      	str	r6, [sp, #0]
 8007868:	f7ff fd8c 	bl	8007384 <__lo0bits>
 800786c:	9900      	ldr	r1, [sp, #0]
 800786e:	b300      	cbz	r0, 80078b2 <__d2b+0x82>
 8007870:	9a01      	ldr	r2, [sp, #4]
 8007872:	f1c0 0320 	rsb	r3, r0, #32
 8007876:	fa02 f303 	lsl.w	r3, r2, r3
 800787a:	430b      	orrs	r3, r1
 800787c:	40c2      	lsrs	r2, r0
 800787e:	6163      	str	r3, [r4, #20]
 8007880:	9201      	str	r2, [sp, #4]
 8007882:	9b01      	ldr	r3, [sp, #4]
 8007884:	61a3      	str	r3, [r4, #24]
 8007886:	2b00      	cmp	r3, #0
 8007888:	bf14      	ite	ne
 800788a:	2202      	movne	r2, #2
 800788c:	2201      	moveq	r2, #1
 800788e:	6122      	str	r2, [r4, #16]
 8007890:	b1d5      	cbz	r5, 80078c8 <__d2b+0x98>
 8007892:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007896:	4405      	add	r5, r0
 8007898:	f8c9 5000 	str.w	r5, [r9]
 800789c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80078a0:	f8c8 0000 	str.w	r0, [r8]
 80078a4:	4620      	mov	r0, r4
 80078a6:	b003      	add	sp, #12
 80078a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078b0:	e7d5      	b.n	800785e <__d2b+0x2e>
 80078b2:	6161      	str	r1, [r4, #20]
 80078b4:	e7e5      	b.n	8007882 <__d2b+0x52>
 80078b6:	a801      	add	r0, sp, #4
 80078b8:	f7ff fd64 	bl	8007384 <__lo0bits>
 80078bc:	9b01      	ldr	r3, [sp, #4]
 80078be:	6163      	str	r3, [r4, #20]
 80078c0:	2201      	movs	r2, #1
 80078c2:	6122      	str	r2, [r4, #16]
 80078c4:	3020      	adds	r0, #32
 80078c6:	e7e3      	b.n	8007890 <__d2b+0x60>
 80078c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078d0:	f8c9 0000 	str.w	r0, [r9]
 80078d4:	6918      	ldr	r0, [r3, #16]
 80078d6:	f7ff fd35 	bl	8007344 <__hi0bits>
 80078da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078de:	e7df      	b.n	80078a0 <__d2b+0x70>
 80078e0:	08008a9b 	.word	0x08008a9b
 80078e4:	08008aac 	.word	0x08008aac

080078e8 <_calloc_r>:
 80078e8:	b513      	push	{r0, r1, r4, lr}
 80078ea:	434a      	muls	r2, r1
 80078ec:	4611      	mov	r1, r2
 80078ee:	9201      	str	r2, [sp, #4]
 80078f0:	f000 f85a 	bl	80079a8 <_malloc_r>
 80078f4:	4604      	mov	r4, r0
 80078f6:	b118      	cbz	r0, 8007900 <_calloc_r+0x18>
 80078f8:	9a01      	ldr	r2, [sp, #4]
 80078fa:	2100      	movs	r1, #0
 80078fc:	f7fe f952 	bl	8005ba4 <memset>
 8007900:	4620      	mov	r0, r4
 8007902:	b002      	add	sp, #8
 8007904:	bd10      	pop	{r4, pc}
	...

08007908 <_free_r>:
 8007908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800790a:	2900      	cmp	r1, #0
 800790c:	d048      	beq.n	80079a0 <_free_r+0x98>
 800790e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007912:	9001      	str	r0, [sp, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	f1a1 0404 	sub.w	r4, r1, #4
 800791a:	bfb8      	it	lt
 800791c:	18e4      	addlt	r4, r4, r3
 800791e:	f000 fa65 	bl	8007dec <__malloc_lock>
 8007922:	4a20      	ldr	r2, [pc, #128]	; (80079a4 <_free_r+0x9c>)
 8007924:	9801      	ldr	r0, [sp, #4]
 8007926:	6813      	ldr	r3, [r2, #0]
 8007928:	4615      	mov	r5, r2
 800792a:	b933      	cbnz	r3, 800793a <_free_r+0x32>
 800792c:	6063      	str	r3, [r4, #4]
 800792e:	6014      	str	r4, [r2, #0]
 8007930:	b003      	add	sp, #12
 8007932:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007936:	f000 ba5f 	b.w	8007df8 <__malloc_unlock>
 800793a:	42a3      	cmp	r3, r4
 800793c:	d90b      	bls.n	8007956 <_free_r+0x4e>
 800793e:	6821      	ldr	r1, [r4, #0]
 8007940:	1862      	adds	r2, r4, r1
 8007942:	4293      	cmp	r3, r2
 8007944:	bf04      	itt	eq
 8007946:	681a      	ldreq	r2, [r3, #0]
 8007948:	685b      	ldreq	r3, [r3, #4]
 800794a:	6063      	str	r3, [r4, #4]
 800794c:	bf04      	itt	eq
 800794e:	1852      	addeq	r2, r2, r1
 8007950:	6022      	streq	r2, [r4, #0]
 8007952:	602c      	str	r4, [r5, #0]
 8007954:	e7ec      	b.n	8007930 <_free_r+0x28>
 8007956:	461a      	mov	r2, r3
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	b10b      	cbz	r3, 8007960 <_free_r+0x58>
 800795c:	42a3      	cmp	r3, r4
 800795e:	d9fa      	bls.n	8007956 <_free_r+0x4e>
 8007960:	6811      	ldr	r1, [r2, #0]
 8007962:	1855      	adds	r5, r2, r1
 8007964:	42a5      	cmp	r5, r4
 8007966:	d10b      	bne.n	8007980 <_free_r+0x78>
 8007968:	6824      	ldr	r4, [r4, #0]
 800796a:	4421      	add	r1, r4
 800796c:	1854      	adds	r4, r2, r1
 800796e:	42a3      	cmp	r3, r4
 8007970:	6011      	str	r1, [r2, #0]
 8007972:	d1dd      	bne.n	8007930 <_free_r+0x28>
 8007974:	681c      	ldr	r4, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	6053      	str	r3, [r2, #4]
 800797a:	4421      	add	r1, r4
 800797c:	6011      	str	r1, [r2, #0]
 800797e:	e7d7      	b.n	8007930 <_free_r+0x28>
 8007980:	d902      	bls.n	8007988 <_free_r+0x80>
 8007982:	230c      	movs	r3, #12
 8007984:	6003      	str	r3, [r0, #0]
 8007986:	e7d3      	b.n	8007930 <_free_r+0x28>
 8007988:	6825      	ldr	r5, [r4, #0]
 800798a:	1961      	adds	r1, r4, r5
 800798c:	428b      	cmp	r3, r1
 800798e:	bf04      	itt	eq
 8007990:	6819      	ldreq	r1, [r3, #0]
 8007992:	685b      	ldreq	r3, [r3, #4]
 8007994:	6063      	str	r3, [r4, #4]
 8007996:	bf04      	itt	eq
 8007998:	1949      	addeq	r1, r1, r5
 800799a:	6021      	streq	r1, [r4, #0]
 800799c:	6054      	str	r4, [r2, #4]
 800799e:	e7c7      	b.n	8007930 <_free_r+0x28>
 80079a0:	b003      	add	sp, #12
 80079a2:	bd30      	pop	{r4, r5, pc}
 80079a4:	20000214 	.word	0x20000214

080079a8 <_malloc_r>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	1ccd      	adds	r5, r1, #3
 80079ac:	f025 0503 	bic.w	r5, r5, #3
 80079b0:	3508      	adds	r5, #8
 80079b2:	2d0c      	cmp	r5, #12
 80079b4:	bf38      	it	cc
 80079b6:	250c      	movcc	r5, #12
 80079b8:	2d00      	cmp	r5, #0
 80079ba:	4606      	mov	r6, r0
 80079bc:	db01      	blt.n	80079c2 <_malloc_r+0x1a>
 80079be:	42a9      	cmp	r1, r5
 80079c0:	d903      	bls.n	80079ca <_malloc_r+0x22>
 80079c2:	230c      	movs	r3, #12
 80079c4:	6033      	str	r3, [r6, #0]
 80079c6:	2000      	movs	r0, #0
 80079c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079ca:	f000 fa0f 	bl	8007dec <__malloc_lock>
 80079ce:	4921      	ldr	r1, [pc, #132]	; (8007a54 <_malloc_r+0xac>)
 80079d0:	680a      	ldr	r2, [r1, #0]
 80079d2:	4614      	mov	r4, r2
 80079d4:	b99c      	cbnz	r4, 80079fe <_malloc_r+0x56>
 80079d6:	4f20      	ldr	r7, [pc, #128]	; (8007a58 <_malloc_r+0xb0>)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	b923      	cbnz	r3, 80079e6 <_malloc_r+0x3e>
 80079dc:	4621      	mov	r1, r4
 80079de:	4630      	mov	r0, r6
 80079e0:	f000 f998 	bl	8007d14 <_sbrk_r>
 80079e4:	6038      	str	r0, [r7, #0]
 80079e6:	4629      	mov	r1, r5
 80079e8:	4630      	mov	r0, r6
 80079ea:	f000 f993 	bl	8007d14 <_sbrk_r>
 80079ee:	1c43      	adds	r3, r0, #1
 80079f0:	d123      	bne.n	8007a3a <_malloc_r+0x92>
 80079f2:	230c      	movs	r3, #12
 80079f4:	6033      	str	r3, [r6, #0]
 80079f6:	4630      	mov	r0, r6
 80079f8:	f000 f9fe 	bl	8007df8 <__malloc_unlock>
 80079fc:	e7e3      	b.n	80079c6 <_malloc_r+0x1e>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	1b5b      	subs	r3, r3, r5
 8007a02:	d417      	bmi.n	8007a34 <_malloc_r+0x8c>
 8007a04:	2b0b      	cmp	r3, #11
 8007a06:	d903      	bls.n	8007a10 <_malloc_r+0x68>
 8007a08:	6023      	str	r3, [r4, #0]
 8007a0a:	441c      	add	r4, r3
 8007a0c:	6025      	str	r5, [r4, #0]
 8007a0e:	e004      	b.n	8007a1a <_malloc_r+0x72>
 8007a10:	6863      	ldr	r3, [r4, #4]
 8007a12:	42a2      	cmp	r2, r4
 8007a14:	bf0c      	ite	eq
 8007a16:	600b      	streq	r3, [r1, #0]
 8007a18:	6053      	strne	r3, [r2, #4]
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	f000 f9ec 	bl	8007df8 <__malloc_unlock>
 8007a20:	f104 000b 	add.w	r0, r4, #11
 8007a24:	1d23      	adds	r3, r4, #4
 8007a26:	f020 0007 	bic.w	r0, r0, #7
 8007a2a:	1ac2      	subs	r2, r0, r3
 8007a2c:	d0cc      	beq.n	80079c8 <_malloc_r+0x20>
 8007a2e:	1a1b      	subs	r3, r3, r0
 8007a30:	50a3      	str	r3, [r4, r2]
 8007a32:	e7c9      	b.n	80079c8 <_malloc_r+0x20>
 8007a34:	4622      	mov	r2, r4
 8007a36:	6864      	ldr	r4, [r4, #4]
 8007a38:	e7cc      	b.n	80079d4 <_malloc_r+0x2c>
 8007a3a:	1cc4      	adds	r4, r0, #3
 8007a3c:	f024 0403 	bic.w	r4, r4, #3
 8007a40:	42a0      	cmp	r0, r4
 8007a42:	d0e3      	beq.n	8007a0c <_malloc_r+0x64>
 8007a44:	1a21      	subs	r1, r4, r0
 8007a46:	4630      	mov	r0, r6
 8007a48:	f000 f964 	bl	8007d14 <_sbrk_r>
 8007a4c:	3001      	adds	r0, #1
 8007a4e:	d1dd      	bne.n	8007a0c <_malloc_r+0x64>
 8007a50:	e7cf      	b.n	80079f2 <_malloc_r+0x4a>
 8007a52:	bf00      	nop
 8007a54:	20000214 	.word	0x20000214
 8007a58:	20000218 	.word	0x20000218

08007a5c <__ssputs_r>:
 8007a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a60:	688e      	ldr	r6, [r1, #8]
 8007a62:	429e      	cmp	r6, r3
 8007a64:	4682      	mov	sl, r0
 8007a66:	460c      	mov	r4, r1
 8007a68:	4690      	mov	r8, r2
 8007a6a:	461f      	mov	r7, r3
 8007a6c:	d838      	bhi.n	8007ae0 <__ssputs_r+0x84>
 8007a6e:	898a      	ldrh	r2, [r1, #12]
 8007a70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a74:	d032      	beq.n	8007adc <__ssputs_r+0x80>
 8007a76:	6825      	ldr	r5, [r4, #0]
 8007a78:	6909      	ldr	r1, [r1, #16]
 8007a7a:	eba5 0901 	sub.w	r9, r5, r1
 8007a7e:	6965      	ldr	r5, [r4, #20]
 8007a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a88:	3301      	adds	r3, #1
 8007a8a:	444b      	add	r3, r9
 8007a8c:	106d      	asrs	r5, r5, #1
 8007a8e:	429d      	cmp	r5, r3
 8007a90:	bf38      	it	cc
 8007a92:	461d      	movcc	r5, r3
 8007a94:	0553      	lsls	r3, r2, #21
 8007a96:	d531      	bpl.n	8007afc <__ssputs_r+0xa0>
 8007a98:	4629      	mov	r1, r5
 8007a9a:	f7ff ff85 	bl	80079a8 <_malloc_r>
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	b950      	cbnz	r0, 8007ab8 <__ssputs_r+0x5c>
 8007aa2:	230c      	movs	r3, #12
 8007aa4:	f8ca 3000 	str.w	r3, [sl]
 8007aa8:	89a3      	ldrh	r3, [r4, #12]
 8007aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aae:	81a3      	strh	r3, [r4, #12]
 8007ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab8:	6921      	ldr	r1, [r4, #16]
 8007aba:	464a      	mov	r2, r9
 8007abc:	f7ff fb88 	bl	80071d0 <memcpy>
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aca:	81a3      	strh	r3, [r4, #12]
 8007acc:	6126      	str	r6, [r4, #16]
 8007ace:	6165      	str	r5, [r4, #20]
 8007ad0:	444e      	add	r6, r9
 8007ad2:	eba5 0509 	sub.w	r5, r5, r9
 8007ad6:	6026      	str	r6, [r4, #0]
 8007ad8:	60a5      	str	r5, [r4, #8]
 8007ada:	463e      	mov	r6, r7
 8007adc:	42be      	cmp	r6, r7
 8007ade:	d900      	bls.n	8007ae2 <__ssputs_r+0x86>
 8007ae0:	463e      	mov	r6, r7
 8007ae2:	4632      	mov	r2, r6
 8007ae4:	6820      	ldr	r0, [r4, #0]
 8007ae6:	4641      	mov	r1, r8
 8007ae8:	f000 f966 	bl	8007db8 <memmove>
 8007aec:	68a3      	ldr	r3, [r4, #8]
 8007aee:	6822      	ldr	r2, [r4, #0]
 8007af0:	1b9b      	subs	r3, r3, r6
 8007af2:	4432      	add	r2, r6
 8007af4:	60a3      	str	r3, [r4, #8]
 8007af6:	6022      	str	r2, [r4, #0]
 8007af8:	2000      	movs	r0, #0
 8007afa:	e7db      	b.n	8007ab4 <__ssputs_r+0x58>
 8007afc:	462a      	mov	r2, r5
 8007afe:	f000 f981 	bl	8007e04 <_realloc_r>
 8007b02:	4606      	mov	r6, r0
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d1e1      	bne.n	8007acc <__ssputs_r+0x70>
 8007b08:	6921      	ldr	r1, [r4, #16]
 8007b0a:	4650      	mov	r0, sl
 8007b0c:	f7ff fefc 	bl	8007908 <_free_r>
 8007b10:	e7c7      	b.n	8007aa2 <__ssputs_r+0x46>
	...

08007b14 <_svfiprintf_r>:
 8007b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b18:	4698      	mov	r8, r3
 8007b1a:	898b      	ldrh	r3, [r1, #12]
 8007b1c:	061b      	lsls	r3, r3, #24
 8007b1e:	b09d      	sub	sp, #116	; 0x74
 8007b20:	4607      	mov	r7, r0
 8007b22:	460d      	mov	r5, r1
 8007b24:	4614      	mov	r4, r2
 8007b26:	d50e      	bpl.n	8007b46 <_svfiprintf_r+0x32>
 8007b28:	690b      	ldr	r3, [r1, #16]
 8007b2a:	b963      	cbnz	r3, 8007b46 <_svfiprintf_r+0x32>
 8007b2c:	2140      	movs	r1, #64	; 0x40
 8007b2e:	f7ff ff3b 	bl	80079a8 <_malloc_r>
 8007b32:	6028      	str	r0, [r5, #0]
 8007b34:	6128      	str	r0, [r5, #16]
 8007b36:	b920      	cbnz	r0, 8007b42 <_svfiprintf_r+0x2e>
 8007b38:	230c      	movs	r3, #12
 8007b3a:	603b      	str	r3, [r7, #0]
 8007b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b40:	e0d1      	b.n	8007ce6 <_svfiprintf_r+0x1d2>
 8007b42:	2340      	movs	r3, #64	; 0x40
 8007b44:	616b      	str	r3, [r5, #20]
 8007b46:	2300      	movs	r3, #0
 8007b48:	9309      	str	r3, [sp, #36]	; 0x24
 8007b4a:	2320      	movs	r3, #32
 8007b4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b50:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b54:	2330      	movs	r3, #48	; 0x30
 8007b56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007d00 <_svfiprintf_r+0x1ec>
 8007b5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b5e:	f04f 0901 	mov.w	r9, #1
 8007b62:	4623      	mov	r3, r4
 8007b64:	469a      	mov	sl, r3
 8007b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b6a:	b10a      	cbz	r2, 8007b70 <_svfiprintf_r+0x5c>
 8007b6c:	2a25      	cmp	r2, #37	; 0x25
 8007b6e:	d1f9      	bne.n	8007b64 <_svfiprintf_r+0x50>
 8007b70:	ebba 0b04 	subs.w	fp, sl, r4
 8007b74:	d00b      	beq.n	8007b8e <_svfiprintf_r+0x7a>
 8007b76:	465b      	mov	r3, fp
 8007b78:	4622      	mov	r2, r4
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	4638      	mov	r0, r7
 8007b7e:	f7ff ff6d 	bl	8007a5c <__ssputs_r>
 8007b82:	3001      	adds	r0, #1
 8007b84:	f000 80aa 	beq.w	8007cdc <_svfiprintf_r+0x1c8>
 8007b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b8a:	445a      	add	r2, fp
 8007b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f000 80a2 	beq.w	8007cdc <_svfiprintf_r+0x1c8>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ba2:	f10a 0a01 	add.w	sl, sl, #1
 8007ba6:	9304      	str	r3, [sp, #16]
 8007ba8:	9307      	str	r3, [sp, #28]
 8007baa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bae:	931a      	str	r3, [sp, #104]	; 0x68
 8007bb0:	4654      	mov	r4, sl
 8007bb2:	2205      	movs	r2, #5
 8007bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb8:	4851      	ldr	r0, [pc, #324]	; (8007d00 <_svfiprintf_r+0x1ec>)
 8007bba:	f7f8 fb11 	bl	80001e0 <memchr>
 8007bbe:	9a04      	ldr	r2, [sp, #16]
 8007bc0:	b9d8      	cbnz	r0, 8007bfa <_svfiprintf_r+0xe6>
 8007bc2:	06d0      	lsls	r0, r2, #27
 8007bc4:	bf44      	itt	mi
 8007bc6:	2320      	movmi	r3, #32
 8007bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bcc:	0711      	lsls	r1, r2, #28
 8007bce:	bf44      	itt	mi
 8007bd0:	232b      	movmi	r3, #43	; 0x2b
 8007bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8007bda:	2b2a      	cmp	r3, #42	; 0x2a
 8007bdc:	d015      	beq.n	8007c0a <_svfiprintf_r+0xf6>
 8007bde:	9a07      	ldr	r2, [sp, #28]
 8007be0:	4654      	mov	r4, sl
 8007be2:	2000      	movs	r0, #0
 8007be4:	f04f 0c0a 	mov.w	ip, #10
 8007be8:	4621      	mov	r1, r4
 8007bea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bee:	3b30      	subs	r3, #48	; 0x30
 8007bf0:	2b09      	cmp	r3, #9
 8007bf2:	d94e      	bls.n	8007c92 <_svfiprintf_r+0x17e>
 8007bf4:	b1b0      	cbz	r0, 8007c24 <_svfiprintf_r+0x110>
 8007bf6:	9207      	str	r2, [sp, #28]
 8007bf8:	e014      	b.n	8007c24 <_svfiprintf_r+0x110>
 8007bfa:	eba0 0308 	sub.w	r3, r0, r8
 8007bfe:	fa09 f303 	lsl.w	r3, r9, r3
 8007c02:	4313      	orrs	r3, r2
 8007c04:	9304      	str	r3, [sp, #16]
 8007c06:	46a2      	mov	sl, r4
 8007c08:	e7d2      	b.n	8007bb0 <_svfiprintf_r+0x9c>
 8007c0a:	9b03      	ldr	r3, [sp, #12]
 8007c0c:	1d19      	adds	r1, r3, #4
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	9103      	str	r1, [sp, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	bfbb      	ittet	lt
 8007c16:	425b      	neglt	r3, r3
 8007c18:	f042 0202 	orrlt.w	r2, r2, #2
 8007c1c:	9307      	strge	r3, [sp, #28]
 8007c1e:	9307      	strlt	r3, [sp, #28]
 8007c20:	bfb8      	it	lt
 8007c22:	9204      	strlt	r2, [sp, #16]
 8007c24:	7823      	ldrb	r3, [r4, #0]
 8007c26:	2b2e      	cmp	r3, #46	; 0x2e
 8007c28:	d10c      	bne.n	8007c44 <_svfiprintf_r+0x130>
 8007c2a:	7863      	ldrb	r3, [r4, #1]
 8007c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c2e:	d135      	bne.n	8007c9c <_svfiprintf_r+0x188>
 8007c30:	9b03      	ldr	r3, [sp, #12]
 8007c32:	1d1a      	adds	r2, r3, #4
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	9203      	str	r2, [sp, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	bfb8      	it	lt
 8007c3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c40:	3402      	adds	r4, #2
 8007c42:	9305      	str	r3, [sp, #20]
 8007c44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d10 <_svfiprintf_r+0x1fc>
 8007c48:	7821      	ldrb	r1, [r4, #0]
 8007c4a:	2203      	movs	r2, #3
 8007c4c:	4650      	mov	r0, sl
 8007c4e:	f7f8 fac7 	bl	80001e0 <memchr>
 8007c52:	b140      	cbz	r0, 8007c66 <_svfiprintf_r+0x152>
 8007c54:	2340      	movs	r3, #64	; 0x40
 8007c56:	eba0 000a 	sub.w	r0, r0, sl
 8007c5a:	fa03 f000 	lsl.w	r0, r3, r0
 8007c5e:	9b04      	ldr	r3, [sp, #16]
 8007c60:	4303      	orrs	r3, r0
 8007c62:	3401      	adds	r4, #1
 8007c64:	9304      	str	r3, [sp, #16]
 8007c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c6a:	4826      	ldr	r0, [pc, #152]	; (8007d04 <_svfiprintf_r+0x1f0>)
 8007c6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c70:	2206      	movs	r2, #6
 8007c72:	f7f8 fab5 	bl	80001e0 <memchr>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d038      	beq.n	8007cec <_svfiprintf_r+0x1d8>
 8007c7a:	4b23      	ldr	r3, [pc, #140]	; (8007d08 <_svfiprintf_r+0x1f4>)
 8007c7c:	bb1b      	cbnz	r3, 8007cc6 <_svfiprintf_r+0x1b2>
 8007c7e:	9b03      	ldr	r3, [sp, #12]
 8007c80:	3307      	adds	r3, #7
 8007c82:	f023 0307 	bic.w	r3, r3, #7
 8007c86:	3308      	adds	r3, #8
 8007c88:	9303      	str	r3, [sp, #12]
 8007c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c8c:	4433      	add	r3, r6
 8007c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c90:	e767      	b.n	8007b62 <_svfiprintf_r+0x4e>
 8007c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c96:	460c      	mov	r4, r1
 8007c98:	2001      	movs	r0, #1
 8007c9a:	e7a5      	b.n	8007be8 <_svfiprintf_r+0xd4>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	3401      	adds	r4, #1
 8007ca0:	9305      	str	r3, [sp, #20]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	f04f 0c0a 	mov.w	ip, #10
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cae:	3a30      	subs	r2, #48	; 0x30
 8007cb0:	2a09      	cmp	r2, #9
 8007cb2:	d903      	bls.n	8007cbc <_svfiprintf_r+0x1a8>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0c5      	beq.n	8007c44 <_svfiprintf_r+0x130>
 8007cb8:	9105      	str	r1, [sp, #20]
 8007cba:	e7c3      	b.n	8007c44 <_svfiprintf_r+0x130>
 8007cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e7f0      	b.n	8007ca8 <_svfiprintf_r+0x194>
 8007cc6:	ab03      	add	r3, sp, #12
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	462a      	mov	r2, r5
 8007ccc:	4b0f      	ldr	r3, [pc, #60]	; (8007d0c <_svfiprintf_r+0x1f8>)
 8007cce:	a904      	add	r1, sp, #16
 8007cd0:	4638      	mov	r0, r7
 8007cd2:	f7fe f80f 	bl	8005cf4 <_printf_float>
 8007cd6:	1c42      	adds	r2, r0, #1
 8007cd8:	4606      	mov	r6, r0
 8007cda:	d1d6      	bne.n	8007c8a <_svfiprintf_r+0x176>
 8007cdc:	89ab      	ldrh	r3, [r5, #12]
 8007cde:	065b      	lsls	r3, r3, #25
 8007ce0:	f53f af2c 	bmi.w	8007b3c <_svfiprintf_r+0x28>
 8007ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ce6:	b01d      	add	sp, #116	; 0x74
 8007ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cec:	ab03      	add	r3, sp, #12
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	462a      	mov	r2, r5
 8007cf2:	4b06      	ldr	r3, [pc, #24]	; (8007d0c <_svfiprintf_r+0x1f8>)
 8007cf4:	a904      	add	r1, sp, #16
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	f7fe faa0 	bl	800623c <_printf_i>
 8007cfc:	e7eb      	b.n	8007cd6 <_svfiprintf_r+0x1c2>
 8007cfe:	bf00      	nop
 8007d00:	08008c0c 	.word	0x08008c0c
 8007d04:	08008c16 	.word	0x08008c16
 8007d08:	08005cf5 	.word	0x08005cf5
 8007d0c:	08007a5d 	.word	0x08007a5d
 8007d10:	08008c12 	.word	0x08008c12

08007d14 <_sbrk_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	4d06      	ldr	r5, [pc, #24]	; (8007d30 <_sbrk_r+0x1c>)
 8007d18:	2300      	movs	r3, #0
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	4608      	mov	r0, r1
 8007d1e:	602b      	str	r3, [r5, #0]
 8007d20:	f7f9 fd64 	bl	80017ec <_sbrk>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d102      	bne.n	8007d2e <_sbrk_r+0x1a>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	b103      	cbz	r3, 8007d2e <_sbrk_r+0x1a>
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	20000540 	.word	0x20000540

08007d34 <__assert_func>:
 8007d34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d36:	4614      	mov	r4, r2
 8007d38:	461a      	mov	r2, r3
 8007d3a:	4b09      	ldr	r3, [pc, #36]	; (8007d60 <__assert_func+0x2c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4605      	mov	r5, r0
 8007d40:	68d8      	ldr	r0, [r3, #12]
 8007d42:	b14c      	cbz	r4, 8007d58 <__assert_func+0x24>
 8007d44:	4b07      	ldr	r3, [pc, #28]	; (8007d64 <__assert_func+0x30>)
 8007d46:	9100      	str	r1, [sp, #0]
 8007d48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d4c:	4906      	ldr	r1, [pc, #24]	; (8007d68 <__assert_func+0x34>)
 8007d4e:	462b      	mov	r3, r5
 8007d50:	f000 f80e 	bl	8007d70 <fiprintf>
 8007d54:	f000 faa4 	bl	80082a0 <abort>
 8007d58:	4b04      	ldr	r3, [pc, #16]	; (8007d6c <__assert_func+0x38>)
 8007d5a:	461c      	mov	r4, r3
 8007d5c:	e7f3      	b.n	8007d46 <__assert_func+0x12>
 8007d5e:	bf00      	nop
 8007d60:	2000000c 	.word	0x2000000c
 8007d64:	08008c1d 	.word	0x08008c1d
 8007d68:	08008c2a 	.word	0x08008c2a
 8007d6c:	08008c58 	.word	0x08008c58

08007d70 <fiprintf>:
 8007d70:	b40e      	push	{r1, r2, r3}
 8007d72:	b503      	push	{r0, r1, lr}
 8007d74:	4601      	mov	r1, r0
 8007d76:	ab03      	add	r3, sp, #12
 8007d78:	4805      	ldr	r0, [pc, #20]	; (8007d90 <fiprintf+0x20>)
 8007d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d7e:	6800      	ldr	r0, [r0, #0]
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	f000 f88f 	bl	8007ea4 <_vfiprintf_r>
 8007d86:	b002      	add	sp, #8
 8007d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d8c:	b003      	add	sp, #12
 8007d8e:	4770      	bx	lr
 8007d90:	2000000c 	.word	0x2000000c

08007d94 <__ascii_mbtowc>:
 8007d94:	b082      	sub	sp, #8
 8007d96:	b901      	cbnz	r1, 8007d9a <__ascii_mbtowc+0x6>
 8007d98:	a901      	add	r1, sp, #4
 8007d9a:	b142      	cbz	r2, 8007dae <__ascii_mbtowc+0x1a>
 8007d9c:	b14b      	cbz	r3, 8007db2 <__ascii_mbtowc+0x1e>
 8007d9e:	7813      	ldrb	r3, [r2, #0]
 8007da0:	600b      	str	r3, [r1, #0]
 8007da2:	7812      	ldrb	r2, [r2, #0]
 8007da4:	1e10      	subs	r0, r2, #0
 8007da6:	bf18      	it	ne
 8007da8:	2001      	movne	r0, #1
 8007daa:	b002      	add	sp, #8
 8007dac:	4770      	bx	lr
 8007dae:	4610      	mov	r0, r2
 8007db0:	e7fb      	b.n	8007daa <__ascii_mbtowc+0x16>
 8007db2:	f06f 0001 	mvn.w	r0, #1
 8007db6:	e7f8      	b.n	8007daa <__ascii_mbtowc+0x16>

08007db8 <memmove>:
 8007db8:	4288      	cmp	r0, r1
 8007dba:	b510      	push	{r4, lr}
 8007dbc:	eb01 0402 	add.w	r4, r1, r2
 8007dc0:	d902      	bls.n	8007dc8 <memmove+0x10>
 8007dc2:	4284      	cmp	r4, r0
 8007dc4:	4623      	mov	r3, r4
 8007dc6:	d807      	bhi.n	8007dd8 <memmove+0x20>
 8007dc8:	1e43      	subs	r3, r0, #1
 8007dca:	42a1      	cmp	r1, r4
 8007dcc:	d008      	beq.n	8007de0 <memmove+0x28>
 8007dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dd6:	e7f8      	b.n	8007dca <memmove+0x12>
 8007dd8:	4402      	add	r2, r0
 8007dda:	4601      	mov	r1, r0
 8007ddc:	428a      	cmp	r2, r1
 8007dde:	d100      	bne.n	8007de2 <memmove+0x2a>
 8007de0:	bd10      	pop	{r4, pc}
 8007de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dea:	e7f7      	b.n	8007ddc <memmove+0x24>

08007dec <__malloc_lock>:
 8007dec:	4801      	ldr	r0, [pc, #4]	; (8007df4 <__malloc_lock+0x8>)
 8007dee:	f000 bc17 	b.w	8008620 <__retarget_lock_acquire_recursive>
 8007df2:	bf00      	nop
 8007df4:	20000548 	.word	0x20000548

08007df8 <__malloc_unlock>:
 8007df8:	4801      	ldr	r0, [pc, #4]	; (8007e00 <__malloc_unlock+0x8>)
 8007dfa:	f000 bc12 	b.w	8008622 <__retarget_lock_release_recursive>
 8007dfe:	bf00      	nop
 8007e00:	20000548 	.word	0x20000548

08007e04 <_realloc_r>:
 8007e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e06:	4607      	mov	r7, r0
 8007e08:	4614      	mov	r4, r2
 8007e0a:	460e      	mov	r6, r1
 8007e0c:	b921      	cbnz	r1, 8007e18 <_realloc_r+0x14>
 8007e0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e12:	4611      	mov	r1, r2
 8007e14:	f7ff bdc8 	b.w	80079a8 <_malloc_r>
 8007e18:	b922      	cbnz	r2, 8007e24 <_realloc_r+0x20>
 8007e1a:	f7ff fd75 	bl	8007908 <_free_r>
 8007e1e:	4625      	mov	r5, r4
 8007e20:	4628      	mov	r0, r5
 8007e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e24:	f000 fc62 	bl	80086ec <_malloc_usable_size_r>
 8007e28:	42a0      	cmp	r0, r4
 8007e2a:	d20f      	bcs.n	8007e4c <_realloc_r+0x48>
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	4638      	mov	r0, r7
 8007e30:	f7ff fdba 	bl	80079a8 <_malloc_r>
 8007e34:	4605      	mov	r5, r0
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d0f2      	beq.n	8007e20 <_realloc_r+0x1c>
 8007e3a:	4631      	mov	r1, r6
 8007e3c:	4622      	mov	r2, r4
 8007e3e:	f7ff f9c7 	bl	80071d0 <memcpy>
 8007e42:	4631      	mov	r1, r6
 8007e44:	4638      	mov	r0, r7
 8007e46:	f7ff fd5f 	bl	8007908 <_free_r>
 8007e4a:	e7e9      	b.n	8007e20 <_realloc_r+0x1c>
 8007e4c:	4635      	mov	r5, r6
 8007e4e:	e7e7      	b.n	8007e20 <_realloc_r+0x1c>

08007e50 <__sfputc_r>:
 8007e50:	6893      	ldr	r3, [r2, #8]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	b410      	push	{r4}
 8007e58:	6093      	str	r3, [r2, #8]
 8007e5a:	da08      	bge.n	8007e6e <__sfputc_r+0x1e>
 8007e5c:	6994      	ldr	r4, [r2, #24]
 8007e5e:	42a3      	cmp	r3, r4
 8007e60:	db01      	blt.n	8007e66 <__sfputc_r+0x16>
 8007e62:	290a      	cmp	r1, #10
 8007e64:	d103      	bne.n	8007e6e <__sfputc_r+0x1e>
 8007e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e6a:	f000 b94b 	b.w	8008104 <__swbuf_r>
 8007e6e:	6813      	ldr	r3, [r2, #0]
 8007e70:	1c58      	adds	r0, r3, #1
 8007e72:	6010      	str	r0, [r2, #0]
 8007e74:	7019      	strb	r1, [r3, #0]
 8007e76:	4608      	mov	r0, r1
 8007e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <__sfputs_r>:
 8007e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e80:	4606      	mov	r6, r0
 8007e82:	460f      	mov	r7, r1
 8007e84:	4614      	mov	r4, r2
 8007e86:	18d5      	adds	r5, r2, r3
 8007e88:	42ac      	cmp	r4, r5
 8007e8a:	d101      	bne.n	8007e90 <__sfputs_r+0x12>
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	e007      	b.n	8007ea0 <__sfputs_r+0x22>
 8007e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e94:	463a      	mov	r2, r7
 8007e96:	4630      	mov	r0, r6
 8007e98:	f7ff ffda 	bl	8007e50 <__sfputc_r>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d1f3      	bne.n	8007e88 <__sfputs_r+0xa>
 8007ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ea4 <_vfiprintf_r>:
 8007ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea8:	460d      	mov	r5, r1
 8007eaa:	b09d      	sub	sp, #116	; 0x74
 8007eac:	4614      	mov	r4, r2
 8007eae:	4698      	mov	r8, r3
 8007eb0:	4606      	mov	r6, r0
 8007eb2:	b118      	cbz	r0, 8007ebc <_vfiprintf_r+0x18>
 8007eb4:	6983      	ldr	r3, [r0, #24]
 8007eb6:	b90b      	cbnz	r3, 8007ebc <_vfiprintf_r+0x18>
 8007eb8:	f000 fb14 	bl	80084e4 <__sinit>
 8007ebc:	4b89      	ldr	r3, [pc, #548]	; (80080e4 <_vfiprintf_r+0x240>)
 8007ebe:	429d      	cmp	r5, r3
 8007ec0:	d11b      	bne.n	8007efa <_vfiprintf_r+0x56>
 8007ec2:	6875      	ldr	r5, [r6, #4]
 8007ec4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ec6:	07d9      	lsls	r1, r3, #31
 8007ec8:	d405      	bmi.n	8007ed6 <_vfiprintf_r+0x32>
 8007eca:	89ab      	ldrh	r3, [r5, #12]
 8007ecc:	059a      	lsls	r2, r3, #22
 8007ece:	d402      	bmi.n	8007ed6 <_vfiprintf_r+0x32>
 8007ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ed2:	f000 fba5 	bl	8008620 <__retarget_lock_acquire_recursive>
 8007ed6:	89ab      	ldrh	r3, [r5, #12]
 8007ed8:	071b      	lsls	r3, r3, #28
 8007eda:	d501      	bpl.n	8007ee0 <_vfiprintf_r+0x3c>
 8007edc:	692b      	ldr	r3, [r5, #16]
 8007ede:	b9eb      	cbnz	r3, 8007f1c <_vfiprintf_r+0x78>
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f000 f96e 	bl	80081c4 <__swsetup_r>
 8007ee8:	b1c0      	cbz	r0, 8007f1c <_vfiprintf_r+0x78>
 8007eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007eec:	07dc      	lsls	r4, r3, #31
 8007eee:	d50e      	bpl.n	8007f0e <_vfiprintf_r+0x6a>
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef4:	b01d      	add	sp, #116	; 0x74
 8007ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efa:	4b7b      	ldr	r3, [pc, #492]	; (80080e8 <_vfiprintf_r+0x244>)
 8007efc:	429d      	cmp	r5, r3
 8007efe:	d101      	bne.n	8007f04 <_vfiprintf_r+0x60>
 8007f00:	68b5      	ldr	r5, [r6, #8]
 8007f02:	e7df      	b.n	8007ec4 <_vfiprintf_r+0x20>
 8007f04:	4b79      	ldr	r3, [pc, #484]	; (80080ec <_vfiprintf_r+0x248>)
 8007f06:	429d      	cmp	r5, r3
 8007f08:	bf08      	it	eq
 8007f0a:	68f5      	ldreq	r5, [r6, #12]
 8007f0c:	e7da      	b.n	8007ec4 <_vfiprintf_r+0x20>
 8007f0e:	89ab      	ldrh	r3, [r5, #12]
 8007f10:	0598      	lsls	r0, r3, #22
 8007f12:	d4ed      	bmi.n	8007ef0 <_vfiprintf_r+0x4c>
 8007f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f16:	f000 fb84 	bl	8008622 <__retarget_lock_release_recursive>
 8007f1a:	e7e9      	b.n	8007ef0 <_vfiprintf_r+0x4c>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f20:	2320      	movs	r3, #32
 8007f22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f2a:	2330      	movs	r3, #48	; 0x30
 8007f2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80080f0 <_vfiprintf_r+0x24c>
 8007f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f34:	f04f 0901 	mov.w	r9, #1
 8007f38:	4623      	mov	r3, r4
 8007f3a:	469a      	mov	sl, r3
 8007f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f40:	b10a      	cbz	r2, 8007f46 <_vfiprintf_r+0xa2>
 8007f42:	2a25      	cmp	r2, #37	; 0x25
 8007f44:	d1f9      	bne.n	8007f3a <_vfiprintf_r+0x96>
 8007f46:	ebba 0b04 	subs.w	fp, sl, r4
 8007f4a:	d00b      	beq.n	8007f64 <_vfiprintf_r+0xc0>
 8007f4c:	465b      	mov	r3, fp
 8007f4e:	4622      	mov	r2, r4
 8007f50:	4629      	mov	r1, r5
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7ff ff93 	bl	8007e7e <__sfputs_r>
 8007f58:	3001      	adds	r0, #1
 8007f5a:	f000 80aa 	beq.w	80080b2 <_vfiprintf_r+0x20e>
 8007f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f60:	445a      	add	r2, fp
 8007f62:	9209      	str	r2, [sp, #36]	; 0x24
 8007f64:	f89a 3000 	ldrb.w	r3, [sl]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f000 80a2 	beq.w	80080b2 <_vfiprintf_r+0x20e>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f04f 32ff 	mov.w	r2, #4294967295
 8007f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f78:	f10a 0a01 	add.w	sl, sl, #1
 8007f7c:	9304      	str	r3, [sp, #16]
 8007f7e:	9307      	str	r3, [sp, #28]
 8007f80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f84:	931a      	str	r3, [sp, #104]	; 0x68
 8007f86:	4654      	mov	r4, sl
 8007f88:	2205      	movs	r2, #5
 8007f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f8e:	4858      	ldr	r0, [pc, #352]	; (80080f0 <_vfiprintf_r+0x24c>)
 8007f90:	f7f8 f926 	bl	80001e0 <memchr>
 8007f94:	9a04      	ldr	r2, [sp, #16]
 8007f96:	b9d8      	cbnz	r0, 8007fd0 <_vfiprintf_r+0x12c>
 8007f98:	06d1      	lsls	r1, r2, #27
 8007f9a:	bf44      	itt	mi
 8007f9c:	2320      	movmi	r3, #32
 8007f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fa2:	0713      	lsls	r3, r2, #28
 8007fa4:	bf44      	itt	mi
 8007fa6:	232b      	movmi	r3, #43	; 0x2b
 8007fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fac:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8007fb2:	d015      	beq.n	8007fe0 <_vfiprintf_r+0x13c>
 8007fb4:	9a07      	ldr	r2, [sp, #28]
 8007fb6:	4654      	mov	r4, sl
 8007fb8:	2000      	movs	r0, #0
 8007fba:	f04f 0c0a 	mov.w	ip, #10
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fc4:	3b30      	subs	r3, #48	; 0x30
 8007fc6:	2b09      	cmp	r3, #9
 8007fc8:	d94e      	bls.n	8008068 <_vfiprintf_r+0x1c4>
 8007fca:	b1b0      	cbz	r0, 8007ffa <_vfiprintf_r+0x156>
 8007fcc:	9207      	str	r2, [sp, #28]
 8007fce:	e014      	b.n	8007ffa <_vfiprintf_r+0x156>
 8007fd0:	eba0 0308 	sub.w	r3, r0, r8
 8007fd4:	fa09 f303 	lsl.w	r3, r9, r3
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	46a2      	mov	sl, r4
 8007fde:	e7d2      	b.n	8007f86 <_vfiprintf_r+0xe2>
 8007fe0:	9b03      	ldr	r3, [sp, #12]
 8007fe2:	1d19      	adds	r1, r3, #4
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	9103      	str	r1, [sp, #12]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	bfbb      	ittet	lt
 8007fec:	425b      	neglt	r3, r3
 8007fee:	f042 0202 	orrlt.w	r2, r2, #2
 8007ff2:	9307      	strge	r3, [sp, #28]
 8007ff4:	9307      	strlt	r3, [sp, #28]
 8007ff6:	bfb8      	it	lt
 8007ff8:	9204      	strlt	r2, [sp, #16]
 8007ffa:	7823      	ldrb	r3, [r4, #0]
 8007ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8007ffe:	d10c      	bne.n	800801a <_vfiprintf_r+0x176>
 8008000:	7863      	ldrb	r3, [r4, #1]
 8008002:	2b2a      	cmp	r3, #42	; 0x2a
 8008004:	d135      	bne.n	8008072 <_vfiprintf_r+0x1ce>
 8008006:	9b03      	ldr	r3, [sp, #12]
 8008008:	1d1a      	adds	r2, r3, #4
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	9203      	str	r2, [sp, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	bfb8      	it	lt
 8008012:	f04f 33ff 	movlt.w	r3, #4294967295
 8008016:	3402      	adds	r4, #2
 8008018:	9305      	str	r3, [sp, #20]
 800801a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008100 <_vfiprintf_r+0x25c>
 800801e:	7821      	ldrb	r1, [r4, #0]
 8008020:	2203      	movs	r2, #3
 8008022:	4650      	mov	r0, sl
 8008024:	f7f8 f8dc 	bl	80001e0 <memchr>
 8008028:	b140      	cbz	r0, 800803c <_vfiprintf_r+0x198>
 800802a:	2340      	movs	r3, #64	; 0x40
 800802c:	eba0 000a 	sub.w	r0, r0, sl
 8008030:	fa03 f000 	lsl.w	r0, r3, r0
 8008034:	9b04      	ldr	r3, [sp, #16]
 8008036:	4303      	orrs	r3, r0
 8008038:	3401      	adds	r4, #1
 800803a:	9304      	str	r3, [sp, #16]
 800803c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008040:	482c      	ldr	r0, [pc, #176]	; (80080f4 <_vfiprintf_r+0x250>)
 8008042:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008046:	2206      	movs	r2, #6
 8008048:	f7f8 f8ca 	bl	80001e0 <memchr>
 800804c:	2800      	cmp	r0, #0
 800804e:	d03f      	beq.n	80080d0 <_vfiprintf_r+0x22c>
 8008050:	4b29      	ldr	r3, [pc, #164]	; (80080f8 <_vfiprintf_r+0x254>)
 8008052:	bb1b      	cbnz	r3, 800809c <_vfiprintf_r+0x1f8>
 8008054:	9b03      	ldr	r3, [sp, #12]
 8008056:	3307      	adds	r3, #7
 8008058:	f023 0307 	bic.w	r3, r3, #7
 800805c:	3308      	adds	r3, #8
 800805e:	9303      	str	r3, [sp, #12]
 8008060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008062:	443b      	add	r3, r7
 8008064:	9309      	str	r3, [sp, #36]	; 0x24
 8008066:	e767      	b.n	8007f38 <_vfiprintf_r+0x94>
 8008068:	fb0c 3202 	mla	r2, ip, r2, r3
 800806c:	460c      	mov	r4, r1
 800806e:	2001      	movs	r0, #1
 8008070:	e7a5      	b.n	8007fbe <_vfiprintf_r+0x11a>
 8008072:	2300      	movs	r3, #0
 8008074:	3401      	adds	r4, #1
 8008076:	9305      	str	r3, [sp, #20]
 8008078:	4619      	mov	r1, r3
 800807a:	f04f 0c0a 	mov.w	ip, #10
 800807e:	4620      	mov	r0, r4
 8008080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008084:	3a30      	subs	r2, #48	; 0x30
 8008086:	2a09      	cmp	r2, #9
 8008088:	d903      	bls.n	8008092 <_vfiprintf_r+0x1ee>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d0c5      	beq.n	800801a <_vfiprintf_r+0x176>
 800808e:	9105      	str	r1, [sp, #20]
 8008090:	e7c3      	b.n	800801a <_vfiprintf_r+0x176>
 8008092:	fb0c 2101 	mla	r1, ip, r1, r2
 8008096:	4604      	mov	r4, r0
 8008098:	2301      	movs	r3, #1
 800809a:	e7f0      	b.n	800807e <_vfiprintf_r+0x1da>
 800809c:	ab03      	add	r3, sp, #12
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	462a      	mov	r2, r5
 80080a2:	4b16      	ldr	r3, [pc, #88]	; (80080fc <_vfiprintf_r+0x258>)
 80080a4:	a904      	add	r1, sp, #16
 80080a6:	4630      	mov	r0, r6
 80080a8:	f7fd fe24 	bl	8005cf4 <_printf_float>
 80080ac:	4607      	mov	r7, r0
 80080ae:	1c78      	adds	r0, r7, #1
 80080b0:	d1d6      	bne.n	8008060 <_vfiprintf_r+0x1bc>
 80080b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080b4:	07d9      	lsls	r1, r3, #31
 80080b6:	d405      	bmi.n	80080c4 <_vfiprintf_r+0x220>
 80080b8:	89ab      	ldrh	r3, [r5, #12]
 80080ba:	059a      	lsls	r2, r3, #22
 80080bc:	d402      	bmi.n	80080c4 <_vfiprintf_r+0x220>
 80080be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080c0:	f000 faaf 	bl	8008622 <__retarget_lock_release_recursive>
 80080c4:	89ab      	ldrh	r3, [r5, #12]
 80080c6:	065b      	lsls	r3, r3, #25
 80080c8:	f53f af12 	bmi.w	8007ef0 <_vfiprintf_r+0x4c>
 80080cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080ce:	e711      	b.n	8007ef4 <_vfiprintf_r+0x50>
 80080d0:	ab03      	add	r3, sp, #12
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	462a      	mov	r2, r5
 80080d6:	4b09      	ldr	r3, [pc, #36]	; (80080fc <_vfiprintf_r+0x258>)
 80080d8:	a904      	add	r1, sp, #16
 80080da:	4630      	mov	r0, r6
 80080dc:	f7fe f8ae 	bl	800623c <_printf_i>
 80080e0:	e7e4      	b.n	80080ac <_vfiprintf_r+0x208>
 80080e2:	bf00      	nop
 80080e4:	08008d84 	.word	0x08008d84
 80080e8:	08008da4 	.word	0x08008da4
 80080ec:	08008d64 	.word	0x08008d64
 80080f0:	08008c0c 	.word	0x08008c0c
 80080f4:	08008c16 	.word	0x08008c16
 80080f8:	08005cf5 	.word	0x08005cf5
 80080fc:	08007e7f 	.word	0x08007e7f
 8008100:	08008c12 	.word	0x08008c12

08008104 <__swbuf_r>:
 8008104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008106:	460e      	mov	r6, r1
 8008108:	4614      	mov	r4, r2
 800810a:	4605      	mov	r5, r0
 800810c:	b118      	cbz	r0, 8008116 <__swbuf_r+0x12>
 800810e:	6983      	ldr	r3, [r0, #24]
 8008110:	b90b      	cbnz	r3, 8008116 <__swbuf_r+0x12>
 8008112:	f000 f9e7 	bl	80084e4 <__sinit>
 8008116:	4b21      	ldr	r3, [pc, #132]	; (800819c <__swbuf_r+0x98>)
 8008118:	429c      	cmp	r4, r3
 800811a:	d12b      	bne.n	8008174 <__swbuf_r+0x70>
 800811c:	686c      	ldr	r4, [r5, #4]
 800811e:	69a3      	ldr	r3, [r4, #24]
 8008120:	60a3      	str	r3, [r4, #8]
 8008122:	89a3      	ldrh	r3, [r4, #12]
 8008124:	071a      	lsls	r2, r3, #28
 8008126:	d52f      	bpl.n	8008188 <__swbuf_r+0x84>
 8008128:	6923      	ldr	r3, [r4, #16]
 800812a:	b36b      	cbz	r3, 8008188 <__swbuf_r+0x84>
 800812c:	6923      	ldr	r3, [r4, #16]
 800812e:	6820      	ldr	r0, [r4, #0]
 8008130:	1ac0      	subs	r0, r0, r3
 8008132:	6963      	ldr	r3, [r4, #20]
 8008134:	b2f6      	uxtb	r6, r6
 8008136:	4283      	cmp	r3, r0
 8008138:	4637      	mov	r7, r6
 800813a:	dc04      	bgt.n	8008146 <__swbuf_r+0x42>
 800813c:	4621      	mov	r1, r4
 800813e:	4628      	mov	r0, r5
 8008140:	f000 f93c 	bl	80083bc <_fflush_r>
 8008144:	bb30      	cbnz	r0, 8008194 <__swbuf_r+0x90>
 8008146:	68a3      	ldr	r3, [r4, #8]
 8008148:	3b01      	subs	r3, #1
 800814a:	60a3      	str	r3, [r4, #8]
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	1c5a      	adds	r2, r3, #1
 8008150:	6022      	str	r2, [r4, #0]
 8008152:	701e      	strb	r6, [r3, #0]
 8008154:	6963      	ldr	r3, [r4, #20]
 8008156:	3001      	adds	r0, #1
 8008158:	4283      	cmp	r3, r0
 800815a:	d004      	beq.n	8008166 <__swbuf_r+0x62>
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	07db      	lsls	r3, r3, #31
 8008160:	d506      	bpl.n	8008170 <__swbuf_r+0x6c>
 8008162:	2e0a      	cmp	r6, #10
 8008164:	d104      	bne.n	8008170 <__swbuf_r+0x6c>
 8008166:	4621      	mov	r1, r4
 8008168:	4628      	mov	r0, r5
 800816a:	f000 f927 	bl	80083bc <_fflush_r>
 800816e:	b988      	cbnz	r0, 8008194 <__swbuf_r+0x90>
 8008170:	4638      	mov	r0, r7
 8008172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008174:	4b0a      	ldr	r3, [pc, #40]	; (80081a0 <__swbuf_r+0x9c>)
 8008176:	429c      	cmp	r4, r3
 8008178:	d101      	bne.n	800817e <__swbuf_r+0x7a>
 800817a:	68ac      	ldr	r4, [r5, #8]
 800817c:	e7cf      	b.n	800811e <__swbuf_r+0x1a>
 800817e:	4b09      	ldr	r3, [pc, #36]	; (80081a4 <__swbuf_r+0xa0>)
 8008180:	429c      	cmp	r4, r3
 8008182:	bf08      	it	eq
 8008184:	68ec      	ldreq	r4, [r5, #12]
 8008186:	e7ca      	b.n	800811e <__swbuf_r+0x1a>
 8008188:	4621      	mov	r1, r4
 800818a:	4628      	mov	r0, r5
 800818c:	f000 f81a 	bl	80081c4 <__swsetup_r>
 8008190:	2800      	cmp	r0, #0
 8008192:	d0cb      	beq.n	800812c <__swbuf_r+0x28>
 8008194:	f04f 37ff 	mov.w	r7, #4294967295
 8008198:	e7ea      	b.n	8008170 <__swbuf_r+0x6c>
 800819a:	bf00      	nop
 800819c:	08008d84 	.word	0x08008d84
 80081a0:	08008da4 	.word	0x08008da4
 80081a4:	08008d64 	.word	0x08008d64

080081a8 <__ascii_wctomb>:
 80081a8:	b149      	cbz	r1, 80081be <__ascii_wctomb+0x16>
 80081aa:	2aff      	cmp	r2, #255	; 0xff
 80081ac:	bf85      	ittet	hi
 80081ae:	238a      	movhi	r3, #138	; 0x8a
 80081b0:	6003      	strhi	r3, [r0, #0]
 80081b2:	700a      	strbls	r2, [r1, #0]
 80081b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80081b8:	bf98      	it	ls
 80081ba:	2001      	movls	r0, #1
 80081bc:	4770      	bx	lr
 80081be:	4608      	mov	r0, r1
 80081c0:	4770      	bx	lr
	...

080081c4 <__swsetup_r>:
 80081c4:	4b32      	ldr	r3, [pc, #200]	; (8008290 <__swsetup_r+0xcc>)
 80081c6:	b570      	push	{r4, r5, r6, lr}
 80081c8:	681d      	ldr	r5, [r3, #0]
 80081ca:	4606      	mov	r6, r0
 80081cc:	460c      	mov	r4, r1
 80081ce:	b125      	cbz	r5, 80081da <__swsetup_r+0x16>
 80081d0:	69ab      	ldr	r3, [r5, #24]
 80081d2:	b913      	cbnz	r3, 80081da <__swsetup_r+0x16>
 80081d4:	4628      	mov	r0, r5
 80081d6:	f000 f985 	bl	80084e4 <__sinit>
 80081da:	4b2e      	ldr	r3, [pc, #184]	; (8008294 <__swsetup_r+0xd0>)
 80081dc:	429c      	cmp	r4, r3
 80081de:	d10f      	bne.n	8008200 <__swsetup_r+0x3c>
 80081e0:	686c      	ldr	r4, [r5, #4]
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081e8:	0719      	lsls	r1, r3, #28
 80081ea:	d42c      	bmi.n	8008246 <__swsetup_r+0x82>
 80081ec:	06dd      	lsls	r5, r3, #27
 80081ee:	d411      	bmi.n	8008214 <__swsetup_r+0x50>
 80081f0:	2309      	movs	r3, #9
 80081f2:	6033      	str	r3, [r6, #0]
 80081f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081f8:	81a3      	strh	r3, [r4, #12]
 80081fa:	f04f 30ff 	mov.w	r0, #4294967295
 80081fe:	e03e      	b.n	800827e <__swsetup_r+0xba>
 8008200:	4b25      	ldr	r3, [pc, #148]	; (8008298 <__swsetup_r+0xd4>)
 8008202:	429c      	cmp	r4, r3
 8008204:	d101      	bne.n	800820a <__swsetup_r+0x46>
 8008206:	68ac      	ldr	r4, [r5, #8]
 8008208:	e7eb      	b.n	80081e2 <__swsetup_r+0x1e>
 800820a:	4b24      	ldr	r3, [pc, #144]	; (800829c <__swsetup_r+0xd8>)
 800820c:	429c      	cmp	r4, r3
 800820e:	bf08      	it	eq
 8008210:	68ec      	ldreq	r4, [r5, #12]
 8008212:	e7e6      	b.n	80081e2 <__swsetup_r+0x1e>
 8008214:	0758      	lsls	r0, r3, #29
 8008216:	d512      	bpl.n	800823e <__swsetup_r+0x7a>
 8008218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800821a:	b141      	cbz	r1, 800822e <__swsetup_r+0x6a>
 800821c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008220:	4299      	cmp	r1, r3
 8008222:	d002      	beq.n	800822a <__swsetup_r+0x66>
 8008224:	4630      	mov	r0, r6
 8008226:	f7ff fb6f 	bl	8007908 <_free_r>
 800822a:	2300      	movs	r3, #0
 800822c:	6363      	str	r3, [r4, #52]	; 0x34
 800822e:	89a3      	ldrh	r3, [r4, #12]
 8008230:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008234:	81a3      	strh	r3, [r4, #12]
 8008236:	2300      	movs	r3, #0
 8008238:	6063      	str	r3, [r4, #4]
 800823a:	6923      	ldr	r3, [r4, #16]
 800823c:	6023      	str	r3, [r4, #0]
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	f043 0308 	orr.w	r3, r3, #8
 8008244:	81a3      	strh	r3, [r4, #12]
 8008246:	6923      	ldr	r3, [r4, #16]
 8008248:	b94b      	cbnz	r3, 800825e <__swsetup_r+0x9a>
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008254:	d003      	beq.n	800825e <__swsetup_r+0x9a>
 8008256:	4621      	mov	r1, r4
 8008258:	4630      	mov	r0, r6
 800825a:	f000 fa07 	bl	800866c <__smakebuf_r>
 800825e:	89a0      	ldrh	r0, [r4, #12]
 8008260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008264:	f010 0301 	ands.w	r3, r0, #1
 8008268:	d00a      	beq.n	8008280 <__swsetup_r+0xbc>
 800826a:	2300      	movs	r3, #0
 800826c:	60a3      	str	r3, [r4, #8]
 800826e:	6963      	ldr	r3, [r4, #20]
 8008270:	425b      	negs	r3, r3
 8008272:	61a3      	str	r3, [r4, #24]
 8008274:	6923      	ldr	r3, [r4, #16]
 8008276:	b943      	cbnz	r3, 800828a <__swsetup_r+0xc6>
 8008278:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800827c:	d1ba      	bne.n	80081f4 <__swsetup_r+0x30>
 800827e:	bd70      	pop	{r4, r5, r6, pc}
 8008280:	0781      	lsls	r1, r0, #30
 8008282:	bf58      	it	pl
 8008284:	6963      	ldrpl	r3, [r4, #20]
 8008286:	60a3      	str	r3, [r4, #8]
 8008288:	e7f4      	b.n	8008274 <__swsetup_r+0xb0>
 800828a:	2000      	movs	r0, #0
 800828c:	e7f7      	b.n	800827e <__swsetup_r+0xba>
 800828e:	bf00      	nop
 8008290:	2000000c 	.word	0x2000000c
 8008294:	08008d84 	.word	0x08008d84
 8008298:	08008da4 	.word	0x08008da4
 800829c:	08008d64 	.word	0x08008d64

080082a0 <abort>:
 80082a0:	b508      	push	{r3, lr}
 80082a2:	2006      	movs	r0, #6
 80082a4:	f000 fa52 	bl	800874c <raise>
 80082a8:	2001      	movs	r0, #1
 80082aa:	f7f9 fa27 	bl	80016fc <_exit>
	...

080082b0 <__sflush_r>:
 80082b0:	898a      	ldrh	r2, [r1, #12]
 80082b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b6:	4605      	mov	r5, r0
 80082b8:	0710      	lsls	r0, r2, #28
 80082ba:	460c      	mov	r4, r1
 80082bc:	d458      	bmi.n	8008370 <__sflush_r+0xc0>
 80082be:	684b      	ldr	r3, [r1, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	dc05      	bgt.n	80082d0 <__sflush_r+0x20>
 80082c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	dc02      	bgt.n	80082d0 <__sflush_r+0x20>
 80082ca:	2000      	movs	r0, #0
 80082cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082d2:	2e00      	cmp	r6, #0
 80082d4:	d0f9      	beq.n	80082ca <__sflush_r+0x1a>
 80082d6:	2300      	movs	r3, #0
 80082d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082dc:	682f      	ldr	r7, [r5, #0]
 80082de:	602b      	str	r3, [r5, #0]
 80082e0:	d032      	beq.n	8008348 <__sflush_r+0x98>
 80082e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	075a      	lsls	r2, r3, #29
 80082e8:	d505      	bpl.n	80082f6 <__sflush_r+0x46>
 80082ea:	6863      	ldr	r3, [r4, #4]
 80082ec:	1ac0      	subs	r0, r0, r3
 80082ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082f0:	b10b      	cbz	r3, 80082f6 <__sflush_r+0x46>
 80082f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082f4:	1ac0      	subs	r0, r0, r3
 80082f6:	2300      	movs	r3, #0
 80082f8:	4602      	mov	r2, r0
 80082fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082fc:	6a21      	ldr	r1, [r4, #32]
 80082fe:	4628      	mov	r0, r5
 8008300:	47b0      	blx	r6
 8008302:	1c43      	adds	r3, r0, #1
 8008304:	89a3      	ldrh	r3, [r4, #12]
 8008306:	d106      	bne.n	8008316 <__sflush_r+0x66>
 8008308:	6829      	ldr	r1, [r5, #0]
 800830a:	291d      	cmp	r1, #29
 800830c:	d82c      	bhi.n	8008368 <__sflush_r+0xb8>
 800830e:	4a2a      	ldr	r2, [pc, #168]	; (80083b8 <__sflush_r+0x108>)
 8008310:	40ca      	lsrs	r2, r1
 8008312:	07d6      	lsls	r6, r2, #31
 8008314:	d528      	bpl.n	8008368 <__sflush_r+0xb8>
 8008316:	2200      	movs	r2, #0
 8008318:	6062      	str	r2, [r4, #4]
 800831a:	04d9      	lsls	r1, r3, #19
 800831c:	6922      	ldr	r2, [r4, #16]
 800831e:	6022      	str	r2, [r4, #0]
 8008320:	d504      	bpl.n	800832c <__sflush_r+0x7c>
 8008322:	1c42      	adds	r2, r0, #1
 8008324:	d101      	bne.n	800832a <__sflush_r+0x7a>
 8008326:	682b      	ldr	r3, [r5, #0]
 8008328:	b903      	cbnz	r3, 800832c <__sflush_r+0x7c>
 800832a:	6560      	str	r0, [r4, #84]	; 0x54
 800832c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800832e:	602f      	str	r7, [r5, #0]
 8008330:	2900      	cmp	r1, #0
 8008332:	d0ca      	beq.n	80082ca <__sflush_r+0x1a>
 8008334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008338:	4299      	cmp	r1, r3
 800833a:	d002      	beq.n	8008342 <__sflush_r+0x92>
 800833c:	4628      	mov	r0, r5
 800833e:	f7ff fae3 	bl	8007908 <_free_r>
 8008342:	2000      	movs	r0, #0
 8008344:	6360      	str	r0, [r4, #52]	; 0x34
 8008346:	e7c1      	b.n	80082cc <__sflush_r+0x1c>
 8008348:	6a21      	ldr	r1, [r4, #32]
 800834a:	2301      	movs	r3, #1
 800834c:	4628      	mov	r0, r5
 800834e:	47b0      	blx	r6
 8008350:	1c41      	adds	r1, r0, #1
 8008352:	d1c7      	bne.n	80082e4 <__sflush_r+0x34>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d0c4      	beq.n	80082e4 <__sflush_r+0x34>
 800835a:	2b1d      	cmp	r3, #29
 800835c:	d001      	beq.n	8008362 <__sflush_r+0xb2>
 800835e:	2b16      	cmp	r3, #22
 8008360:	d101      	bne.n	8008366 <__sflush_r+0xb6>
 8008362:	602f      	str	r7, [r5, #0]
 8008364:	e7b1      	b.n	80082ca <__sflush_r+0x1a>
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800836c:	81a3      	strh	r3, [r4, #12]
 800836e:	e7ad      	b.n	80082cc <__sflush_r+0x1c>
 8008370:	690f      	ldr	r7, [r1, #16]
 8008372:	2f00      	cmp	r7, #0
 8008374:	d0a9      	beq.n	80082ca <__sflush_r+0x1a>
 8008376:	0793      	lsls	r3, r2, #30
 8008378:	680e      	ldr	r6, [r1, #0]
 800837a:	bf08      	it	eq
 800837c:	694b      	ldreq	r3, [r1, #20]
 800837e:	600f      	str	r7, [r1, #0]
 8008380:	bf18      	it	ne
 8008382:	2300      	movne	r3, #0
 8008384:	eba6 0807 	sub.w	r8, r6, r7
 8008388:	608b      	str	r3, [r1, #8]
 800838a:	f1b8 0f00 	cmp.w	r8, #0
 800838e:	dd9c      	ble.n	80082ca <__sflush_r+0x1a>
 8008390:	6a21      	ldr	r1, [r4, #32]
 8008392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008394:	4643      	mov	r3, r8
 8008396:	463a      	mov	r2, r7
 8008398:	4628      	mov	r0, r5
 800839a:	47b0      	blx	r6
 800839c:	2800      	cmp	r0, #0
 800839e:	dc06      	bgt.n	80083ae <__sflush_r+0xfe>
 80083a0:	89a3      	ldrh	r3, [r4, #12]
 80083a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a6:	81a3      	strh	r3, [r4, #12]
 80083a8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ac:	e78e      	b.n	80082cc <__sflush_r+0x1c>
 80083ae:	4407      	add	r7, r0
 80083b0:	eba8 0800 	sub.w	r8, r8, r0
 80083b4:	e7e9      	b.n	800838a <__sflush_r+0xda>
 80083b6:	bf00      	nop
 80083b8:	20400001 	.word	0x20400001

080083bc <_fflush_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	690b      	ldr	r3, [r1, #16]
 80083c0:	4605      	mov	r5, r0
 80083c2:	460c      	mov	r4, r1
 80083c4:	b913      	cbnz	r3, 80083cc <_fflush_r+0x10>
 80083c6:	2500      	movs	r5, #0
 80083c8:	4628      	mov	r0, r5
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	b118      	cbz	r0, 80083d6 <_fflush_r+0x1a>
 80083ce:	6983      	ldr	r3, [r0, #24]
 80083d0:	b90b      	cbnz	r3, 80083d6 <_fflush_r+0x1a>
 80083d2:	f000 f887 	bl	80084e4 <__sinit>
 80083d6:	4b14      	ldr	r3, [pc, #80]	; (8008428 <_fflush_r+0x6c>)
 80083d8:	429c      	cmp	r4, r3
 80083da:	d11b      	bne.n	8008414 <_fflush_r+0x58>
 80083dc:	686c      	ldr	r4, [r5, #4]
 80083de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d0ef      	beq.n	80083c6 <_fflush_r+0xa>
 80083e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083e8:	07d0      	lsls	r0, r2, #31
 80083ea:	d404      	bmi.n	80083f6 <_fflush_r+0x3a>
 80083ec:	0599      	lsls	r1, r3, #22
 80083ee:	d402      	bmi.n	80083f6 <_fflush_r+0x3a>
 80083f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083f2:	f000 f915 	bl	8008620 <__retarget_lock_acquire_recursive>
 80083f6:	4628      	mov	r0, r5
 80083f8:	4621      	mov	r1, r4
 80083fa:	f7ff ff59 	bl	80082b0 <__sflush_r>
 80083fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008400:	07da      	lsls	r2, r3, #31
 8008402:	4605      	mov	r5, r0
 8008404:	d4e0      	bmi.n	80083c8 <_fflush_r+0xc>
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	059b      	lsls	r3, r3, #22
 800840a:	d4dd      	bmi.n	80083c8 <_fflush_r+0xc>
 800840c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800840e:	f000 f908 	bl	8008622 <__retarget_lock_release_recursive>
 8008412:	e7d9      	b.n	80083c8 <_fflush_r+0xc>
 8008414:	4b05      	ldr	r3, [pc, #20]	; (800842c <_fflush_r+0x70>)
 8008416:	429c      	cmp	r4, r3
 8008418:	d101      	bne.n	800841e <_fflush_r+0x62>
 800841a:	68ac      	ldr	r4, [r5, #8]
 800841c:	e7df      	b.n	80083de <_fflush_r+0x22>
 800841e:	4b04      	ldr	r3, [pc, #16]	; (8008430 <_fflush_r+0x74>)
 8008420:	429c      	cmp	r4, r3
 8008422:	bf08      	it	eq
 8008424:	68ec      	ldreq	r4, [r5, #12]
 8008426:	e7da      	b.n	80083de <_fflush_r+0x22>
 8008428:	08008d84 	.word	0x08008d84
 800842c:	08008da4 	.word	0x08008da4
 8008430:	08008d64 	.word	0x08008d64

08008434 <std>:
 8008434:	2300      	movs	r3, #0
 8008436:	b510      	push	{r4, lr}
 8008438:	4604      	mov	r4, r0
 800843a:	e9c0 3300 	strd	r3, r3, [r0]
 800843e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008442:	6083      	str	r3, [r0, #8]
 8008444:	8181      	strh	r1, [r0, #12]
 8008446:	6643      	str	r3, [r0, #100]	; 0x64
 8008448:	81c2      	strh	r2, [r0, #14]
 800844a:	6183      	str	r3, [r0, #24]
 800844c:	4619      	mov	r1, r3
 800844e:	2208      	movs	r2, #8
 8008450:	305c      	adds	r0, #92	; 0x5c
 8008452:	f7fd fba7 	bl	8005ba4 <memset>
 8008456:	4b05      	ldr	r3, [pc, #20]	; (800846c <std+0x38>)
 8008458:	6263      	str	r3, [r4, #36]	; 0x24
 800845a:	4b05      	ldr	r3, [pc, #20]	; (8008470 <std+0x3c>)
 800845c:	62a3      	str	r3, [r4, #40]	; 0x28
 800845e:	4b05      	ldr	r3, [pc, #20]	; (8008474 <std+0x40>)
 8008460:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008462:	4b05      	ldr	r3, [pc, #20]	; (8008478 <std+0x44>)
 8008464:	6224      	str	r4, [r4, #32]
 8008466:	6323      	str	r3, [r4, #48]	; 0x30
 8008468:	bd10      	pop	{r4, pc}
 800846a:	bf00      	nop
 800846c:	08008785 	.word	0x08008785
 8008470:	080087a7 	.word	0x080087a7
 8008474:	080087df 	.word	0x080087df
 8008478:	08008803 	.word	0x08008803

0800847c <_cleanup_r>:
 800847c:	4901      	ldr	r1, [pc, #4]	; (8008484 <_cleanup_r+0x8>)
 800847e:	f000 b8af 	b.w	80085e0 <_fwalk_reent>
 8008482:	bf00      	nop
 8008484:	080083bd 	.word	0x080083bd

08008488 <__sfmoreglue>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	1e4a      	subs	r2, r1, #1
 800848c:	2568      	movs	r5, #104	; 0x68
 800848e:	4355      	muls	r5, r2
 8008490:	460e      	mov	r6, r1
 8008492:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008496:	f7ff fa87 	bl	80079a8 <_malloc_r>
 800849a:	4604      	mov	r4, r0
 800849c:	b140      	cbz	r0, 80084b0 <__sfmoreglue+0x28>
 800849e:	2100      	movs	r1, #0
 80084a0:	e9c0 1600 	strd	r1, r6, [r0]
 80084a4:	300c      	adds	r0, #12
 80084a6:	60a0      	str	r0, [r4, #8]
 80084a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084ac:	f7fd fb7a 	bl	8005ba4 <memset>
 80084b0:	4620      	mov	r0, r4
 80084b2:	bd70      	pop	{r4, r5, r6, pc}

080084b4 <__sfp_lock_acquire>:
 80084b4:	4801      	ldr	r0, [pc, #4]	; (80084bc <__sfp_lock_acquire+0x8>)
 80084b6:	f000 b8b3 	b.w	8008620 <__retarget_lock_acquire_recursive>
 80084ba:	bf00      	nop
 80084bc:	2000054c 	.word	0x2000054c

080084c0 <__sfp_lock_release>:
 80084c0:	4801      	ldr	r0, [pc, #4]	; (80084c8 <__sfp_lock_release+0x8>)
 80084c2:	f000 b8ae 	b.w	8008622 <__retarget_lock_release_recursive>
 80084c6:	bf00      	nop
 80084c8:	2000054c 	.word	0x2000054c

080084cc <__sinit_lock_acquire>:
 80084cc:	4801      	ldr	r0, [pc, #4]	; (80084d4 <__sinit_lock_acquire+0x8>)
 80084ce:	f000 b8a7 	b.w	8008620 <__retarget_lock_acquire_recursive>
 80084d2:	bf00      	nop
 80084d4:	20000547 	.word	0x20000547

080084d8 <__sinit_lock_release>:
 80084d8:	4801      	ldr	r0, [pc, #4]	; (80084e0 <__sinit_lock_release+0x8>)
 80084da:	f000 b8a2 	b.w	8008622 <__retarget_lock_release_recursive>
 80084de:	bf00      	nop
 80084e0:	20000547 	.word	0x20000547

080084e4 <__sinit>:
 80084e4:	b510      	push	{r4, lr}
 80084e6:	4604      	mov	r4, r0
 80084e8:	f7ff fff0 	bl	80084cc <__sinit_lock_acquire>
 80084ec:	69a3      	ldr	r3, [r4, #24]
 80084ee:	b11b      	cbz	r3, 80084f8 <__sinit+0x14>
 80084f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084f4:	f7ff bff0 	b.w	80084d8 <__sinit_lock_release>
 80084f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084fc:	6523      	str	r3, [r4, #80]	; 0x50
 80084fe:	4b13      	ldr	r3, [pc, #76]	; (800854c <__sinit+0x68>)
 8008500:	4a13      	ldr	r2, [pc, #76]	; (8008550 <__sinit+0x6c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	62a2      	str	r2, [r4, #40]	; 0x28
 8008506:	42a3      	cmp	r3, r4
 8008508:	bf04      	itt	eq
 800850a:	2301      	moveq	r3, #1
 800850c:	61a3      	streq	r3, [r4, #24]
 800850e:	4620      	mov	r0, r4
 8008510:	f000 f820 	bl	8008554 <__sfp>
 8008514:	6060      	str	r0, [r4, #4]
 8008516:	4620      	mov	r0, r4
 8008518:	f000 f81c 	bl	8008554 <__sfp>
 800851c:	60a0      	str	r0, [r4, #8]
 800851e:	4620      	mov	r0, r4
 8008520:	f000 f818 	bl	8008554 <__sfp>
 8008524:	2200      	movs	r2, #0
 8008526:	60e0      	str	r0, [r4, #12]
 8008528:	2104      	movs	r1, #4
 800852a:	6860      	ldr	r0, [r4, #4]
 800852c:	f7ff ff82 	bl	8008434 <std>
 8008530:	68a0      	ldr	r0, [r4, #8]
 8008532:	2201      	movs	r2, #1
 8008534:	2109      	movs	r1, #9
 8008536:	f7ff ff7d 	bl	8008434 <std>
 800853a:	68e0      	ldr	r0, [r4, #12]
 800853c:	2202      	movs	r2, #2
 800853e:	2112      	movs	r1, #18
 8008540:	f7ff ff78 	bl	8008434 <std>
 8008544:	2301      	movs	r3, #1
 8008546:	61a3      	str	r3, [r4, #24]
 8008548:	e7d2      	b.n	80084f0 <__sinit+0xc>
 800854a:	bf00      	nop
 800854c:	080089e0 	.word	0x080089e0
 8008550:	0800847d 	.word	0x0800847d

08008554 <__sfp>:
 8008554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008556:	4607      	mov	r7, r0
 8008558:	f7ff ffac 	bl	80084b4 <__sfp_lock_acquire>
 800855c:	4b1e      	ldr	r3, [pc, #120]	; (80085d8 <__sfp+0x84>)
 800855e:	681e      	ldr	r6, [r3, #0]
 8008560:	69b3      	ldr	r3, [r6, #24]
 8008562:	b913      	cbnz	r3, 800856a <__sfp+0x16>
 8008564:	4630      	mov	r0, r6
 8008566:	f7ff ffbd 	bl	80084e4 <__sinit>
 800856a:	3648      	adds	r6, #72	; 0x48
 800856c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008570:	3b01      	subs	r3, #1
 8008572:	d503      	bpl.n	800857c <__sfp+0x28>
 8008574:	6833      	ldr	r3, [r6, #0]
 8008576:	b30b      	cbz	r3, 80085bc <__sfp+0x68>
 8008578:	6836      	ldr	r6, [r6, #0]
 800857a:	e7f7      	b.n	800856c <__sfp+0x18>
 800857c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008580:	b9d5      	cbnz	r5, 80085b8 <__sfp+0x64>
 8008582:	4b16      	ldr	r3, [pc, #88]	; (80085dc <__sfp+0x88>)
 8008584:	60e3      	str	r3, [r4, #12]
 8008586:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800858a:	6665      	str	r5, [r4, #100]	; 0x64
 800858c:	f000 f847 	bl	800861e <__retarget_lock_init_recursive>
 8008590:	f7ff ff96 	bl	80084c0 <__sfp_lock_release>
 8008594:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008598:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800859c:	6025      	str	r5, [r4, #0]
 800859e:	61a5      	str	r5, [r4, #24]
 80085a0:	2208      	movs	r2, #8
 80085a2:	4629      	mov	r1, r5
 80085a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085a8:	f7fd fafc 	bl	8005ba4 <memset>
 80085ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085b4:	4620      	mov	r0, r4
 80085b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b8:	3468      	adds	r4, #104	; 0x68
 80085ba:	e7d9      	b.n	8008570 <__sfp+0x1c>
 80085bc:	2104      	movs	r1, #4
 80085be:	4638      	mov	r0, r7
 80085c0:	f7ff ff62 	bl	8008488 <__sfmoreglue>
 80085c4:	4604      	mov	r4, r0
 80085c6:	6030      	str	r0, [r6, #0]
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d1d5      	bne.n	8008578 <__sfp+0x24>
 80085cc:	f7ff ff78 	bl	80084c0 <__sfp_lock_release>
 80085d0:	230c      	movs	r3, #12
 80085d2:	603b      	str	r3, [r7, #0]
 80085d4:	e7ee      	b.n	80085b4 <__sfp+0x60>
 80085d6:	bf00      	nop
 80085d8:	080089e0 	.word	0x080089e0
 80085dc:	ffff0001 	.word	0xffff0001

080085e0 <_fwalk_reent>:
 80085e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e4:	4606      	mov	r6, r0
 80085e6:	4688      	mov	r8, r1
 80085e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085ec:	2700      	movs	r7, #0
 80085ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085f2:	f1b9 0901 	subs.w	r9, r9, #1
 80085f6:	d505      	bpl.n	8008604 <_fwalk_reent+0x24>
 80085f8:	6824      	ldr	r4, [r4, #0]
 80085fa:	2c00      	cmp	r4, #0
 80085fc:	d1f7      	bne.n	80085ee <_fwalk_reent+0xe>
 80085fe:	4638      	mov	r0, r7
 8008600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008604:	89ab      	ldrh	r3, [r5, #12]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d907      	bls.n	800861a <_fwalk_reent+0x3a>
 800860a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800860e:	3301      	adds	r3, #1
 8008610:	d003      	beq.n	800861a <_fwalk_reent+0x3a>
 8008612:	4629      	mov	r1, r5
 8008614:	4630      	mov	r0, r6
 8008616:	47c0      	blx	r8
 8008618:	4307      	orrs	r7, r0
 800861a:	3568      	adds	r5, #104	; 0x68
 800861c:	e7e9      	b.n	80085f2 <_fwalk_reent+0x12>

0800861e <__retarget_lock_init_recursive>:
 800861e:	4770      	bx	lr

08008620 <__retarget_lock_acquire_recursive>:
 8008620:	4770      	bx	lr

08008622 <__retarget_lock_release_recursive>:
 8008622:	4770      	bx	lr

08008624 <__swhatbuf_r>:
 8008624:	b570      	push	{r4, r5, r6, lr}
 8008626:	460e      	mov	r6, r1
 8008628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800862c:	2900      	cmp	r1, #0
 800862e:	b096      	sub	sp, #88	; 0x58
 8008630:	4614      	mov	r4, r2
 8008632:	461d      	mov	r5, r3
 8008634:	da07      	bge.n	8008646 <__swhatbuf_r+0x22>
 8008636:	2300      	movs	r3, #0
 8008638:	602b      	str	r3, [r5, #0]
 800863a:	89b3      	ldrh	r3, [r6, #12]
 800863c:	061a      	lsls	r2, r3, #24
 800863e:	d410      	bmi.n	8008662 <__swhatbuf_r+0x3e>
 8008640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008644:	e00e      	b.n	8008664 <__swhatbuf_r+0x40>
 8008646:	466a      	mov	r2, sp
 8008648:	f000 f902 	bl	8008850 <_fstat_r>
 800864c:	2800      	cmp	r0, #0
 800864e:	dbf2      	blt.n	8008636 <__swhatbuf_r+0x12>
 8008650:	9a01      	ldr	r2, [sp, #4]
 8008652:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008656:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800865a:	425a      	negs	r2, r3
 800865c:	415a      	adcs	r2, r3
 800865e:	602a      	str	r2, [r5, #0]
 8008660:	e7ee      	b.n	8008640 <__swhatbuf_r+0x1c>
 8008662:	2340      	movs	r3, #64	; 0x40
 8008664:	2000      	movs	r0, #0
 8008666:	6023      	str	r3, [r4, #0]
 8008668:	b016      	add	sp, #88	; 0x58
 800866a:	bd70      	pop	{r4, r5, r6, pc}

0800866c <__smakebuf_r>:
 800866c:	898b      	ldrh	r3, [r1, #12]
 800866e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008670:	079d      	lsls	r5, r3, #30
 8008672:	4606      	mov	r6, r0
 8008674:	460c      	mov	r4, r1
 8008676:	d507      	bpl.n	8008688 <__smakebuf_r+0x1c>
 8008678:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800867c:	6023      	str	r3, [r4, #0]
 800867e:	6123      	str	r3, [r4, #16]
 8008680:	2301      	movs	r3, #1
 8008682:	6163      	str	r3, [r4, #20]
 8008684:	b002      	add	sp, #8
 8008686:	bd70      	pop	{r4, r5, r6, pc}
 8008688:	ab01      	add	r3, sp, #4
 800868a:	466a      	mov	r2, sp
 800868c:	f7ff ffca 	bl	8008624 <__swhatbuf_r>
 8008690:	9900      	ldr	r1, [sp, #0]
 8008692:	4605      	mov	r5, r0
 8008694:	4630      	mov	r0, r6
 8008696:	f7ff f987 	bl	80079a8 <_malloc_r>
 800869a:	b948      	cbnz	r0, 80086b0 <__smakebuf_r+0x44>
 800869c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086a0:	059a      	lsls	r2, r3, #22
 80086a2:	d4ef      	bmi.n	8008684 <__smakebuf_r+0x18>
 80086a4:	f023 0303 	bic.w	r3, r3, #3
 80086a8:	f043 0302 	orr.w	r3, r3, #2
 80086ac:	81a3      	strh	r3, [r4, #12]
 80086ae:	e7e3      	b.n	8008678 <__smakebuf_r+0xc>
 80086b0:	4b0d      	ldr	r3, [pc, #52]	; (80086e8 <__smakebuf_r+0x7c>)
 80086b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80086b4:	89a3      	ldrh	r3, [r4, #12]
 80086b6:	6020      	str	r0, [r4, #0]
 80086b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086bc:	81a3      	strh	r3, [r4, #12]
 80086be:	9b00      	ldr	r3, [sp, #0]
 80086c0:	6163      	str	r3, [r4, #20]
 80086c2:	9b01      	ldr	r3, [sp, #4]
 80086c4:	6120      	str	r0, [r4, #16]
 80086c6:	b15b      	cbz	r3, 80086e0 <__smakebuf_r+0x74>
 80086c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086cc:	4630      	mov	r0, r6
 80086ce:	f000 f8d1 	bl	8008874 <_isatty_r>
 80086d2:	b128      	cbz	r0, 80086e0 <__smakebuf_r+0x74>
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	f023 0303 	bic.w	r3, r3, #3
 80086da:	f043 0301 	orr.w	r3, r3, #1
 80086de:	81a3      	strh	r3, [r4, #12]
 80086e0:	89a0      	ldrh	r0, [r4, #12]
 80086e2:	4305      	orrs	r5, r0
 80086e4:	81a5      	strh	r5, [r4, #12]
 80086e6:	e7cd      	b.n	8008684 <__smakebuf_r+0x18>
 80086e8:	0800847d 	.word	0x0800847d

080086ec <_malloc_usable_size_r>:
 80086ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086f0:	1f18      	subs	r0, r3, #4
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	bfbc      	itt	lt
 80086f6:	580b      	ldrlt	r3, [r1, r0]
 80086f8:	18c0      	addlt	r0, r0, r3
 80086fa:	4770      	bx	lr

080086fc <_raise_r>:
 80086fc:	291f      	cmp	r1, #31
 80086fe:	b538      	push	{r3, r4, r5, lr}
 8008700:	4604      	mov	r4, r0
 8008702:	460d      	mov	r5, r1
 8008704:	d904      	bls.n	8008710 <_raise_r+0x14>
 8008706:	2316      	movs	r3, #22
 8008708:	6003      	str	r3, [r0, #0]
 800870a:	f04f 30ff 	mov.w	r0, #4294967295
 800870e:	bd38      	pop	{r3, r4, r5, pc}
 8008710:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008712:	b112      	cbz	r2, 800871a <_raise_r+0x1e>
 8008714:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008718:	b94b      	cbnz	r3, 800872e <_raise_r+0x32>
 800871a:	4620      	mov	r0, r4
 800871c:	f000 f830 	bl	8008780 <_getpid_r>
 8008720:	462a      	mov	r2, r5
 8008722:	4601      	mov	r1, r0
 8008724:	4620      	mov	r0, r4
 8008726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800872a:	f000 b817 	b.w	800875c <_kill_r>
 800872e:	2b01      	cmp	r3, #1
 8008730:	d00a      	beq.n	8008748 <_raise_r+0x4c>
 8008732:	1c59      	adds	r1, r3, #1
 8008734:	d103      	bne.n	800873e <_raise_r+0x42>
 8008736:	2316      	movs	r3, #22
 8008738:	6003      	str	r3, [r0, #0]
 800873a:	2001      	movs	r0, #1
 800873c:	e7e7      	b.n	800870e <_raise_r+0x12>
 800873e:	2400      	movs	r4, #0
 8008740:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008744:	4628      	mov	r0, r5
 8008746:	4798      	blx	r3
 8008748:	2000      	movs	r0, #0
 800874a:	e7e0      	b.n	800870e <_raise_r+0x12>

0800874c <raise>:
 800874c:	4b02      	ldr	r3, [pc, #8]	; (8008758 <raise+0xc>)
 800874e:	4601      	mov	r1, r0
 8008750:	6818      	ldr	r0, [r3, #0]
 8008752:	f7ff bfd3 	b.w	80086fc <_raise_r>
 8008756:	bf00      	nop
 8008758:	2000000c 	.word	0x2000000c

0800875c <_kill_r>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	4d07      	ldr	r5, [pc, #28]	; (800877c <_kill_r+0x20>)
 8008760:	2300      	movs	r3, #0
 8008762:	4604      	mov	r4, r0
 8008764:	4608      	mov	r0, r1
 8008766:	4611      	mov	r1, r2
 8008768:	602b      	str	r3, [r5, #0]
 800876a:	f7f8 ffb7 	bl	80016dc <_kill>
 800876e:	1c43      	adds	r3, r0, #1
 8008770:	d102      	bne.n	8008778 <_kill_r+0x1c>
 8008772:	682b      	ldr	r3, [r5, #0]
 8008774:	b103      	cbz	r3, 8008778 <_kill_r+0x1c>
 8008776:	6023      	str	r3, [r4, #0]
 8008778:	bd38      	pop	{r3, r4, r5, pc}
 800877a:	bf00      	nop
 800877c:	20000540 	.word	0x20000540

08008780 <_getpid_r>:
 8008780:	f7f8 bfa4 	b.w	80016cc <_getpid>

08008784 <__sread>:
 8008784:	b510      	push	{r4, lr}
 8008786:	460c      	mov	r4, r1
 8008788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878c:	f000 f894 	bl	80088b8 <_read_r>
 8008790:	2800      	cmp	r0, #0
 8008792:	bfab      	itete	ge
 8008794:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008796:	89a3      	ldrhlt	r3, [r4, #12]
 8008798:	181b      	addge	r3, r3, r0
 800879a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800879e:	bfac      	ite	ge
 80087a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80087a2:	81a3      	strhlt	r3, [r4, #12]
 80087a4:	bd10      	pop	{r4, pc}

080087a6 <__swrite>:
 80087a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087aa:	461f      	mov	r7, r3
 80087ac:	898b      	ldrh	r3, [r1, #12]
 80087ae:	05db      	lsls	r3, r3, #23
 80087b0:	4605      	mov	r5, r0
 80087b2:	460c      	mov	r4, r1
 80087b4:	4616      	mov	r6, r2
 80087b6:	d505      	bpl.n	80087c4 <__swrite+0x1e>
 80087b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087bc:	2302      	movs	r3, #2
 80087be:	2200      	movs	r2, #0
 80087c0:	f000 f868 	bl	8008894 <_lseek_r>
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087ce:	81a3      	strh	r3, [r4, #12]
 80087d0:	4632      	mov	r2, r6
 80087d2:	463b      	mov	r3, r7
 80087d4:	4628      	mov	r0, r5
 80087d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087da:	f000 b817 	b.w	800880c <_write_r>

080087de <__sseek>:
 80087de:	b510      	push	{r4, lr}
 80087e0:	460c      	mov	r4, r1
 80087e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e6:	f000 f855 	bl	8008894 <_lseek_r>
 80087ea:	1c43      	adds	r3, r0, #1
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	bf15      	itete	ne
 80087f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80087f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087fa:	81a3      	strheq	r3, [r4, #12]
 80087fc:	bf18      	it	ne
 80087fe:	81a3      	strhne	r3, [r4, #12]
 8008800:	bd10      	pop	{r4, pc}

08008802 <__sclose>:
 8008802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008806:	f000 b813 	b.w	8008830 <_close_r>
	...

0800880c <_write_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4d07      	ldr	r5, [pc, #28]	; (800882c <_write_r+0x20>)
 8008810:	4604      	mov	r4, r0
 8008812:	4608      	mov	r0, r1
 8008814:	4611      	mov	r1, r2
 8008816:	2200      	movs	r2, #0
 8008818:	602a      	str	r2, [r5, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	f7f8 ff95 	bl	800174a <_write>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d102      	bne.n	800882a <_write_r+0x1e>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b103      	cbz	r3, 800882a <_write_r+0x1e>
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	20000540 	.word	0x20000540

08008830 <_close_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4d06      	ldr	r5, [pc, #24]	; (800884c <_close_r+0x1c>)
 8008834:	2300      	movs	r3, #0
 8008836:	4604      	mov	r4, r0
 8008838:	4608      	mov	r0, r1
 800883a:	602b      	str	r3, [r5, #0]
 800883c:	f7f8 ffa1 	bl	8001782 <_close>
 8008840:	1c43      	adds	r3, r0, #1
 8008842:	d102      	bne.n	800884a <_close_r+0x1a>
 8008844:	682b      	ldr	r3, [r5, #0]
 8008846:	b103      	cbz	r3, 800884a <_close_r+0x1a>
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	20000540 	.word	0x20000540

08008850 <_fstat_r>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4d07      	ldr	r5, [pc, #28]	; (8008870 <_fstat_r+0x20>)
 8008854:	2300      	movs	r3, #0
 8008856:	4604      	mov	r4, r0
 8008858:	4608      	mov	r0, r1
 800885a:	4611      	mov	r1, r2
 800885c:	602b      	str	r3, [r5, #0]
 800885e:	f7f8 ff9c 	bl	800179a <_fstat>
 8008862:	1c43      	adds	r3, r0, #1
 8008864:	d102      	bne.n	800886c <_fstat_r+0x1c>
 8008866:	682b      	ldr	r3, [r5, #0]
 8008868:	b103      	cbz	r3, 800886c <_fstat_r+0x1c>
 800886a:	6023      	str	r3, [r4, #0]
 800886c:	bd38      	pop	{r3, r4, r5, pc}
 800886e:	bf00      	nop
 8008870:	20000540 	.word	0x20000540

08008874 <_isatty_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4d06      	ldr	r5, [pc, #24]	; (8008890 <_isatty_r+0x1c>)
 8008878:	2300      	movs	r3, #0
 800887a:	4604      	mov	r4, r0
 800887c:	4608      	mov	r0, r1
 800887e:	602b      	str	r3, [r5, #0]
 8008880:	f7f8 ff9b 	bl	80017ba <_isatty>
 8008884:	1c43      	adds	r3, r0, #1
 8008886:	d102      	bne.n	800888e <_isatty_r+0x1a>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	b103      	cbz	r3, 800888e <_isatty_r+0x1a>
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	bd38      	pop	{r3, r4, r5, pc}
 8008890:	20000540 	.word	0x20000540

08008894 <_lseek_r>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	4d07      	ldr	r5, [pc, #28]	; (80088b4 <_lseek_r+0x20>)
 8008898:	4604      	mov	r4, r0
 800889a:	4608      	mov	r0, r1
 800889c:	4611      	mov	r1, r2
 800889e:	2200      	movs	r2, #0
 80088a0:	602a      	str	r2, [r5, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	f7f8 ff94 	bl	80017d0 <_lseek>
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	d102      	bne.n	80088b2 <_lseek_r+0x1e>
 80088ac:	682b      	ldr	r3, [r5, #0]
 80088ae:	b103      	cbz	r3, 80088b2 <_lseek_r+0x1e>
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	20000540 	.word	0x20000540

080088b8 <_read_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4d07      	ldr	r5, [pc, #28]	; (80088d8 <_read_r+0x20>)
 80088bc:	4604      	mov	r4, r0
 80088be:	4608      	mov	r0, r1
 80088c0:	4611      	mov	r1, r2
 80088c2:	2200      	movs	r2, #0
 80088c4:	602a      	str	r2, [r5, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	f7f8 ff22 	bl	8001710 <_read>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d102      	bne.n	80088d6 <_read_r+0x1e>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	b103      	cbz	r3, 80088d6 <_read_r+0x1e>
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	20000540 	.word	0x20000540

080088dc <_init>:
 80088dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088de:	bf00      	nop
 80088e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088e2:	bc08      	pop	{r3}
 80088e4:	469e      	mov	lr, r3
 80088e6:	4770      	bx	lr

080088e8 <_fini>:
 80088e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ea:	bf00      	nop
 80088ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ee:	bc08      	pop	{r3}
 80088f0:	469e      	mov	lr, r3
 80088f2:	4770      	bx	lr
